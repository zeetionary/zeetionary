import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:zeetionary/constants.dart';

enum TtsState { playing }

class EnglishEntryhonour extends StatefulWidget {
  const EnglishEntryhonour({super.key});

  @override
  State<EnglishEntryhonour> createState() => _EnglishEntryhonourState();
}

class _EnglishEntryhonourState extends State<EnglishEntryhonour> {
  @override
  void initState() {
    super.initState();
    flutterTts = FlutterTts();
    flutterTts.setLanguage("en-GB");
    flutterTts.setLanguage("en-US");
    fetchSentences();
  }

  FlutterTts flutterTts = FlutterTts();

  bool isSpeaking = false;

  Future<void> startSpeaking(
      String languageCode, EnglishMeaningConst englishMeaningConst) async {
    String textToSpeak = """
${englishMeaningConst.text}
""";

    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(textToSpeak);

    setState(() {
      isSpeaking = true;
    });
  }

  Future<void> stopSpeaking() async {
    await flutterTts.stop();

    setState(() {
      isSpeaking = false;
    });
  }

  final EnglishMeaningConst englishMeaningConst = const EnglishMeaningConst(
    text: """
- Verb: honour (Derived forms: honoured, honours, honouring)
Usage: Brit, Cdn (US: honor)
1. Bestow honour or rewards upon (- honor [US], reward, fete, fÃªte)
"Today we honour our soldiers";
 
2. Show respect towards (- respect, honor [US], abide by, observe)
"honour your parents!";
 
3. Accept as pay (- honor [US])
"we honour checks and drafts";

- Noun: honour (Derived forms: honours)
Usage: Brit, Cdn (US: honor)
1. A tangible symbol signifying approval or distinction (- award, accolade, honor [US], laurels)
 
2. The state of being honoured (- honor [US], laurels)
 
3. The quality of being honourable and having a good name (- honor [US])
"a man of honour";
 
4. A woman's virtue or chastity (- honor [US], purity, pureness)
""",
  );

  final String keyword = "honour";
  List<Map<String, dynamic>> filteredSentences = [];

  Future<void> fetchSentences() async {
    final sentences =
        await DatabaseUtils.instance.fetchFilteredSentences(keyword: keyword);
    setState(() {
      filteredSentences = sentences;
    });
  }

  void speakEnglish(String text, {String? languageCode}) async {
    await flutterTts.setLanguage(languageCode ?? "en-GB");
    await flutterTts.speak(text);
  }

  Future<void> speakheadword(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""honour""");
  }

  Future<void> speaksentence1(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""They stood in silence as a mark of honour to her.""");
  }

  Future<void> speaksentence2(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """This biography does great honour to the poet's achievements.""");
  }

  Future<void> speaksentence3(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The prime minister sought an agreement that would bring peace with honour.""");
  }

  Future<void> speaksentence4(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""It was a great honour to be invited here today.""");
  }

  Future<void> speaksentence5(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """It is a great honour to represent my country at the Olympics.""");
  }

  Future<void> speaksentence6(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""It was my honour to be Helen's friend.""");
  }

  Future<void> speaksentence7(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""Proving his innocence has become a matter of honour.""");
  }

  Future<void> speaksentence8(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""He was a man of honour who always spoke the truth.""");
  }

  Future<void> speaksentence9(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The family honour is at stake.""");
  }

  Future<void> speaksentence10(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """He was now satisfied that the family honour had been restored.""");
  }

  Future<void> speaksentence11(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""He would always fight to defend the family honour.""");
  }

  Future<void> speaksentence12(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """She brought honour to her country as an Olympic medal-winner.""");
  }

  Future<void> speaksentence13(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She is an honour to the profession.""");
  }

  Future<void> speaksentence14(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""She received nearly every honour bestowed upon a poet.""");
  }

  Future<void> speaksentence15(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He was buried with full military honours.""");
  }

  Future<void> speaksentence16(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He wears his scars like badges of honour.""");
  }

  Future<void> speaksentence17(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""I took an honors class in English.""");
  }

  Future<void> speaksentence18(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She graduated with honours in June 1970.""");
  }

  Future<void> speaksentence19(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""No more questions, Your Honour.""");
  }

  Future<void> speaksentence20(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""It was a simple ceremony to honour the Goddess of water.""");
  }

  Future<void> speaksentence21(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Actors and musicians gathered to honour the memory of the late singer.""");
  }

  Future<void> speaksentence22(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""The President honoured us with a personal visit.""");
  }

  Future<void> speaksentence23(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""She has never been properly honoured in her own country.""");
  }

  Future<void> speaksentence24(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """They were honored for their achievements over the past year.""");
  }

  Future<void> speaksentence25(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He has been honoured for his scientific work.""");
  }

  Future<void> speaksentence26(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""I have every intention of honouring our contract.""");
  }

  Future<void> speaksentence27(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""They have failed to honour the peace agreement.""");
  }

  @override
  Widget build(BuildContext context) {
    // 188888880002200
    const String videoIdend = 'wi5Q3rlQaMI';
    const double startSecondsend = 15;
    const String videoIdone = 'SKMQNgJQo9Y';
    const double startSecondsone = 167;
    const String videoIdtwo = 'OEPMBSp466k';
    const double startSecondstwo = 698;
    const String videoIdthree = 'r8O_xpgb9kE';
    const double startSecondsthree = 39;
    const String videoIdfour = 'KmL0zZg0Zyo';
    const double startSecondsfour = 3;
    const String videoIdfive = 'pa_g7IRmZmU';
    const double startSecondsfive = 426;

    return DefaultTabController(
      length: 4,
      child: Scaffold(
        body: NestedScrollView(
          headerSliverBuilder: (context, innerBoxIsScrolled) {
            return [
              CustomSliverAppBar(
                flexibleSpace: FlexibleSpaceBar(
                  background: SingleChildScrollView(
                    child: EntryPageColumn(
                      word: """honour""",
                      // alsoEnglishWord: "also: honour",
                      britshText: """IpaUK: /ËÉnÉ(r)/""",
                      americanText: """IpaUS: /ËÉËnÉr/""",
                      onPressedBritish: () => speakheadword("en-GB"),
                      onPressedAmerican: () => speakheadword("en-US"),
                    ),
                  ),
                ),
                bottom: const CustomTabBarNew(
                  tabs: [
                    UkIconForTab(),
                    KurdIconForTab(),
                    SentencesIconForTab(),
                    VideoIconForTab(),
                  ],
                ),
              ),
            ];
          },
          body: TabBarView(
            children: [
              SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    EnglishButtonTTS(
                      onBritishPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onAmericanPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onStopPressed: stopSpeaking,
                    ),
                    englishMeaningConst,
                  ],
                ),
              ),
              SingleChildScrollView(
                child: CustomColumnWidget(
                  children: [
                    const KurdishVocabulary(text: """
Ú©ÙØ±Ø¯Û: Ø´Ø§ÙØ§Ø²ÛØ ÚÛØ²Ø Ø­ÙØ±ÙÛØªØ Ø³ÛØ±Ø¨ÛØ±Ø²ÛØ ÚÙÙØ³Ù¾ÛØªÛØ ÙÛÙØ¨Ø§Ø´ÛØ Ø¦Ø§Ø¨ÚÙÙØ Ú¯ÛÙØ±ÛÛÛØ Ø¦Ø§Ø¨ÙÙØ±Ø	ÙØ§ÙÙÙØ³Ø Ø­ÛÛØ§Ø Ø´ÛÚÛÙØ ÚÙÙØ³ÙÙØ±ÛØ Ø¯Ø§ÙÛÙâÙ¾Ø§Ú©ÛØ	ÙØ§ÛÛÛ Ø´Ø§ÙØ§Ø²Û
"""),
                    const DefinitionKurdish(
                        text: """Ù¡. (ÙØ§Ù) ÚÛØ²Û Ø²ÛØ± Ø¨Û Ú©ÛØ³ÛÚ©"""),
                    SentencesRow(
                      englishText:
                          """They stood in silence as a mark of honour to her.""",
                      kurdishText:
                          """ÙÛ Ø¨ÛâØ¯ÛÙÚ¯ÛØ¯Ø§ ÙÛØ³ØªØ§Ù ÙÛÚ© Ø¦Ø§ÙØ§ÚÛÛ ÚÛØ²ÛØ§Ù Ø¨ÛÛ.""",
                      onPressedBritish: () => speaksentence1("en-GB"),
                      onPressedAmerican: () => speaksentence1("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """This biography does great honour to the poet's achievements.""",
                      kurdishText:
                          """Ø¦ÛÙ ÚÛØ§ÙÙØ§ÙÛÛÛ ÚÛØ²Û Ø²ÛØ± Ø¯ÛÚ¯Ø±ÛØª ÙÛ Ø¯ÛØ³ØªÚ©ÛÙØªÛÚ©Ø§ÙÛ ÙÛØ²Ø§ÙÚ¤Ø§ÙÛÚ©Û.""",
                      onPressedBritish: () => speaksentence2("en-GB"),
                      onPressedAmerican: () => speaksentence2("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The prime minister sought an agreement that would bring peace with honour.""",
                      kurdishText:
                          """Ø³ÛØ±ÛÚ© ÙÛØ²ÛØ±Ø§Ù Ø¨Û Ø¯ÙØ§Û ÚÛÚ©ÛÙØªÙÛÚ© Ø¨ÙÙ Ú©Û Ø¦Ø§Ø´ØªÛ ÙÛÚ¯ÛÚµ Ø´Ø§ÙØ§Ø²Û Ø¯ÛÙÛÙØ§.""",
                      onPressedBritish: () => speaksentence3("en-GB"),
                      onPressedAmerican: () => speaksentence3("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¢. (ÙØ§Ù) Ø´ØªÛÚ© Ú©Û Ø´Ø§ÙØ§Ø²Û Ø¯ÛÚ©ÛÛØª Ø¨Û Ú©Ø±Ø¯ÙÛ Ø¨ÛÙÛÛ Ø¦ÛÙÛÛ Ø®ÛÚµÚ©Û ÚÛØ²Øª Ù¾ÛØ´Ø§Ù Ø¯ÛØ¯ÛÙ"""),
                    const AlsoEnglishckb(word: "Ú¾ÛØ±ÙÛÚ¾Ø§: privilege"),
                    SentencesRow(
                      englishText:
                          """It was a great honour to be invited here today.""",
                      kurdishText:
                          """Ø´Ø§ÙØ§Ø²ÛÛÛÚ©Û Ú¯ÛÙØ±Û Ø¨ÙÙ Ø¦ÛÙÚÛ Ø¨Ø§ÙÚ¯ÙÛØ´Øª Ø¨Ú©Ø±ÛÙ.""",
                      onPressedBritish: () => speaksentence4("en-GB"),
                      onPressedAmerican: () => speaksentence4("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """It is a great honour to represent my country at the Olympics.""",
                      kurdishText:
                          """Ø´Ø§ÙØ§Ø²Û Ú¯ÛÙØ±ÛÛÛ ÙÙÛÙÛØ±Ø§ÛÛØªÛ ÙÚµØ§ØªÛÚ©ÛÙ Ø¨Ú©ÛÙ ÙÛ Ø¦ÛÚµÛÙÙ¾ÛØ§Ø¯.""",
                      onPressedBritish: () => speaksentence5("en-GB"),
                      onPressedAmerican: () => speaksentence5("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """It was my honour to be Helen's friend.""",
                      kurdishText: """Ø´Ø§ÙØ§Ø²Û Ø¨ÙÙ Ø¨ÛÙ Ú©Û ÙØ§ÙÚÛÛ ÙÛÙÛÙ Ø¨Ù.""",
                      onPressedBritish: () => speaksentence6("en-GB"),
                      onPressedAmerican: () => speaksentence6("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù£. (ÙØ§Ù) Ø²Ø§ÙÛÙ Ù Ú©Ø±Ø¯ÙÛ Ø¦ÛÙÛÛ ÙÛ ÚÙÙÛ Ø¦ÛØ®ÙØ§ÙÛÛÛÙÛ ÚØ§Ø³ØªÛ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Proving his innocence has become a matter of honour.""",
                      kurdishText:
                          """Ø³ÛÙÙØ§ÙØ¯ÙÛ Ø¨ÛâØªØ§ÙØ§ÙÛÛ Ø¨ÙÙÛ Ø¨Û Ø¨Ø§Ø¨ÛØªÛ ÚÛØ²Û.""",
                      onPressedBritish: () => speaksentence7("en-GB"),
                      onPressedAmerican: () => speaksentence7("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He was a man of honour who always spoke the truth.""",
                      kurdishText:
                          """Ù¾ÛØ§ÙÛÚ©Û Ø®Ø§ÙÛÙ ÚÛØ² Ø¨ÙÙ Ú©Û ÙÛÙÛØ´Û ÚØ§Ø³ØªÛÛ Ø¯ÛÚ¯ÙØª.""",
                      onPressedBritish: () => speaksentence8("en-GB"),
                      onPressedAmerican: () => speaksentence8("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ù¤. (ÙØ§Ù) ÙØ§ÙØ¨Ø§ÙÚ¯Û Ø¨Ø§Ø´"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """The family honour is at stake.""",
                      kurdishText: """Ø´Ú©ÛÛ Ø®ÛØ²Ø§ÙÛÚ©Û ÙÛ ÙÛØªØ±Ø³ÛÛÛ.""",
                      onPressedBritish: () => speaksentence9("en-GB"),
                      onPressedAmerican: () => speaksentence9("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He was now satisfied that the family honour had been restored.""",
                      kurdishText:
                          """Ø¦Ø§Ø³ÙÙØ¯Û Ø¨ÙÙ Ú©Û Ø´Ú©ÛÛ Ø®ÛØ²Ø§ÙÛÚ©Û Ú¯ÛÚÛÙØ¯Ø±Ø§Ø¨ÙÙÛÛÙÛ.""",
                      onPressedBritish: () => speaksentence10("en-GB"),
                      onPressedAmerican: () => speaksentence10("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He would always fight to defend the family honour.""",
                      kurdishText:
                          """ÙÛÙÛØ´Û Ø¯ÛØ¬ÛÙÚ¯ÛØª Ø¨Û Ù¾Ø§Ø±Ø§Ø³ØªÙÛ Ø´Ú©ÛÛ Ø®ÛØ²Ø§ÙÛÚ©ÛÛ.""",
                      onPressedBritish: () => speaksentence11("en-GB"),
                      onPressedAmerican: () => speaksentence11("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She brought honour to her country as an Olympic medal-winner.""",
                      kurdishText:
                          """ÙÛÚ© Ø¨Ø±Ø§ÙÛÛ ÙÛØ¯Ø§ÙÛØ§Û Ø¦ÛÚµÛÙÙ¾ÛØ§Ø¯ Ø´Ú©ÛÛ ÙÛÙØ§ Ø¨Û ÙÚµØ§ØªÛÚ©ÛÛ.""",
                      onPressedBritish: () => speaksentence12("en-GB"),
                      onPressedAmerican: () => speaksentence12("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¥. (ÙØ§Ù) Ú©ÛØ³ÛÚ© ÛØ§Ù Ø´ØªÛÚ© Ú©Û Ø¬ÛÚ¯Ø§Û Ø´Ø§ÙØ§Ø²ÛÛÛ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """She is an honour to the profession.""",
                      kurdishText: """Ø¬ÛÚ¯Ø§Û Ø´Ø§ÙØ§Ø²ÛÛÛ Ø¨Û Ú©Ø§Ø±ÛÚ©Û.""",
                      onPressedBritish: () => speaksentence13("en-GB"),
                      onPressedAmerican: () => speaksentence13("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¦. (ÙØ§Ù) Ø®ÛÚµØ§ØªØ ÙØ§Ø²ÙØ§ÙÛ ÙÛØ±ÙÛØ ÙØªØ¯ Ú©Û Ø¯ÛØ¯Ø±ÛØª Ø¨Û Ú©ÛØ³ÛÚ© ÙÛÚ© Ù¾Ø§Ø¯Ø§Ø´ØªÛ Ø´ØªÛÚ© Ú©Û Ú©Ø±Ø¯ÙÙÛÛØªÛ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She received nearly every honour bestowed upon a poet.""",
                      kurdishText:
                          """Ø¨Û ÙØ²ÛÚ©ÛÛÛ ÙÛÙÙÙ Ø´Ø§ÙØ§Ø²ÛÛÛÚ©Û ÙÛØ±Ú¯Ø±Øª Ú©Û Ø¨Û ÙÛØ²Ø§ÙÚ¤Ø§ÙÛÚ© Ø¯Ø±Ø§Ø¨ÛØª.""",
                      onPressedBritish: () => speaksentence14("en-GB"),
                      onPressedAmerican: () => speaksentence14("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He was buried with full military honours (= with a special military service as a sign of respect).""",
                      kurdishText: """Ø¨Û ÙÛÙÙÙ Ø´Ø§ÙØ§Ø²ÛÛÛÚ©Û Ø³ÛØ±Ø¨Ø§Ø²ÛÛÛÙÛ ÙÛÚØ±Ø§.""",
                      onPressedBritish: () => speaksentence15("en-GB"),
                      onPressedAmerican: () => speaksentence15("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He wears his scars like badges of honour (= rewards that you can see).""",
                      kurdishText: """Ø¨Ø±ÛÙÛÚ©Ø§ÙÛ ÙÛÚ© ÙÛØ´Ø§ÙÛÛ Ø´Ø§ÙØ§Ø²Û Ø¯ÛØ¨ÛÙÛØª.""",
                      onPressedBritish: () => speaksentence16("en-GB"),
                      onPressedAmerican: () => speaksentence16("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù§. (ÙØ§Ù) Ú©ÛØ±Ø³ÛÚ©Û Ø²Ø§ÙÚ©Û Ú©Û ÙÛ Ø¦Ø§Ø³ØªÛÚ©Û Ø¨Ø§ÚµØ§ØªØ±Û ÙÛÚ© ÙÛ ÙÛ Ø¦Ø§Ø³Ø§ÛÛ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """I took an honors class in English.""",
                      kurdishText: """Ú©ÛØ±Ø³ÛÚ©Û Ø¨Ø§ÚµØ§Ù ÙÛ Ø¦ÛÙÚ¯ÙÛØ²Û ÙÛØ±Ú¯Ø±Øª.""",
                      onPressedBritish: () => speaksentence17("en-GB"),
                      onPressedAmerican: () => speaksentence17("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¨. (ÙØ§Ù) Ø¦ÛÙÛÛ ÙÛ ØªØ§ÙÛÚ©Ø±Ø¯ÙÛÙÛÛÛÚ©Ø ÙÙØªØ§Ø¨Ø®Ø§ÙÛÛÛÚ© ÛØ§Ù Ø²Ø§ÙÚ©ÛÛÛÚ© Ø¯ÛØ±Ø¨ÚÛØª Ø¨Û ÙÙØ±ÛÛÛÚ©Û Ø¨ÛØ±Ø²ÛÙÛ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She graduated with honours in June 1970.""",
                      kurdishText:
                          """Ú©Û Ø­ÙØ²ÛÛØ±Ø§ÙÛ Ù¡Ù©Ù§Ù  Ø¨Û ÙÙØ±ÛÛ Ø¨Ø§ÚµØ§ÙÛ Ø¯ÛØ±ÚÙÙ.""",
                      onPressedBritish: () => speaksentence18("en-GB"),
                      onPressedAmerican: () => speaksentence18("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù©. (ÙØ§Ù) ÙØ§Ø²ÙØ§ÙÛÚ© Ú©Û ÙÛÚ¯ÛÚµ Ø¯Ø§ÙÛØ±ÛÚ© ÙØ³Û Ø¯ÛÚ©ÛÛØª ÛØ§Ù ÙÛÚ¯ÛÚµ Ø³ÛØ±ÛÚ© Ø´Ø§Ø±ÛÙØ§ÙÛÛÛÚ©Û Ø¦ÛÙØ±ÛÚ©Ø§"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """No more questions, Your Honour.""",
                      kurdishText: """Ù¾Ø±Ø³ÛØ§Ø±Û ØªØ± ÙÛÛÛØ Ú¯ÛÙØ±ÛÙ.""",
                      onPressedBritish: () => speaksentence19("en-GB"),
                      onPressedAmerican: () => speaksentence19("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù . (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÛØ´Ø§ÙØ¯Ø§ÙÛ ÚÛØ² Ø¨Û Ú©ÛØ³ÛÚ©"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """It was a simple ceremony to honour the Goddess of water.""",
                      kurdishText:
                          """Ø¨ÛÙÛÛÛÚ©Û Ø³Ø§Ø¯Û Ø¨ÙÙ Ø¨Û ÚÛØ²Ú¯Ø±ØªÙ ÙÛ Ø®ÙØ¯Ø§ÙÛÙØ¯Û Ø¦Ø§Ù.""",
                      onPressedBritish: () => speaksentence20("en-GB"),
                      onPressedAmerican: () => speaksentence20("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Actors and musicians gathered to honour the memory of the late singer.""",
                      kurdishText:
                          """Ø¦ÛÚ©ØªÛØ±Ø§Ù Ù ÙÛÙØ²ÛÚ©ÚÛÙØ§Ù Ú©ÛØ¨ÙÙÙÛÙÛ Ø¨Û ÚÛØ²Ú¯Ø±ØªÙ ÙÛ ÛØ§Ø¯ÛÙÛØ±Û Ú¯ÛØ±Ø§ÙÛØ¨ÛÚÛ Ú©ÛÚÚ©Ø±Ø¯ÙÙÛÚ©Û.""",
                      onPressedBritish: () => speaksentence21("en-GB"),
                      onPressedAmerican: () => speaksentence21("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The President honoured us with a personal visit.""",
                      kurdishText: """Ø³ÛØ±ÛÚ© ÚÛØ²Û ÙÛ Ú¯Ø±ØªÛÙ Ø¨Û Ø³ÛØ±Ø¯Ø§ÙÛÚ©Û Ú©ÛØ³Û.""",
                      onPressedBritish: () => speaksentence22("en-GB"),
                      onPressedAmerican: () => speaksentence22("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¡Ù¡. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÛØ¯Ø§ÙÛ Ø³ØªØ§ÛØ´Û ÙÛØ±ÙÛØ Ø®ÛÚµØ§ØªØ ÛØ§Ù ÙØ§Ø²ÙØ§ÙÛÚ© Ø¨Û Ú©ÛØ³ÛÚ© Ø¨Û Ø´ØªÛÚ© Ú©Û Ú©Ø±Ø¯ÙÙÛÛØªÛ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She has never been properly honoured in her own country.""",
                      kurdishText:
                          """ÙÛØ±Ú¯ÛØ² Ø¨Û Ú¯ÙÙØ¬Ø§ÙÛ ÚÛØ²Û ÙÛ ÙÛÙØ±Ø§ÙÛ ÙÛ ÙÚµØ§ØªÛÚ©ÛÛ.""",
                      onPressedBritish: () => speaksentence23("en-GB"),
                      onPressedAmerican: () => speaksentence23("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """They were honored for their achievements over the past year.""",
                      kurdishText:
                          """ÚÛØ²ÛØ§Ù ÙÛ ÙØ±Ø§ Ø¨Û Ø¨ÛØ¯ÛØ³ØªÙÛÙØ§ÙÛÚ©Ø§ÙÛØ§Ù ÙÛ ÛÛÚ© Ø³Ø§ÚµÛ ÚØ§Ø¨Ø±Ø¯ÙÙØ¯Ø§.""",
                      onPressedBritish: () => speaksentence24("en-GB"),
                      onPressedAmerican: () => speaksentence24("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He has been honoured for his scientific work.""",
                      kurdishText: """ÚÛØ²Û ÙÛâÙØ±Ø§ÙÛ Ø¨Û Ú©Ø§Ø±Û Ø²Ø§ÙØ³ØªÛÛÛÚ©ÛÛ.""",
                      onPressedBritish: () => speaksentence25("en-GB"),
                      onPressedAmerican: () => speaksentence25("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù¢. (Ú©Ø±Ø¯Ø§Ø±) Ú©Ø±Ø¯ÙÛ Ø¦ÛÙÛÛ Ú©Û Ø¨ÛÚµÛÙØª Ø¯Ø§ÙÛ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """I have every intention of honouring our contract.""",
                      kurdishText:
                          """ÙÛÙÙÙ ÙÛØ§Ø²ÛÚ©Û Ù¾Ø§Ø¨ÛÙØ¯Ø¨ÙÙÙ Ø¨Û ÚÛÚ©ÛÙØªÙÛÚ©ÛÙØ§ÙÙ ÙÛÛÛ.""",
                      onPressedBritish: () => speaksentence26("en-GB"),
                      onPressedAmerican: () => speaksentence26("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """They have failed to honour the peace agreement.""",
                      kurdishText:
                          """Ø´Ú©Ø³ØªÛØ§Ù ÙÛÙØ§ÙÛ ÙÛ Ù¾Ø§Ø¨ÛÙØ¯Ø¨ÙÙÙ Ø¨Û ÚÛÚ©ÛÙØªÙÛ Ø¦Ø§Ø´ØªÛÛÛÚ©Û.""",
                      onPressedBritish: () => speaksentence27("en-GB"),
                      onPressedAmerican: () => speaksentence27("en-US"),
                    ),
                  ],
                ),
              ),
              Consumer(
                builder: (context, ref, child) {
                  if (filteredSentences.isEmpty) {
                    return const NoSentencesFromDatabase();
                  } else {
                    return ListView.builder(
                      itemCount: filteredSentences.length,
                      itemBuilder: (context, index) {
                        final sentence = filteredSentences[index];
                        final showDivider = filteredSentences.length > 1 &&
                            index != filteredSentences.length - 1;
                        return CustomSentenceWidget(
                          englishText: sentence['english'].toString(),
                          frenchText: sentence['french'].toString(),
                          keyword: keyword,
                          onPressedBritish: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-GB",
                          ),
                          onPressedAmerican: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-US",
                          ),
                          showDivider: showDivider,
                        );
                      },
                    );
                  }
                },
              ),
              const YouTubeScroller(
                children: [
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdend),
                    videoId: videoIdend,
                    startSeconds: startSecondsend,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdone),
                    videoId: videoIdone,
                    startSeconds: startSecondsone,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdtwo),
                    videoId: videoIdtwo,
                    startSeconds: startSecondstwo,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdthree),
                    videoId: videoIdthree,
                    startSeconds: startSecondsthree,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdfour),
                    videoId: videoIdfour,
                    startSeconds: startSecondsfour,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdfive),
                    videoId: videoIdfive,
                    startSeconds: startSecondsfive,
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// end WORD_WEB