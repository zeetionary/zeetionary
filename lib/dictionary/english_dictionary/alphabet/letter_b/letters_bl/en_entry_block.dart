import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:zeetionary/constants.dart';
import 'package:zeetionary/constants_two.dart';

// More sentences is NOT done

// Define the word "block" and provide five simple and short example sentences for each meaning. Use  Oxford Advanced Learner's Dictionary style. Provide at least 5 meanings or more.

// replace block - /bl…ík/

enum TtsState { playing }

class EnglishEntryblock extends StatelessWidget {
// blank divider
  EnglishEntryblock({super.key});
// blank divider
  final FlutterTts flutterTts = FlutterTts();

  Future<void> speakblock(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("block"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks1(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "The houses are made of concrete blocks."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks2(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "The wall was made from massive blocks of stone."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks3(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("She lives in a modern apartment block."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks4(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("The museum is just six blocks away."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks5(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "They walked a few blocks down the street."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks6(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "She took the dog for a walk around the block."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks7(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "The three-hour class is divided into four blocks of 45 minutes each."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks8(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "Lack of training acts as a block to progress in a career."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks9(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "I suddenly had a mental block and couldn't remember his name."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks10(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("The defender made a lunging block."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks11(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "He placed his neck on the block and the executioner ended his life."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks12(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("Anne Boleyn went to the block."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks13(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "She went to the block with great courage and dignity."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks14(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "After today's heavy snow, many roads are still blocked."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks15(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "He found that the pipe was partially blocked with leaves."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks16(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "One of the guards moved to block her path."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks17(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "An ugly new building blocked the view from the window."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks18(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "The proposed merger has been blocked by the government."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks19(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "A court ruling blocked the plans to develop the area."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks20(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("His shot was blocked by the goalie."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks21(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "Police have accused mobile networks of failing to block stolen phones."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks22(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "There are many reasons to block someone online."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks23(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "A person who has been blocked won't necessarily know that you've blocked them."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks24(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblocks2424"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks25(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblocks2525"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks26(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblocks2626"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks27(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblocks2727"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks28(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblocks2828"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks29(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblocks2929"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakblocks30(String languageCode) async {
    // DOPSUM: CHANGE speakblock
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblocks3030"); // DOPSUM: CHANGE TEXT
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 14, // 2 + VIDEOS FIND: FROM_YOUTUBE_BELOW
      child: Scaffold(
        appBar: const ZeetionaryAppbar(),
        body: Padding(
          padding:
              const EdgeInsets.only(left: 14, top: 4, right: 14, bottom: 4),
          // EdgeInsets.zero,
          child: Column(
            children: [
              SingleChildScrollView(
                child: Column(
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Row(
                          children: [
                            EntryTitle(word: "block"),
                          ],
                        ),
                        Row(
                          children: [
                            const IPAofEnglish(text: "IpaUK: /bl…ík/"),
                            CustomIconButtonBritish(
                              onPressed: () => speakblock("en-GB"),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            const IPAofEnglish(text: "IpaUS: /bl…ëÀêk/"),
                            CustomIconButtonAmerican(
                              onPressed: () => speakblock("en-US"),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              const CustomTabBar(
                tabs: [
                  UkIconForTab(),
                  KurdIconForTab(),
                  VideoIconForTab(), // 01
                  VideoIconForTab(), // 02
                  VideoIconForTab(), // 03
                  VideoIconForTab(), // 04
                  VideoIconForTab(), // 05
                  VideoIconForTab(), // 06 --- 2 + VIDEOS REPLACE:length: 14
                  VideoIconForTab(), // 07 --- FIND:
                  VideoIconForTab(), // 08
                  VideoIconForTab(), // 09
                  VideoIconForTab(), // 10
                  VideoIconForTab(), // 11
                  VideoIconForTab(), // 12
                  // VideoIconForTab(), // 13
                  // VideoIconForTab(), // 14
                  // VideoIconForTab(), // 15
                  // VideoIconForTab(), // 16
                  // VideoIconForTab(), // 17
                  // VideoIconForTab(), // 18
                  // VideoIconForTab(), // 19
                  // VideoIconForTab(), // 20
                ],
              ),
              Expanded(
                child: TabBarView(
                  children: [
                    const EnglishMeaning(), // DOPSUM: ENGLISH MEANING IS BELOW
                    SingleChildScrollView(
                      // DOPSUM: KURDISH MEANING
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          const DividerDefinition(),
                          const DefinitionKurdish(text: """
⁄©Ÿàÿ±ÿØ€å: ⁄©€ÜŸÑ⁄©€ïÿå ÿ™€ïÿÆÿ™€ïÿ®€ïÿ±ÿØÿå ŸÇÿß⁄µÿ®ÿå ÿØÿß⁄ï€é⁄ò⁄Ø€ïÿå Ÿæÿßÿ±⁄Ü€ïÿå ⁄©Ÿàÿ™ÿå ŸÑ€ïÿ™ÿå ÿÆÿßŸÜŸàŸàÿ®€ïÿ±€ïÿå ⁄ï€åÿ≤€ïŸÖÿß⁄µÿå ⁄ï€éÿ≤€ïÿÆÿßŸÜŸàŸàÿ®€ïÿ±€ïÿå ⁄Ü€ïŸæ⁄©ÿå ÿØ€ïÿ≥ÿ™€ïÿå ⁄©€ÜŸÖ€ï⁄µ€ïÿå ÿ™ÿßŸÇŸÖÿå ⁄Øÿ±ŸàŸæÿå ⁄Ø€åÿ±ÿßŸà€åÿå ÿØÿßÿÆÿ±ÿßŸÜÿå ⁄Ø€åÿ±ÿßŸÜÿå ÿ®€ïÿ≥ÿ™ÿ±ÿßŸÜÿå ÿÆŸÑ€Ü⁄©€ïÿå ŸÇ⁄ïŸÇ⁄ï€ï (ÿ™€ïŸÜÿßŸÅ‚ÄåÿÆ€Üÿ±)ÿå ⁄©⁄µ€åÿ¥€ïÿå ŸÖ€Üÿ±ÿå ÿ¥€ïŸÇ⁄µÿå (⁄©⁄µÿßŸà) ŸÇÿß⁄µÿ®ÿå ⁄©€Üÿ™€ï€å ÿ®ŸÜ ŸÖŸÑ (ŸÑ€ï ŸÑ€éÿØÿßŸÜ€å ŸÖŸÑ‚ÄåÿØÿß)ÿå (ŸÖ€Üÿ™€Üÿ±) ŸÑÿßÿ¥€ïÿå Ÿæ€ï€å⁄©€ïÿ±ÿå ÿ®€ïÿØ€ïŸÜ€ïÿå ŸæŸàÿßÿ≤ÿå ÿ®€ïÿ±Ÿæ€é⁄Ü⁄©€ïÿå ⁄æ€Üÿ±€ïÿå ŸÑ€ïÿ™€ïÿØÿßÿ± (ÿ®€Ü ÿØÿßŸÜ€ïÿ®€ïÿ± Ÿæ€é⁄Ü⁄©€ï)ÿå ÿ®€ïÿ±ÿ®€ïÿ≥ÿ™ÿå ÿ™€ï⁄Ø€ïÿ±€ïÿå ⁄©€Üÿ≥Ÿæÿå ŸÖÿ±€Ü€å ⁄Ø€ïŸàÿ¨ÿå ÿ®⁄ï€é⁄©€å ÿ≤€Üÿ±ÿå ⁄©€ï⁄µ€ï⁄©€ïÿå ŸÑ€ÜÿØ€ïÿå ÿ®ŸÑŸà⁄© (Ÿà€ïÿ±ÿ≤ÿ¥) ÿ¨ŸàŸà⁄µ€ï€å€é ⁄©€ï €åÿßÿ±€åÿ≤ÿßŸÜ€ï⁄©€ï€å ÿ™ÿ± ŸÑ€ï ⁄ÜŸàŸàŸÜ€ïŸæ€éÿ¥ ⁄ïÿßÿØ€ï⁄Øÿ±€é noun ⁄Øÿ¥ÿ™€åÿå ⁄æ€ïŸÖ€ï⁄©€å

Ÿ°. (ŸÜÿßŸà) ŸÖÿßÿØ€ï€å€ï⁄©€å ⁄ï€ïŸÇ ⁄©€ï ÿ¥€éŸà€ï€å ⁄ÜŸàÿßÿ±⁄Ø€Üÿ¥€ï €åÿßŸÜ ŸÑÿß⁄©€éÿ¥€ï€å€ï Ÿà ÿ≤€Üÿ±ÿ¨ÿßÿ± ŸÑÿß⁄©ÿßŸÜ€å ÿ™€ïÿÆÿ™ŸÜ"""),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "The houses are made of concrete blocks."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿÆÿßŸÜŸàŸà€ï⁄©ÿßŸÜ ŸÑ€ï ÿ®ŸÑ€Ü⁄©€å ⁄©€ÜŸÜ⁄©ÿ±€åÿ™ ÿØÿ±ŸàŸàÿ≥ÿ™ ⁄©ÿ±ÿßÿ®ŸàŸàŸÜ."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks1("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks1("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "The wall was made from massive blocks of stone."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿØ€åŸàÿßÿ±€ï⁄©€ï ŸÑ€ï ÿ®ŸÑ€Ü⁄©€å ⁄Ø€ïŸàÿ±€ï€å ÿ®€ïÿ±ÿØ€åŸÜ ÿØÿ±ŸàŸàÿ≥ÿ™ ⁄©ÿ±ÿß."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks2("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks2("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ¢. (ŸÜÿßŸà) ÿ®€åŸÜÿß€å ÿ®€ïÿ±ÿ≤ ⁄©€ï ÿ¥Ÿà€éŸÜ€å ŸÜ€åÿ¥ÿ™€ïÿ¨€éÿ®ŸàŸàŸÜ €åÿßŸÜ ÿ¶€ÜŸÅ€åÿ≥ŸÜ "),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "She lives in a modern apartment block."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ŸÑ€ï ⁄©€ÜŸÖ€ï⁄µ⁄Ø€ï€å€ï⁄©€å ŸÜ€åÿ¥ÿ™€ïÿ¨€éÿ®ŸàŸàŸÜ€å ÿ≥€ïÿ±ÿØ€ïŸÖ€åÿßŸÜ€ï ÿØ€ï⁄ò€å."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks3("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks3("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ£. (ŸÜÿßŸà) ÿØŸàŸàÿ±€å ŸÜ€éŸàÿßŸÜ ÿØŸàŸà ⁄ï€é⁄Øÿß ⁄©€ï ⁄ï€é⁄Øÿß€å€ï⁄©€å ÿ™ÿ± ÿØ€ïÿ®⁄ïŸÜÿå €åÿßŸÜ ÿ¶€ïŸà ÿ®€ïÿ¥€ï€å ⁄©€ï ÿØ€ï⁄©€ïŸà€éÿ™€ï ŸÜ€éŸàÿßŸÜ ÿØŸàŸà ⁄ï€é⁄Øÿß⁄©€ïŸà€ï"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text: "The museum is just six blocks away."),
                              const ExampleSentenceKurdish(
                                  text: "ŸÖ€Üÿ≤€ïÿÆÿß⁄©€ï ÿ¥€ïÿ¥ ⁄Ø€ï⁄ï€ï⁄© ÿØŸàŸàÿ±€ï."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks4("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks4("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "They walked a few blocks down the street."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿ®€ï ÿØÿ±€é⁄òÿß€å€å ⁄Ü€ïŸÜÿØ ⁄ï€åÿ≤€ï ŸÖÿß⁄µ€é⁄© ÿ®€ï ÿ¥€ïŸÇÿßŸÖ€ï⁄©€ïÿØÿß Ÿæ€åÿßÿ≥€ï€åÿßŸÜ ⁄©ÿ±ÿØ."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks5("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks5("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ§. (ŸÜÿßŸà) ⁄òŸÖÿßÿ±€ï€å€ï⁄© ÿ®€åŸÜÿß ⁄©€ï ÿ¥€ïŸÇÿßŸÖ ŸÑ€ï ⁄æ€ïŸÖŸàŸà ŸÑÿß€å€ï⁄©€å€ïÿ™€å"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "She took the dog for a walk around the block."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿ≥€ï⁄Ø€ï⁄©€ï€å ÿ®ÿ±ÿØ ÿ®€Ü Ÿæ€åÿßÿ≥€ï€å€ï⁄© ÿ®€ï ÿØ€ïŸàÿ±€å ⁄Ø€ï⁄ï€ï⁄©€ï⁄©€ïÿØÿß."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks6("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks6("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ•. (ŸÜÿßŸà) ÿ®⁄ï€é⁄© ŸÑ€ï ÿ¥ÿ™€é⁄© €åÿßŸÜ ⁄ï€é⁄ò€ï€å€ï⁄© ŸÑ€ï ⁄©ÿßÿ™ ⁄©€ï Ÿæ€é⁄©€ïŸà€ï Ÿà€ï⁄© €å€ï⁄© €å€ï⁄©€ï ÿØ€ïÿ®€åŸÜÿ±€éÿ™"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "The three-hour class is divided into four blocks of 45 minutes each."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ŸàÿßŸÜ€ï ÿ≥€é ⁄©ÿßÿ™⁄òŸÖ€éÿ±€å€å€ï⁄©€ï ÿØÿßÿ®€ïÿ¥⁄©ÿ±ÿßŸà€ï ÿ®€Ü ⁄ÜŸàÿßÿ± ÿ®€ïÿ¥€å Ÿ§Ÿ• ÿÆŸàŸÑ€ï⁄©€å."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks7("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks7("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ¶. (ŸÜÿßŸà) ÿ¥ÿ™€é⁄© ⁄©€ï ŸàÿßÿØ€ï⁄©ÿßÿ™ ÿ¨ŸàŸà⁄µ€ï €åÿßŸÜ Ÿæ€éÿ¥⁄©€ïŸàÿ™ŸÜ ⁄Øÿ±ÿßŸÜ €åÿßŸÜ ÿ¶€ïÿ≥ÿ™€ïŸÖ ÿ®€éÿ™"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "Lack of training acts as a block to progress in a career."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "⁄©€ïŸÖ€å ⁄ïÿß⁄æ€éŸÜÿßŸÜ Ÿà€ï⁄© ÿ®€ïÿ±ÿ®€ïÿ≥ÿ™ ⁄©ÿßÿ±ÿØ€ï⁄©ÿßÿ™ ŸÑ€ïŸæ€éÿ¥ ÿ®€ïÿ±€ïŸàŸæ€éÿ¥⁄ÜŸàŸàŸÜ ŸÑ€ï ⁄©ÿßÿ±ÿØÿß."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks8("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks8("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "I suddenly had a mental block and couldn't remember his name."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ŸÑ€ïŸÜÿß⁄©ÿßŸà ÿ®€åÿ±ŸÖ ÿ®€ïŸÇŸà⁄ïÿØÿß ⁄ÜŸàŸà Ÿà ŸÜ€ïŸÖÿ™ŸàÿßŸÜ€å ŸÜÿßŸà€åŸÖ ÿ®€åÿ±ÿ®⁄©€ïŸà€éÿ™€ïŸà€ï."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks9("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks9("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿß. (ŸÜÿßŸà) ⁄ï€é⁄Øÿ±€å ŸÑ€ï Ÿæ€éÿ¥⁄ï€ïŸà€å €åÿßÿ±€åÿ≤ÿßŸÜ ŸÑ€ï €åÿßÿ±€å Ÿà€ïÿ±ÿ≤ÿ¥€åÿØÿß"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text: "The defender made a lunging block."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿ®€ïÿ±⁄Øÿ±€å⁄©ÿßÿ±€ï⁄©€ï ⁄ï€é⁄Øÿ±€å€å€ï⁄©€å ÿÆ€éÿ±ÿß€å ÿ¶€ïŸÜÿ¨ÿßŸÖÿØÿß."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks10("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks10("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ®. (ŸÜÿßŸà) Ÿæÿßÿ±⁄Ü€ï ÿØÿßÿ±€é⁄©€å ⁄Ø€ïŸàÿ±€ï ⁄©€ï ÿ™ÿßŸàŸÜÿ®ÿßÿ±ÿßŸÜ ŸÑ€ïÿ≥€ïÿ±€å ÿ≥€ïÿ±€åÿßŸÜ ÿØ€ïŸæ€ï⁄ï€éŸÜÿ±ÿß"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "He placed his neck on the block and the executioner ended his life."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿ≥€ïÿ±€å ÿÆÿ≥ÿ™€ï ÿ≥€ïÿ± ⁄©€Üÿ™€ï⁄©€ï Ÿà ÿ≥€ïÿ±ÿ®⁄ï€ï⁄©€ï ⁄ò€åÿßŸÜ€å ⁄©€Üÿ™ÿß€å€å Ÿæ€é⁄æ€éŸÜÿß."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks11("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks11("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text: "Anne Boleyn went to the block."),
                              const ExampleSentenceKurdish(
                                  text: "ÿ¶ÿßŸÜ ÿ®ŸÑ€åŸÜ ÿ≥€ïÿ±€å Ÿæ€ï⁄ï€éŸÜÿØÿ±ÿß."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks12("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks12("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "She went to the block with great courage and dignity."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "⁄ÜŸàŸà ÿ®€ïÿ±€ïŸà ÿ≥€ïÿ±Ÿæ€ï⁄ïÿßŸÜÿØŸÜ€å ÿ®€ï ÿ®Ÿà€éÿ±€å Ÿà ÿ¥⁄©€ÜŸÖ€ïŸÜÿØ€å€å ÿ≤€Üÿ±€ïŸà€ï."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks13("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks13("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ©. (⁄©ÿ±ÿØÿßÿ±) Ÿà€ïÿ≥ÿ™ÿßŸÜÿØŸÜ€å ÿ¥ÿ™€é⁄© ŸÑ€ï ÿ®€ïÿ±€ïŸàŸæ€éÿ¥⁄ÜŸàŸàŸÜ ÿ®€ï ÿØÿßŸÜÿßŸÜ€å ÿ¥ÿ™€é⁄©€å ÿ™ÿ± ŸÑ€ï Ÿæ€éÿ¥€å"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "After today's heavy snow, many roads are still blocked."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ŸÑ€ï ÿØŸàÿß€å ÿ®€ïŸÅÿ±ÿ®ÿßÿ±€åŸÜ€å ÿ≤€Üÿ±€å ÿ¶€ïŸÖ⁄ï€Üÿå ÿ≤€Üÿ± ⁄ï€é⁄Øÿß ⁄æ€éÿ¥ÿ™ÿß ⁄Ø€åÿ±ÿßŸàŸÜ."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks14("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks14("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "He found that the pipe was partially blocked with leaves."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿ≤ÿßŸÜ€å ⁄©€ï ÿ®€Ü⁄ï€å€å€ï⁄©€ï ÿ®€ïÿ¥€é⁄©€å ÿ®€ï ⁄Ø€ï⁄µÿß ⁄Ø€åÿ±ÿßÿ®ŸàŸà."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks15("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks15("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ°Ÿ†. (⁄©ÿ±ÿØÿßÿ±) Ÿà€ïÿ≥ÿ™ÿßŸÜÿØŸÜ€å ⁄©€ïÿ≥€é⁄© ŸÑ€ï ⁄ÜŸàŸàŸÜ€ï ÿ¥Ÿà€éŸÜ€é⁄© €åÿßŸÜ ÿ®€åŸÜ€åŸÜ€å ÿ¥ÿ™€é⁄© ÿ®€ï Ÿà€ïÿ≥ÿ™ÿßŸÜ ŸÑ€ï Ÿæ€éÿ¥€åÿßŸÜ €åÿßŸÜ ŸÑ€ï ⁄ï€é⁄Øÿß€åÿßŸÜ"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "One of the guards moved to block her path."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "€å€ï⁄©€é⁄© ŸÑ€ï Ÿæÿßÿ≥€ïŸàÿßŸÜ€ï⁄©ÿßŸÜ ⁄ï€Üÿ¥ÿ™ ÿ®€Ü ⁄Øÿ±ÿ™ŸÜ€å ⁄ï€é⁄Øÿß€å."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks16("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks16("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "An ugly new building blocked the view from the window."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿ®€åŸÜÿß€å€ï⁄©€å ÿ™ÿßÿ≤€ï€å ŸÜÿßÿ¥ÿ±€åŸÜ Ÿæ€éÿ¥€å ÿØ€åŸÖ€ïŸÜ€å ŸÑ€ï Ÿæ€ïŸÜÿ¨€ïÿ±€ï⁄©€ïŸà€ï ⁄Øÿ±ÿ™ÿ®ŸàŸà."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks17("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks17("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ°Ÿ°. (⁄©ÿ±ÿØÿßÿ±) ⁄ï€é⁄Øÿ±ÿ™ŸÜ ŸÑ€ï ⁄ïŸàŸàÿØÿßŸÜÿå ⁄Ø€ïÿ¥€ï⁄©ÿ±ÿØŸÜÿå €åÿßŸÜ ÿ®€ïÿ±€ïŸàŸæ€éÿ¥⁄ÜŸàŸàŸÜ€å ÿ¥ÿ™€é⁄©"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "The proposed merger has been blocked by the government."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "Ÿæ€éÿ¥ŸÜ€åÿßÿ±€å €å€ï⁄©⁄Øÿ±ÿ™ŸÜ€ï⁄©€ï ŸÑ€ïŸÑÿß€å€ïŸÜ ÿ≠⁄©ŸàŸÖ€ïÿ™€ïŸà€ï Ÿæ€éÿ¥⁄Ø€åÿ±€å ŸÑ€é⁄©ÿ±ÿß."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks18("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks18("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "A court ruling blocked the plans to develop the area."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿ®⁄ï€åÿßÿ±€é⁄©€å ÿØÿßÿØ⁄Øÿß ⁄ï€é⁄Øÿ±€å ŸÑ€ï ŸæŸÑÿßŸÜ€ï⁄©ÿßŸÜ ⁄©ÿ±ÿØ ÿ®€Ü ÿ¶ÿßŸà€ïÿØÿßŸÜ⁄©ÿ±ÿØŸÜ€ïŸà€ï€å ŸÜÿßŸà⁄Ü€ï⁄©€ï."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks19("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks19("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ°Ÿ¢. (⁄©ÿ±ÿØÿßÿ±) Ÿà€ïÿ≥ÿ™ÿßŸÜÿØŸÜ€å ÿ™€ÜŸæ€é⁄© €åÿßŸÜ ŸÑ€éÿØÿßŸÜ€é⁄© ŸÑ€ï €åÿßÿ±€å Ÿà€ïÿ±ÿ≤ÿ¥€åÿØÿß ÿ®€ï Ÿà€ïÿ≥ÿ™ÿßŸÜ ŸÑ€ï Ÿæ€éÿ¥€å"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text: "His shot was blocked by the goalie."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ŸÑ€éÿØÿßŸÜ€ï⁄©€ï€å ⁄Ø€ï⁄ï€éŸÜÿØÿ±ÿß€å€ïŸà€ï ŸÑ€ïŸÑÿß€å€ïŸÜ ⁄Ø€Ü⁄µŸæÿßÿ±€éÿ≤€ï⁄©€ïŸà€ï."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks20("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks20("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ°Ÿ¢. (⁄©ÿ±ÿØÿßÿ±) Ÿà€ïÿ≥ÿ™ÿßŸÜÿØŸÜ€å ŸÖŸàÿ®ÿß€åŸÑ€é⁄© ŸÑ€ï ÿ®€ï⁄©ÿßÿ±⁄æ€éŸÜÿßŸÜÿå ÿ®€Ü ŸÜŸÖŸàŸàŸÜ€ï ŸÑ€ï ÿØŸàÿß€å ÿØÿ≤ÿ±ÿßŸÜ€å"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "Police have accused mobile networks of failing to block stolen phones."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "Ÿæ€ÜŸÑ€åÿ≥ ÿ™€Ü⁄ï€ï⁄©ÿßŸÜ€å ŸÖŸàÿ®ÿß€åŸÑ€å ÿ™ÿßŸàÿßŸÜÿ®ÿßÿ±⁄©ÿ±ÿØŸàŸà€ï ÿ®€ïŸà€ï€å ÿ¥⁄©ÿ≥ÿ™€åÿßŸÜ ⁄æ€éŸÜÿßŸà€ï ŸÑ€ï ŸÑ€ï⁄©ÿßÿ±ÿÆÿ≥ÿ™ŸÜ€å ŸÖŸàÿ®ÿß€åŸÑ€å ÿØÿ≤ÿ±ÿßŸà."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks21("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks21("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ°Ÿ£. (⁄©ÿ±ÿØÿßÿ±) ⁄ï€é⁄Øÿ±€å ŸÑ€ïŸà€ï€å ⁄©€ïÿ≥€é⁄© Ÿæ€ï€åŸà€ïŸÜÿØ€åÿ™ Ÿæ€éŸà€ï ÿ®⁄©ÿßÿ™ ŸÑ€ïÿ≥€ïÿ± ÿ™€Ü⁄ï€ï ⁄©€ÜŸÖ€ï⁄µÿß€å€ïÿ™€å€å€ï⁄©ÿßŸÜ"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "There are many reasons to block someone online."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "ÿ≤€Üÿ± ⁄æ€Ü⁄©ÿßÿ± ⁄æ€ï€å€ï ÿ®€Ü ÿ®ŸÑ€Ü⁄©⁄©ÿ±ÿØŸÜ€å ⁄©€ïÿ≥€é⁄© ŸÑ€ïÿ≥€ïÿ± ÿ¶€åŸÜÿ™€ïÿ±ŸÜ€éÿ™."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks22("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks22("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "A person who has been blocked won't necessarily know that you've blocked them."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "⁄©€ïÿ≥€é⁄© ⁄©€ï ÿ®ŸÑ€Ü⁄© ⁄©ÿ±ÿßŸà€ï ŸÖ€ïÿ±ÿ¨ ŸÜ€å€å€ï ÿ®ÿ≤ÿßŸÜ€éÿ™ ⁄©€ï ÿ™€Ü ÿ®ŸÑ€Ü⁄©ÿ™ ⁄©ÿ±ÿØŸàŸà€ï."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakblocks23("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakblocks23("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    YoutubeEmbeddedone(),
                    YoutubeEmbeddedtwo(),
                    YoutubeEmbeddedthree(),
                    YoutubeEmbeddedfour(),
                    YoutubeEmbeddedfive(),
                    YoutubeEmbeddedsix(), // FIND: VideoIconForTab
                    YoutubeEmbeddedseven(),
                    YoutubeEmbeddedeight(),
                    YoutubeEmbeddednine(),
                    YoutubeEmbeddedten(),
                    YoutubeEmbeddedeleven(),
                    YoutubeEmbeddedtwelve(),
                    // YoutubeEmbeddedthirteen(),
                    // YoutubeEmbeddeddfourteen(),
                    // YoutubeEmbeddedfifteen(),
                    // YoutubeEmbeddeddsixteen(),
                    // YoutubeEmbeddeddseventeen(),
                    // YoutubeEmbeddeddeighteen(),
                    // YoutubeEmbeddeddnineteen(),
                    // YoutubeEmbeddedtwenty(),
                    // YoutubeEmbeddedmulti(),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// DOPSUM: ENGLISH MEANING

class EnglishMeaning extends StatefulWidget {
  const EnglishMeaning({super.key});

  @override
  State<EnglishMeaning> createState() => _EnglishMeaningState();
}

class _EnglishMeaningState extends State<EnglishMeaning> {
  FlutterTts flutterTts = FlutterTts();
  bool isSpeaking = false;

  Future<void> startSpeaking(
      String languageCode, EnglishMeaningConst englishMeaningConst) async {
    // Extract text from EnglishMeaningConst and store it in textToSpeak
    String textToSpeak = """
${englishMeaningConst.text}
""";

    await flutterTts.setLanguage(languageCode);
    await flutterTts.speak(textToSpeak);

    // Update the state to reflect that TTS is in progress
    setState(() {
      isSpeaking = true;
    });
  }

  // Function to stop TTS
  Future<void> stopSpeaking() async {
    await flutterTts.stop();

    // Update the state to reflect that TTS is stopped
    setState(() {
      isSpeaking = false;
    });
  }

  // Create an instance of EnglishMeaningConst with the desired text
  final EnglishMeaningConst englishMeaningConst = const EnglishMeaningConst(
    text: """
- Noun: block (derived forms: blocks)
1. A solid piece of something (usually having flat rectangular sides)
"the pyramids were built with large stone blocks"
 
2. A rectangular area in a city surrounded by streets and usually containing several buildings (= city block)
"he lives in the next block";
 
3. A three-dimensional shape with six square or rectangular sides (= cube)
 
4. A number or quantity of related things dealt with as a unit
"he reserved a large block of seats"; "he held a large block of the company's stock"
 
5. Housing in a large building that is divided into separate units
"there is a block of classrooms in the west wing"
 
6. (computing) a sector or group of sectors that function as the smallest data unit permitted
"since blocks are often defined as a single sector, the terms 'block' and 'sector' are sometimes used interchangeably"
 
7. An inability to remember or think of something you normally can do; often caused by emotional tension (= mental block)
"I knew his name perfectly well but I had a temporary block";

8. A simple machine consisting of a wheel with a groove in which a rope can run to change the direction or point of application of a force applied to the rope (= pulley, pulley-block, pulley block)
 
9. A metal casting containing the cylinders and cooling ducts of an engine (= engine block, cylinder block)
"the engine had to be replaced because the block was cracked";

10. An obstruction in a pipe or tube (= blockage, closure, occlusion, stop, stoppage)
"we had to call a plumber to clear out the block in the drainpipe";
 
11. A platform from which an auctioneer sells (= auction block)
"they put their paintings on the block";
 
12. The act of obstructing or deflecting someone's movements (= blocking)

- Verb: block (derived forms: blocks, blocking, blocked)
1. Render unsuitable for passage (= barricade, blockade, stop, block off, block up, bar)
"block the way"; "block off the streets"; "block up the streets";
 
2. Hinder or prevent the progress or accomplishment of (= obstruct, blockade, hinder, stymie, stymy [rare], embarrass)
"His brother blocked him at every turn";
 
3. Prevent from happening or developing (= stop, halt, kibosh [informal], kybosh [informal])
"Block his election";

4. Interfere with or prevent the reception of signals (= jam)
"block the signals emitted by this station";
 
5. Run on a block system
"block trains"
 
6. Interrupt the normal function of by means of anaesthesia
"block a nerve"; "block a muscle"
 
7. Shut out from view or get in the way so as to hide from sight (= obstruct)
"The thick curtain blocked the action on the stage";
 
8. Stamp or emboss a title or design on a book with a block
"block the book cover"
 
9. Obstruct (= stuff, lug, choke up)
"Her arteries are blocked";
 
10. Block passage through (= obstruct, obturate, impede, occlude, jam, close up)
"block the path";
 
11. Support, secure, or raise with a block
"block a plate for printing"; "block the wheels of a car"
 
12. Impede the movement of (an opponent or a ball) (= parry, deflect)
"block an attack";

13. Be unable to remember (= forget, blank out, draw a blank, disremember [US, informal])
"You are blocking the name of your first wife!";
 
14. Shape by using a block
"Block a hat"; "block a garment"
 
15. Shape into a block or blocks
"block the graphs so one can see the results clearly"
 
16. Prohibit the conversion or use of (assets) (= freeze, immobilize, immobilise [Brit])
"Blocked funds";
""",
  );

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const DividerDefinition(),
          // Using the EnglishButtonTTS class
          EnglishButtonTTS(
            onBritishPressed: (languageCode) =>
                startSpeaking(languageCode, englishMeaningConst),
            onAmericanPressed: (languageCode) =>
                startSpeaking(languageCode, englishMeaningConst),
            onStopPressed: stopSpeaking,
          ),
          // Speaker icon for American English
          englishMeaningConst,
        ],
      ),
    );
  }
}

// DOPSUM: FIRST YOUTUBE VIDEO

class YoutubeEmbeddedone extends StatelessWidget {
  YoutubeEmbeddedone({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: 'hFZFjoX2cGg',
    startSeconds: 104,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedtwo extends StatelessWidget {
  YoutubeEmbeddedtwo({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: 'a_TSR_v07m0',
    startSeconds: 638,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedthree extends StatelessWidget {
  YoutubeEmbeddedthree({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: '0eEkWvekQiE',
    startSeconds: 135,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedfour extends StatelessWidget {
  YoutubeEmbeddedfour({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: '-heI0TqcxFo',
    startSeconds: 4,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedfive extends StatelessWidget {
  YoutubeEmbeddedfive({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: 'Q2jZv-zaG_I',
    startSeconds: 387,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedsix extends StatelessWidget {
  YoutubeEmbeddedsix({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: 'tdAQtBAO9lo',
    startSeconds: 471,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedseven extends StatelessWidget {
  YoutubeEmbeddedseven({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: 'i_g9uIHCAZs',
    startSeconds: 13,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedeight extends StatelessWidget {
  YoutubeEmbeddedeight({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: 'TlNzKjxCIK4',
    startSeconds: 168,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddednine extends StatelessWidget {
  YoutubeEmbeddednine({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: 'DHSAjPu7M-s',
    startSeconds: 446,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedten extends StatelessWidget {
  YoutubeEmbeddedten({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: 'ZQy89tZ-mRU',
    startSeconds: 539,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedeleven extends StatelessWidget {
  YoutubeEmbeddedeleven({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: 'CleUrqPLCzU',
    startSeconds: 76,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

class YoutubeEmbeddedtwelve extends StatelessWidget {
  YoutubeEmbeddedtwelve({super.key});

  final _controller = YoutubePlayerController.fromVideoId(
    videoId: '66aG5P0kQpU',
    startSeconds: 657,
    autoPlay: true,
    params: const YoutubePlayerParams(
      showFullscreenButton: false,
      enableCaption: true,
      mute: false,
      strictRelatedVideos: true,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: YouTubeContainerDesignNew(controller: _controller),
      ),
    );
  }
}

// more than one video, only first autoplay

// end block
