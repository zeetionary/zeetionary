import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:zeetionary/constants.dart';

// More sentences is NOT done

// Define the word "black" and provide five simple and short example sentences for each meaning. Use Merriam Webster style. Provide at least 5 meanings or more.

// replace black - /bl√¶k/

enum TtsState { playing }

class EnglishEntryblack extends StatelessWidget {
// blank divider
  EnglishEntryblack({super.key});
// blank divider
  final FlutterTts flutterTts = FlutterTts();

  Future<void> speakblack(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("black");
  }

  Future<void> speakblacks1(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("She had curly black hair and blue eyes.");
  }

  Future<void> speakblacks2(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("I wanted a simple black dress, nothing fancy.");
  }

  Future<void> speakblacks3(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "The zebra is a wild African horse with black and white stripes.");
  }

  Future<void> speakblacks4(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("My head banged on a rock and everything went black.");
  }

  Future<void> speakblacks5(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("Through the black night came the sound of thunder.");
  }

  Future<void> speakblacks6(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("He's seen as a role model for young Black men.");
  }

  Future<void> speakblacks7(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("There's a large Black community living in this area.");
  }

  Future<void> speakblacks8(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("Two black coffees, please.");
  }

  Future<void> speakblacks9(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("Go and wash your hands; they're absolutely black!");
  }

  Future<void> speakblacks10(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("She's been in a really black mood all day.");
  }

  Future<void> speakblacks11(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("The future looks pretty black.");
  }

  Future<void> speakblacks12(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("Everyone at the funeral was dressed in black.");
  }

  Future<void> speakblacks13(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("She often dresses in black.");
  }

  Future<void> speakblacks14(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "The museum exhibit featured portraits of influential blacks who shaped history.");
  }

  Future<void> speakblacks15(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("The countries have blacked all imports from Russia.");
  }

  Future<void> speakblacks16(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "The artist decided to black out the background to emphasize the central figure.");
  }

  Future<void> speakblacks17(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks1717");
  }

  Future<void> speakblacks18(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks1818");
  }

  Future<void> speakblacks19(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks1919");
  }

  Future<void> speakblacks20(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2020");
  }

  Future<void> speakblacks21(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2121");
  }

  Future<void> speakblacks22(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2222");
  }

  Future<void> speakblacks23(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2323");
  }

  Future<void> speakblacks24(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2424");
  }

  Future<void> speakblacks25(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2525");
  }

  Future<void> speakblacks26(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2626");
  }

  Future<void> speakblacks27(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2727");
  }

  Future<void> speakblacks28(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2828");
  }

  Future<void> speakblacks29(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks2929");
  }

  Future<void> speakblacks30(String languageCode) async {
    // DOPSUM: CHANGE speakblack
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakblacks3030");
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 3, // 2 + VIDEOS FIND: FROM_YOUTUBE_BELOW
      child: Scaffold(
        appBar: const ZeetionaryAppbar(),
        body: Padding(
          padding:
              const EdgeInsets.only(left: 14, top: 4, right: 14, bottom: 4),
          // EdgeInsets.zero,
          child: Column(
            children: [
              SingleChildScrollView(
                child: Column(
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Row(
                          children: [
                            EntryTitle(word: "black"),
                          ],
                        ),
                        Row(
                          children: [
                            const IPAofEnglish(text: "IpaUK: /bl√¶k/"),
                            CustomIconButtonBritish(
                              onPressed: () => speakblack("en-GB"),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            const IPAofEnglish(text: "IpaUS: /bl√¶k/"),
                            CustomIconButtonAmerican(
                              onPressed: () => speakblack("en-US"),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              const CustomTabBar(
                tabs: [
                  UkIconForTab(),
                  KurdIconForTab(),
                  VideoIconForTab(), // 01
                ],
              ),
              Expanded(
                child: TabBarView(
                  children: [
                    const EnglishMeaning(), // DOPSUM: ENGLISH MEANING IS BELOW
                    SingleChildScrollView(
                      // DOPSUM: KURDISH MEANING
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          const DividerDefinition(),
                          const KurdishVocabulary(text: """
⁄©Ÿàÿ±ÿØ€å: ⁄ï€ïÿ¥ÿå ÿ™€ïŸàÿßŸà ⁄ï€ïÿ¥ÿå ⁄ï€ïÿ¥€å ⁄ï€ïÿ¥ÿå ÿ™ÿßÿ±€å⁄©ÿå ÿ¶€ïŸÜ⁄ØŸàÿ≥ÿ™€ï⁄ÜÿßŸàÿå ÿ®€é‚Äå⁄ïŸàŸàŸÜÿß⁄©€åÿå (ÿ≥€ïÿ±ÿ®€ï) ⁄ï€ïÿ¥‚ÄåŸæ€éÿ≥ÿ™€ï⁄©ÿßŸÜÿå ÿ®€é‚Äåÿ¥€åÿ± (ŸÇÿßŸà€ï Ÿà ⁄Üÿß€å€å)ÿå Ÿæ€åÿ≥ÿå ⁄Ü⁄µ⁄©ŸÜÿå ⁄Ø⁄µÿßŸàÿå ⁄Ü€ïŸæ€ï⁄µÿå ⁄ïŸÇ‚Äå⁄æ€ïÿ≥ÿ™ÿßŸàÿå ÿ™ŸàŸà⁄ï€ïÿå ⁄æ€åŸàÿßÿ®⁄ïÿå ŸÜÿß⁄æŸàŸÖ€éÿØ⁄©€ïÿ±ÿå ÿÆÿ±ÿßŸæÿå ⁄ï€ïÿ¥ÿå ÿ®€ïÿØÿå ÿØ⁄µŸæ⁄ïÿå ⁄©ÿ≤ÿå ÿÆ€ïŸÖÿ®ÿßÿ±ÿå ÿ®€ïÿ≤€åÿßŸÜÿå ÿ®€ïŸà€ï€åÿå ÿ®€ïÿ≤€ï⁄ïÿå ⁄ï€ïÿ¥€åÿå ÿ≥€åÿßŸÜÿå ŸÇŸàÿ±ŸÖÿå ⁄ï€ïŸÜ⁄Ø€å ⁄ï€ïÿ¥ÿå ⁄ï€ïÿ¥‚ÄåŸæ€éÿ≥ÿ™ÿå ⁄Ü€ïÿ±ŸÖ‚Äå⁄ï€ïÿ¥ÿå ÿ®€ïÿ±⁄Ø€å ⁄ï€ïÿ¥ÿå ÿ®€ïÿ±⁄Ø €åÿßŸÜ ÿ¨ŸÑ€å ŸÖÿßÿ™€ïŸÖ
"""),
                          const DefinitionKurdish(
                              text: "Ÿ°. (⁄æÿßŸà€ï⁄µŸÜÿßŸà) ⁄ï€ïŸÜ⁄Ø€å ⁄ï€ïÿ¥."),
                          SentencesRow(
                            englishText:
                                "She had curly black hair and blue eyes.",
                            kurdishText: "ŸÇ⁄ò€å ⁄ï€ïÿ¥€å ŸÑŸàŸàŸÑ Ÿà ⁄ÜÿßŸà€å ÿ¥€åŸÜ€å ⁄æ€ïÿ®ŸàŸà.",
                            onPressedBritish: () => speakblacks1("en-GB"),
                            onPressedAmerican: () => speakblacks1("en-US"),
                          ),
                          const DividerSentences(),
                          // const DividerDefinition(),
                          SentencesRow(
                            englishText:
                                "I wanted a simple black dress, nothing fancy.",
                            kurdishText:
                                "ÿ™€ïŸÜ⁄æÿß ÿ¨ŸÑ€é⁄©€å ⁄ï€ïÿ¥€å ÿ≥ÿßÿØ€ïŸÖ ÿØ€ïŸà€åÿ≥ÿ™ÿå ÿ¥ÿ™€é⁄©€å ÿØ⁄µÿ®€ïÿ± ŸÜÿß.",
                            onPressedBritish: () => speakblacks2("en-GB"),
                            onPressedAmerican: () => speakblacks2("en-US"),
                          ),
                          const DividerSentences(),
                          // const DividerDefinition(),
                          SentencesRow(
                            englishText:
                                "The zebra is a wild African horse with black and white stripes.",
                            kurdishText:
                                "⁄©€ïÿ±€ï⁄©€éŸà€å ÿ¶€ïÿ≥Ÿæ€é⁄©€å ⁄©€éŸà€å€å ÿ¶€ïŸÅÿ±€åŸÇ€å€å€ï ÿ®€ï ÿÆ€ïÿ™€å ⁄ï€ïÿ¥ Ÿà ÿ≥Ÿæ€å€å€ïŸà€ï.",
                            onPressedBritish: () => speakblacks3("en-GB"),
                            onPressedAmerican: () => speakblacks3("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ÿ¢. (⁄æÿßŸà€ï⁄µŸÜÿßŸà) ÿ™€ïŸàÿßŸà ÿ™ÿßÿ±€å⁄©"),
                          SentencesRow(
                            englishText:
                                "My head banged on a rock and everything went black.",
                            kurdishText:
                                "ÿ≥€ïÿ±ŸÖ ÿØÿß€å ÿ®€ï ÿ®€ïÿ±ÿØ€é⁄©ÿØÿß Ÿà ⁄æ€ïŸÖŸàŸà ÿ¥ÿ™€é⁄© ÿ™ÿßÿ±€å⁄© ÿ®ŸàŸà.",
                            onPressedBritish: () => speakblacks4("en-GB"),
                            onPressedAmerican: () => speakblacks4("en-US"),
                          ),
                          // const DividerSentences(),
                          // const DividerDefinition(),
                          const DividerSentences(),
                          SentencesRow(
                            englishText:
                                "Through the black night came the sound of thunder.",
                            kurdishText:
                                "ÿ®€ïÿØÿ±€é⁄òÿß€å€å ÿ¥€ïŸà€ï ÿ™ÿßÿ±€å⁄©€ï⁄©€ï ÿØ€ïŸÜ⁄Ø€å ⁄æ€ïŸàÿ±€ï⁄Øÿ±ŸÖ€ï ÿØ€ï⁄æÿßÿ™.",
                            onPressedBritish: () => speakblacks5("en-GB"),
                            onPressedAmerican: () => speakblacks5("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ£. (⁄æÿßŸà€ï⁄µŸÜÿßŸà) Ÿæ€ï€åŸà€ïŸÜÿØ€åÿØÿßÿ± ÿ®€ï ⁄©€ïÿ≥ÿßŸÜ€å ⁄ï€ïÿ¥Ÿæ€éÿ≥ÿ™ÿå ÿ≤€åÿßÿ™ÿ± ÿ¶€ïŸàÿßŸÜ€ï€å ÿ®€ï ⁄ï€ï⁄Ü€ï⁄µ€ï⁄© ÿ¶€ïŸÅÿ±€åŸÇ€åŸÜ"),
                          SentencesRow(
                            englishText:
                                "He's seen as a role model for young Black men.",
                            kurdishText:
                                "Ÿà€ï⁄© ŸÜŸÖŸàŸàŸÜ€ï€å€ï⁄© ÿ≥€ï€åÿ± ÿØ€ï⁄©ÿ±€éÿ™ ÿ®€Ü Ÿæ€åÿßŸàÿßŸÜ€å ⁄ï€ïÿ¥Ÿæ€éÿ≥ÿ™€å ⁄Ø€ïŸÜÿ¨.",
                            onPressedBritish: () => speakblacks6("en-GB"),
                            onPressedAmerican: () => speakblacks6("en-US"),
                          ),
                          // const DividerSentences(),
                          // const DividerDefinition(),
                          const DividerSentences(),
                          SentencesRow(
                            englishText:
                                "There's a large Black community living in this area.",
                            kurdishText:
                                "⁄©€ÜŸÖ€ï⁄µ⁄Ø€ï€å€ï⁄©€å ⁄Ø€ïŸàÿ±€ï€å ⁄©€ïÿ≥ÿßŸÜ€å ⁄ï€ïÿ¥Ÿæ€éÿ≥ÿ™ ⁄æ€ï€å€ï ŸÑ€ïŸÖ ŸÜÿßŸà⁄Ü€ï.",
                            onPressedBritish: () => speakblacks7("en-GB"),
                            onPressedAmerican: () => speakblacks7("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ÿ§. (⁄æÿßŸà€ï⁄µŸÜÿßŸà) ⁄Üÿß Ÿà ŸÇÿßŸà€ï€å ÿ®€é ÿ¥€åÿ±"),
                          SentencesRow(
                            englishText: "Two black coffees, please.",
                            kurdishText: "ÿØŸàŸà ŸÇÿßŸà€ï€å ÿ®€é ÿ¥€åÿ± ÿ®€é ÿ≤€ïÿ≠ŸÖ€ïÿ™.",
                            onPressedBritish: () => speakblacks8("en-GB"),
                            onPressedAmerican: () => speakblacks8("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ÿ•. (⁄æÿßŸà€ï⁄µŸÜÿßŸà) ÿ≤€Üÿ± Ÿæ€åÿ≥"),
                          SentencesRow(
                            englishText:
                                "Go and wash your hands; they're absolutely black!",
                            kurdishText: "ÿ®⁄Ü€Ü Ÿà ÿØ€ïÿ≥ÿ™ÿ™ ÿ®ÿ¥€Üÿ±€ïÿå ÿ™€ïŸàÿßŸà ⁄Ø€ïŸÜ€åÿßŸàŸÜ.",
                            onPressedBritish: () => speakblacks9("en-GB"),
                            onPressedAmerican: () => speakblacks9("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ÿ¶. (⁄æÿßŸà€ï⁄µŸÜÿßŸà) Ÿæ⁄ï ŸÑ€ï ⁄ïŸÇ Ÿà ÿ™ŸàŸà⁄ï€ï€å€å"),
                          SentencesRow(
                            englishText:
                                "She's been in a really black mood all day.",
                            kurdishText:
                                "ÿ™€ïŸàÿßŸà€å ⁄ï€Ü⁄ò€ï⁄©€ï ŸÑ€ï ⁄©€ïÿ¥€é⁄©€å ÿ™ŸàŸà⁄ï€ï€å€å ÿ®ŸàŸà€ï.",
                            onPressedBritish: () => speakblacks10("en-GB"),
                            onPressedAmerican: () => speakblacks10("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ÿß. (⁄æÿßŸà€ï⁄µŸÜÿßŸà) ÿ≤€Üÿ± ÿ®€éÿ≤ÿßÿ± Ÿà ŸÜÿßÿ¶ŸàŸÖ€éÿØ⁄©€ïÿ±"),
                          SentencesRow(
                            englishText: "The future looks pretty black.",
                            kurdishText: "ÿØÿß⁄æÿßÿ™ŸàŸà ÿ≤€Üÿ± ÿ®€é ⁄æ€åŸàÿßÿ®⁄ï ÿØ€åÿßÿ±€ï.",
                            onPressedBritish: () => speakblacks11("en-GB"),
                            onPressedAmerican: () => speakblacks11("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(text: "Ÿ®. (ŸÜÿßŸà) ⁄ï€ïŸÜ⁄Ø€å ⁄ï€ïÿ¥."),
                          SentencesRow(
                            englishText:
                                "Everyone at the funeral was dressed in black.",
                            kurdishText:
                                "⁄æ€ïŸÖŸàŸà ÿ¶€ïŸàÿßŸÜ€ï€å ŸÑ€ï ŸÖ€ïÿ±ÿßÿ≥€åŸÖ€å ŸÜÿßÿ¥ÿ™ŸÜ€ï⁄©€ï ÿ®ŸàŸàŸÜ ÿ¨ŸÑ€å ⁄ï€ïÿ¥€åÿßŸÜ Ÿæ€Üÿ¥€åÿ®ŸàŸà.",
                            onPressedBritish: () => speakblacks12("en-GB"),
                            onPressedAmerican: () => speakblacks12("en-US"),
                          ),
                          // const DividerSentences(),
                          // const DividerDefinition(),
                          const DividerSentences(),
                          SentencesRow(
                            englishText:
                                "She often dresses in black (= in black clothes).",
                            kurdishText: "ÿ≤€Üÿ±ÿ¨ÿßÿ± ⁄ï€ïŸÜ⁄Ø€å ⁄ï€ïÿ¥ ÿØ€ïŸæ€Üÿ¥€éÿ™.",
                            onPressedBritish: () => speakblacks13("en-GB"),
                            onPressedAmerican: () => speakblacks13("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ©. (ŸÜÿßŸà) ⁄©€ïÿ≥ÿßŸÜ€å ⁄ï€ïÿ¥Ÿæ€éÿ≥ÿ™ (ÿ®€ï⁄©ÿßÿ±⁄æ€éŸÜÿßŸÜ€å Ÿàÿ¥€ï⁄©€ï ÿ®€ïŸÖ Ÿàÿßÿ™ÿß€å€ï Ÿà€ï⁄© ŸÜÿßŸà ÿ®ÿßÿ¥ ŸÜ€å€å€ï. ÿ®ÿßÿ¥ÿ™ÿ±€ï Ÿà€ï⁄© ⁄æÿßŸà€ï⁄µŸÜÿßŸà ÿ®€ï⁄©ÿßÿ±ÿ®€éÿ™)"),
                          SentencesRow(
                            englishText:
                                "The museum exhibit featured portraits of influential blacks who shaped history.",
                            kurdishText:
                                "Ÿæ€éÿ¥ÿßŸÜ⁄Øÿß€å ŸÖ€Üÿ≤€ïÿÆÿßŸÜ€ï⁄©€ï ⁄òŸÖÿßÿ±€ï€å€ï⁄© Ÿà€éŸÜ€ï€å ⁄©€ïÿ≥ÿßŸÜ€å ⁄©ÿßÿ±€å⁄Ø€ïÿ±€å ⁄ï€ïÿ¥Ÿæ€éÿ≥ÿ™ ŸÜŸÖÿß€åÿ¥ ÿØ€ï⁄©ÿßÿ™ ⁄©€ï ⁄©ÿßÿ±€å⁄Ø€ïÿ±€å€åÿßŸÜ ŸÑ€ïÿ≥€ïÿ± ŸÖ€é⁄òŸàŸà ⁄æ€ïÿ®ŸàŸà€ï.",
                            onPressedBritish: () => speakblacks14("en-GB"),
                            onPressedAmerican: () => speakblacks14("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ÿ°Ÿ†. (⁄©ÿ±ÿØÿßÿ±) ÿ±€ïÿ™⁄©ÿ±ÿØŸÜ€ïŸà€ï€å ŸÖÿßŸÖ€ï⁄µ€ï ŸÑ€ï⁄Ø€ï⁄µ ⁄©€ïÿ≥€é⁄© Ÿà€ï⁄© ŸÜÿß⁄ï€ïÿ≤ÿß€å€å ÿ≥€åÿßÿ≥€å"),
                          SentencesRow(
                            englishText:
                                "The countries have blacked all imports from Russia.",
                            kurdishText:
                                "Ÿà⁄µÿßÿ™€ï⁄©ÿßŸÜ ⁄æ€ïŸÖŸàŸà ⁄æÿßŸàÿ±ÿØ€ï€å€ï⁄©€åÿßŸÜ ŸÑ€ï ⁄ïŸàŸàÿ≥€åÿßŸà€ï ⁄ïÿß⁄Øÿ±ÿ™ŸàŸà€ï.",
                            onPressedBritish: () => speakblacks15("en-GB"),
                            onPressedAmerican: () => speakblacks15("en-US"),
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ÿ°Ÿ°. (⁄©ÿ±ÿØÿßÿ±) ⁄ï€ïÿ¥⁄©ÿ±ÿØŸÜ€å ÿ¥ÿ™€é⁄©"),
                          SentencesRow(
                            englishText:
                                "The artist decided to black out the background to emphasize the central figure.",
                            kurdishText:
                                "⁄æŸàŸÜ€ïÿ±ŸÖ€ïŸÜÿØ€ï⁄©€ï ÿ®⁄ï€åÿßÿ±€å ÿØÿß Ÿæÿ¥ÿ™€ïŸà€ï ⁄ï€ïÿ¥ ÿ®⁄©ÿßÿ™€ïŸà€ï ÿ®€Ü ÿ¶€ïŸà€ï€å ÿ≥€ïÿ±ŸÜÿ¨ ÿ®ÿÆÿßÿ™€ï ÿ≥€ïÿ± ÿ¶€ïŸà ⁄©€ïÿ≥€ï€å ŸÑ€ï ŸÜÿßŸà€ï⁄ïÿßÿ≥ÿ™ ÿ®ŸàŸà.",
                            onPressedBritish: () => speakblacks16("en-GB"),
                            onPressedAmerican: () => speakblacks16("en-US"),
                          ),
                          // const DividerSentences(),
                          // const DividerDefinition(),
                        ],
                      ),
                    ),
                    const YouTubeScroller(
                      children: [
                        YoutubeEmbeddedone(),
                        YoutubeEmbeddedtwo(),
                        YoutubeEmbeddedthree(),
                        YoutubeEmbeddedfour(),
                        YoutubeEmbeddedfive(),
                        YoutubeEmbeddedsix(), // FIND: VideoIconForTab
                        YoutubeEmbeddedseven(),
                        YoutubeEmbeddedeight(),
                        YoutubeEmbeddednine(),
                        YoutubeEmbeddedten(),
                        YoutubeEmbeddedeleven(),
                        YoutubeEmbeddedtwelve(),
                        YoutubeEmbeddedthirteen(),
                        YoutubeEmbeddeddfourteen(),
                        YoutubeEmbeddedfifteen(),
                        YoutubeEmbeddeddsixteen(),
                        YoutubeEmbeddeddseventeen(),
                        YoutubeEmbeddeddeighteen(),
                        YoutubeEmbeddeddnineteen(),
                        YoutubeEmbeddedtwenty(),
                        // YoutubeEmbeddedmulti(),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class EnglishMeaning extends StatefulWidget {
  const EnglishMeaning({super.key});

  @override
  State<EnglishMeaning> createState() => _EnglishMeaningState();
}

class _EnglishMeaningState extends State<EnglishMeaning> {
  FlutterTts flutterTts = FlutterTts();
  bool isSpeaking = false;

  Future<void> startSpeaking(
      String languageCode, EnglishMeaningConst englishMeaningConst) async {
    String textToSpeak = """
${englishMeaningConst.text}
""";

    await flutterTts.setLanguage(languageCode);
    await flutterTts.speak(textToSpeak);

    setState(() {
      isSpeaking = true;
    });
  }

  // Function to stop TTS
  Future<void> stopSpeaking() async {
    await flutterTts.stop();

    // Update the state to reflect that TTS is stopped
    setState(() {
      isSpeaking = false;
    });
  }

  // Create an instance of EnglishMeaningConst with the desired text
  final EnglishMeaningConst englishMeaningConst = const EnglishMeaningConst(
    text: """
- Adjective: black (derived forms: blackest, blacker)
1. Being of the achromatic colour of maximum darkness; having little or no hue owing to absorption of almost all incident light
"black leather jackets"; "as black as coal"; "rich black soil"
 
2. Of or belonging to a racial group especially of sub-Saharan African origin
"a great people--a black people--...injected new meaning and dignity into the veins of civilization"
 
3. Marked by anger, resentment or hostility
"black looks"; "black words"
 
4. Offering little or no hope (= bleak, dim)
"the future looked black";
 
5. Stemming from evil characteristics or forces; wicked or dishonourable (= dark, sinister)
"black deeds"; "a black lie"; "his black heart has concocted yet another black deed";
 
6. (of events) having extremely unfortunate or dire consequences; bringing ruin (= calamitous, disastrous, fatal, fateful)
"the stock market crashed on Black Friday";

7. (of the face) made black especially as with suffused blood (= blackened)
"a face black with fury";

8. Extremely dark (= pitch-black, pitch-dark)
"a black moonless night"; "through the pitch-black woods";
 
9. Harshly ironic or sinister (= grim, mordant)
"black humour";

10. (of intelligence operations) deliberately misleading
"black propaganda"
 
11. Distributed or sold illicitly (= bootleg, black-market, contraband, smuggled)
"the black economy pays no taxes";

12. (used of conduct or character) deserving or bringing disgrace or shame (= disgraceful, ignominious, inglorious, opprobrious, shameful)
"Man...has written one of his blackest records as a destroyer on the oceanic islands";
 
13. (of coffee) without cream or sugar
 
14. Soiled with dirt or soot (= smutty)
"his shirt was black within an hour"; "with feet black from playing outdoors";

- Noun: black (derived forms: blacks)
1. The quality or state of the achromatic colour of least lightness (bearing the least resemblance to white) (= blackness, inkiness)
 
2. Total absence of light (= total darkness, lightlessness, blackness, pitch blackness)
"in the black of night";

3. (board games) the darker pieces
 
4. Black clothing (worn as a sign of mourning)
"the widow wore black"

- Verb: black (derived forms: blacked, blacks, blacking)
1. Make or become black (= blacken, melanize, melanise [Brit], nigrify [archaic])

- Noun: Black (derived forms: Blacks)
1. Popular child actress of the 1930's (1928-2014) (= Shirley Temple Black, Shirley Temple)
 
2. A person with African ancestry (= African-American, Negro, African American, Afro-American)
 
3. British chemist who identified carbon dioxide and who formulated the concepts of specific heat and latent heat (1728-1799) (= Joseph Black)
""",
  );

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const DividerDefinition(),

          EnglishButtonTTS(
            onBritishPressed: (languageCode) =>
                startSpeaking(languageCode, englishMeaningConst),
            onAmericanPressed: (languageCode) =>
                startSpeaking(languageCode, englishMeaningConst),
            onStopPressed: stopSpeaking,
          ),
          // Speaker icon for American English
          englishMeaningConst,
        ],
      ),
    );
  }
}

// DOPSUM: FIRST YOUTUBE VIDEO

class YoutubeEmbeddedone extends StatelessWidget {
  const YoutubeEmbeddedone({super.key});

  final String _videoId = 'rPe4yziWiOg';
  final double _startSeconds = 324;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedtwo extends StatelessWidget {
  const YoutubeEmbeddedtwo({super.key});

  final String _videoId = 'VrKW58MS12g';
  final double _startSeconds = 476;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedthree extends StatelessWidget {
  const YoutubeEmbeddedthree({super.key});

  final String _videoId = 'hS2x1zl4rn0';
  final double _startSeconds = 886;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedfour extends StatelessWidget {
  const YoutubeEmbeddedfour({super.key});

  final String _videoId = 'P8m-KThvtxA';
  final double _startSeconds = 186;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedfive extends StatelessWidget {
  const YoutubeEmbeddedfive({super.key});

  final String _videoId = 'PXsZntwnArQ';
  final double _startSeconds = 73;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedsix extends StatelessWidget {
  const YoutubeEmbeddedsix({super.key});

  final String _videoId = 'uN84HhcdIws';
  final double _startSeconds = 44;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedseven extends StatelessWidget {
  const YoutubeEmbeddedseven({super.key});

  final String _videoId = '0zXfDafyyao';
  final double _startSeconds = 5;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedeight extends StatelessWidget {
  const YoutubeEmbeddedeight({super.key});

  final String _videoId = 'E991yX1WiEI';
  final double _startSeconds = 388;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddednine extends StatelessWidget {
  const YoutubeEmbeddednine({super.key});

  final String _videoId = 'wB8CTs4AD6g';
  final double _startSeconds = 17;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedten extends StatelessWidget {
  const YoutubeEmbeddedten({super.key});

  final String _videoId = '9-QsT-U2d4k';
  final double _startSeconds = 194;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedeleven extends StatelessWidget {
  const YoutubeEmbeddedeleven({super.key});

  final String _videoId = 'JLkCaBwRrVo';
  final double _startSeconds = 53;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedtwelve extends StatelessWidget {
  const YoutubeEmbeddedtwelve({super.key});

  final String _videoId = 'Mde2q7GFCrw';
  final double _startSeconds = 5103;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedthirteen extends StatelessWidget {
  const YoutubeEmbeddedthirteen({super.key});

  final String _videoId = 'H9mtCLL8rI0';
  final double _startSeconds = 0;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddeddfourteen extends StatelessWidget {
  const YoutubeEmbeddeddfourteen({super.key});

  final String _videoId = 'Qa6R58-L3Ds';
  final double _startSeconds = 34;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedfifteen extends StatelessWidget {
  const YoutubeEmbeddedfifteen({super.key});

  final String _videoId = 'lawvkcCTNjA';
  final double _startSeconds = 0;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddeddsixteen extends StatelessWidget {
  const YoutubeEmbeddeddsixteen({super.key});

  final String _videoId = '-_wQv4Vq1qE';
  final double _startSeconds = 19;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddeddseventeen extends StatelessWidget {
  const YoutubeEmbeddeddseventeen({super.key});

  final String _videoId = 'nKN-VK0B-18';
  final double _startSeconds = 84;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddeddeighteen extends StatelessWidget {
  const YoutubeEmbeddeddeighteen({super.key});

  final String _videoId = 'WxB1gB6K-2A';
  final double _startSeconds = 280;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddeddnineteen extends StatelessWidget {
  const YoutubeEmbeddeddnineteen({super.key});

  final String _videoId = 'kAG39jKi0lI';
  final double _startSeconds = 33;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainer(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

class YoutubeEmbeddedtwenty extends StatelessWidget {
  const YoutubeEmbeddedtwenty({super.key});

  final String _videoId = 'we-F0Gi0Lqs';
  final double _startSeconds = 2418;

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoId,
        startSeconds: _startSeconds,
      );
    }

    return Scaffold(
      body: StatefulBuilder(
        builder: (context, setState) {
          return YouTubeVideosContainerEnd(
            controller: controller,
            onReloadVideo: reloadVideo,
          );
        },
      ),
    );
  }
}

// end black// TODO Implement this library.
