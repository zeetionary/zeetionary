import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:zeetionary/constants.dart';

enum TtsState { playing }

class EnglishEntryinfection extends StatefulWidget {
  const EnglishEntryinfection({super.key});

  @override
  State<EnglishEntryinfection> createState() => _EnglishEntryinfectionState();
}

class _EnglishEntryinfectionState extends State<EnglishEntryinfection> {
  @override
  void initState() {
    super.initState();
    flutterTts = FlutterTts();
    flutterTts.setLanguage("en-GB");
    flutterTts.setLanguage("en-US");
    fetchSentences();
  }

  FlutterTts flutterTts = FlutterTts();

  bool isSpeaking = false;

  Future<void> startSpeaking(
      String languageCode, EnglishMeaningConst englishMeaningConst) async {
    String textToSpeak = """
${englishMeaningConst.text}
""";

    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(textToSpeak);

    setState(() {
      isSpeaking = true;
    });
  }

  Future<void> stopSpeaking() async {
    await flutterTts.stop();

    setState(() {
      isSpeaking = false;
    });
  }

  final EnglishMeaningConst englishMeaningConst = const EnglishMeaningConst(
    text: """
- Noun: infection (Derived forms: infections)
1. The pathological state resulting from the invasion of the body by pathogenic microorganisms
 
2. (phonetics) the alteration of a speech sound under the influence of a neighbouring sound
 
3. (medicine) the invasion of the body by pathogenic microorganisms and their multiplication which can lead to tissue damage and disease
 
4. An incident in which an infectious disease is transmitted (- contagion, transmission)
 
5. The communication of an attitude or emotional state among a number of people (- contagion)
"the infection of his enthusiasm for poetry";
 
6. Moral corruption or contamination
"ambitious men are led astray by an infection that is almost unavoidable"
 
4. (international law) illegality that taints or contaminates a ship or cargo rendering it liable to seizure
""",
  );

  final String keyword = "infection";
  List<Map<String, dynamic>> filteredSentences = [];

  Future<void> fetchSentences() async {
    final sentences =
        await DatabaseUtils.instance.fetchFilteredSentences(keyword: keyword);
    setState(() {
      filteredSentences = sentences;
    });
  }

  void speakEnglish(String text, {String? languageCode}) async {
    await flutterTts.setLanguage(languageCode ?? "en-GB");
    await flutterTts.speak(text);
  }

  Future<void> speakheadword(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""infection""");
  }

  Future<void> speaksentence1(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""The drugs slow down the progression of HIV infection.""");
  }

  Future<void> speaksentence2(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Bacterial infection of the wound may occur.""");
  }

  Future<void> speaksentence3(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""Birds are susceptible to infection by the virus.""");
  }

  Future<void> speaksentence4(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Antibodies found in breast milk protect newborn babies against infection.""");
  }

  Future<void> speaksentence5(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The risk of infection is appreciably higher among children.""");
  }

  Future<void> speaksentence6(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The surgeon used aseptic techniques to prevent infection during the operation.""");
  }

  Future<void> speaksentence7(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""My sore throat came from a bacterial infection.""");
  }

  Future<void> speaksentence8(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Under normal circumstances, your white blood cells are able to fight infections.""");
  }

  Future<void> speaksentence9(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The infection is highly contagious, so don't let anyone else use your towel.""");
  }

  Future<void> speaksentence10(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""Clean the cut and cover it to prevent infection.""");
  }

  Future<void> speaksentence11(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""Changes in vaginal discharge can indicate an infection.""");
  }

  Future<void> speaksentence12(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""All donated blood is tested for HIV and other infections.""");
  }

  Future<void> speaksentence13(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Children and the elderly are those most at risk from the infection.""");
  }

  Future<void> speaksentence14(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Heterosexuals account for nearly half of all new HIV infections.""");
  }

  Future<void> speaksentence15(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Dressings are changed four hourly to help prevent infection.""");
  }

  Future<void> speaksentence16(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Immunization gives people the ability to resist infection temporarily or permanently.""");
  }

  Future<void> speaksentence17(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The source of infection may be a person who is incubating an infectious disease.""");
  }

  Future<void> speaksentence18(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """In smallpox, there is an incubation period of 8â€“18 days between initial infection and first symptoms.""");
  }

  Future<void> speaksentence19(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Sneezing is the most common way of spreading an infection.""");
  }

  @override
  Widget build(BuildContext context) {
    // 188888880002200000000000
    const String videoIdend = 'iQ5GfDbjos8';
    const double startSecondsend = 372;
    const String videoIdone = 'xjmXzYdxuTQ';
    const double startSecondsone = 1232;
    const String videoIdtwo = 'Pon4Zux5MaQ';
    const double startSecondstwo = 877;
    const String videoIdthree = 'ZvTxFsJMUPM';
    const double startSecondsthree = 326;
    const String videoIdfour = 'bp6kmcno9SI';
    const double startSecondsfour = 207;
    const String videoIdfive = '8wewPn7TZfs';
    const double startSecondsfive = 157;

    return DefaultTabController(
      length: 4,
      child: Scaffold(
        body: NestedScrollView(
          headerSliverBuilder: (context, innerBoxIsScrolled) {
            return [
              CustomSliverAppBar(
                flexibleSpace: FlexibleSpaceBar(
                  background: SingleChildScrollView(
                    child: EntryPageColumn(
                      word: """infection""",
                      // alsoEnglishWord: "also: infection",
                      britshText: """IpaUK: /ÉªnËˆfekÊƒn/""",
                      americanText: """IpaUS: /ÉªnËˆfekÊƒn/""",
                      onPressedBritish: () => speakheadword("en-GB"),
                      onPressedAmerican: () => speakheadword("en-US"),
                    ),
                  ),
                ),
                bottom: const CustomTabBarNew(
                  tabs: [
                    UkIconForTab(),
                    KurdIconForTab(),
                    SentencesIconForTab(),
                    VideoIconForTab(),
                  ],
                ),
              ),
            ];
          },
          body: TabBarView(
            children: [
              SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    EnglishButtonTTS(
                      onBritishPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onAmericanPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onStopPressed: stopSpeaking,
                    ),
                    englishMeaningConst,
                  ],
                ),
              ),
              SingleChildScrollView(
                child: CustomColumnWidget(
                  children: [
                    const KurdishVocabulary(text: """
Ú©ÙˆØ±Ø¯ÛŒ: ØªÙˆÙˆØ´â€ŒØ¨ÙˆÙˆÙ†ØŒ Ú¯Ø±ØªÙ†ØŒ ØªÛ•Ù†ÛŒÙ†Û•ÙˆÛ•ØŒ Ú¯Ø±ØªÙ†Û•ÙˆÛ•ØŒ Ú¯ÙˆØ§Ø³ØªÙ†Û•ÙˆÛ•ØŒ Ø¯ÙˆÚ†Ø§Ø±Ø¨ÙˆÙˆÙ†ØŒ	Ú†ÚµÚ©â€ŒÚ©Ø±Ø¯Ù†ØŒ Ù‡Û•ÙˆÚ©Ø±Ø¯Ù†ØŒ Ø¦Ø§ÙˆÛ•Ø¯Ø²Ú©Ø±Ø¯Ù†ØŒ Ù†Û•Ø®Û†Ø´ÛŒ Ú†ÚµÚ©ØŒ	Ù¾ÛŒØ³ÛŒØŒ ØªÛŽÙˆÛ•Ø¯Ø±Ø§ÙˆÛŒØŒ Ù¾ÛŒØ³â€ŒÚ©Ø±Ø¯Ù†ØŒ ØªÛŽÙˆÛ•Ø¯Ø§Ù†ØŒ	Ú©Ø§Ø±ÛŒÚ¯Û•Ø±ÛŒØŒ Ø´ÙˆÛŽÙ†â€ŒØ¯Ø§Ù†Ø§Ù†ØŒ Ú©Ø§Ø±ØªÛŽâ€ŒÚ©Ø±Ø¯Ù†ØŒ Ø¨Ø§Ù†Ø¯Û†Ø±
"""),
// With short examples define "infection", please follow LX instructions
                    const DefinitionKurdish(
                        text: """Ù¡. (Ù†Ø§Ùˆ) ØªÙˆÙˆØ´Ú©Ø±Ø¯Ù† ÛŒØ§Ù† ØªÙˆÙˆØ´Ø¨ÙˆÙˆÙ† Ø¨Û• Ù†Û•Ø®Û†Ø´ÛŒ"""),
                    SentencesRow(
                      englishText:
                          """The drugs slow down the progression of HIV infection.""",
                      kurdishText:
                          """Ø¯Û•Ø±Ù…Ø§Ù†Û•Ú©Ø§Ù† Ø¨Û•Ø±Û•ÙˆÙ¾ÛŽØ´Ú†ÙˆÙˆÙ†ÛŒ Ø¦ÛŽÚ†â€ŒØ¦Ø§ÛŒâ€ŒÚ¤ÛŒ Ù‡ÛŽÙˆØ§Ø´ Ø¯Û•Ú©Û•Ù†Û•ÙˆÛ•.""",
                      onPressedBritish: () => speaksentence1("en-GB"),
                      onPressedAmerican: () => speaksentence1("en-US"),
                    ),
                    Column(
                      children: [
                        MyExpansionTile(
                          children: [
                            SentencesRow(
                              englishText:
                                  """Bacterial infection of the wound may occur.""",
                              kurdishText:
                                  """ØªÙˆÙˆØ´Ø¨ÙˆÙˆÙ†ÛŒ Ø¨Û•Ú©ØªØ±ÛŒØ§ÛŒÛŒ Ø¨Ø±ÛŒÙ†Û•Ú©Û• Ú•Û•Ù†Ú¯Û• Ú•ÙˆÙˆØ¨Ø¯Ø§Øª.""",
                              onPressedBritish: () => speaksentence2("en-GB"),
                              onPressedAmerican: () => speaksentence2("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Birds are susceptible to infection by the virus.""",
                              kurdishText:
                                  """Ø¨Ø§ÚµÙ†Ø¯Û• Ø¯Û•Ú©Ø±ÛŽØª ØªÙˆÙˆØ´ÛŒ Ú¤Ø§ÛŒØ±Û†Ø³Û•Ú©Û• Ø¨Ø¨Ù†.""",
                              onPressedBritish: () => speaksentence3("en-GB"),
                              onPressedAmerican: () => speaksentence3("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Antibodies found in breast milk protect newborn babies against infection.""",
                              kurdishText:
                                  "Ø¦Û•Ùˆ Ø¯Ú˜Û•ØªÛ•Ù†Ø§Ù†Û•ÛŒ Ù„Û• Ø´ÛŒØ±ÛŒ Ø³Ø±ÙˆÙˆØ´ØªÛŒØ¯Ø§Ù† Ù…Ù†Ø¯Ø§ÚµÛŒ Ø³Ø§ÙˆØ§ Ø¯Û•Ù¾Ø§Ø±ÛŽØ²Ù† Ù„Û• Ù†Û•Ø®Û†Ø´ÛŒ.",
                              onPressedBritish: () => speaksentence4("en-GB"),
                              onPressedAmerican: () => speaksentence4("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """The risk of infection is appreciably higher among children.""",
                              kurdishText:
                                  "Ù…Û•ØªØ±Ø³ÛŒ ØªÙˆÙˆØ´Ø¨ÙˆÙˆÙ† Ø¨Û• Ø´ÛŽÙˆÛ•ÛŒÛ•Ú©ÛŒ Ø¨Û•Ø±Ú†Ø§Ùˆ Ø²ÛŒØ§ØªØ±Û• Ù„Û•Ù†Ø§Ùˆ Ù…Ù†Ø¯Ø§ÚµØ§Ù†Ø¯Ø§.",
                              onPressedBritish: () => speaksentence5("en-GB"),
                              onPressedAmerican: () => speaksentence5("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """The surgeon used aseptic techniques to prevent infection during the operation.""",
                              kurdishText:
                                  "Ù†Û•Ø´ØªÛ•Ø±Ú¯Û•Ø±Û•Ú©Û• ØªÛ•Ú©Ù†ÛŒÚ©ÛŒ Ø®Ø§ÙˆÛŽÙ† Ù„Û• Ø¨Û•Ú©ØªØ±ÛŒØ§ÛŒ Ø¨Û•Ú©Ø§Ø±Ú¾ÛŽÙ†Ø§ Ø¨Û† Ú•ÛŽÚ¯Ø±ÛŒ Ù„Û• Ø¨ÚµØ§ÙˆØ¨ÙˆÙˆÙ†Û•ÙˆÛ•ÛŒ Ù†Û•Ø®Û†Ø´ÛŒ.",
                              onPressedBritish: () => speaksentence6("en-GB"),
                              onPressedAmerican: () => speaksentence6("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Under normal circumstances, your white blood cells are able to fight infections.""",
                              kurdishText:
                                  "Ù„Û• Ø¯Û†Ø®ÛŒ Ø¦Ø§Ø³Ø§ÛŒÛŒØ¯Ø§ØŒ Ø®Ú•Û†Ú©Û• Ø³Ù¾ÛŒÛŒÛ•Ú©Ø§Ù†ÛŒ Ø®ÙˆÛŽÙ†Øª ØªÙˆØ§Ù†Ø§ÛŒØ§Ù† Ú¾Û•ÛŒÛ• Ú•ÙˆÙˆØ¨Û•Ú•ÙˆÙˆÛŒ ØªÙˆÙˆØ´Ø¨ÙˆÙˆÙ† Ø¨Ø¨Ù†Û•ÙˆÛ•.",
                              onPressedBritish: () => speaksentence8("en-GB"),
                              onPressedAmerican: () => speaksentence8("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Clean the cut and cover it to prevent infection.""",
                              kurdishText:
                                  "Ø¨Ø±ÛŒÙ†Û•Ú©Û• Ù¾Ø§Ú© Ø¨Ú©Û•ÙˆÛ• Ø¨Û† Ø¦Û•ÙˆÛ•ÛŒ Ù„Û• Ú¾Û•ÙˆÚ©Ø±Ø¯Ù† Ø¨ÛŒÙ¾Ø§Ø±ÛŽØ²ÛŒ.",
                              onPressedBritish: () => speaksentence10("en-GB"),
                              onPressedAmerican: () => speaksentence10("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Changes in vaginal discharge can indicate an infection.""",
                              kurdishText:
                                  "Ú¯Û†Ú•Ø§Ù† Ù„Û• Ø¯Û•Ø±Ø¯Ø±Ø§ÙˆÛŒ Ø²ÛŽ Ø¯Û•Ú©Ø±ÛŽØª Ø¦Ø§Ù…Ø§Ú˜Û• Ø¨Û• ØªÙˆÙˆØ´Ø¨ÙˆÙˆÙ† Ø¨ÛŽØª.",
                              onPressedBritish: () => speaksentence11("en-GB"),
                              onPressedAmerican: () => speaksentence11("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Heterosexuals account for nearly half of all new HIV infections.""",
                              kurdishText:
                                  """Ø¬ÛŒØ§Ú•Û•Ú¯Û•Ø²Ø®ÙˆØ§Ø²Ø§Ù† Ù¾ÛŽÚ©Ú¾ÛŽÙ†Û•Ø±ÛŒ Ù†Ø²ÛŒÚ©Û•ÛŒ Ù†ÛŒÙˆÛ•ÛŒ Ú¾Û•Ù…ÙˆÙˆ ØªÙˆÙˆØ´Ø¨ÙˆÙˆÙ†Û•Ú©Ø§Ù† Ø¨Û• Ø¦ÛŽÚ†â€ŒØ¦Ø§ÛŒâ€ŒÚ¤ÛŒÙ†.""",
                              onPressedBritish: () => speaksentence14("en-GB"),
                              onPressedAmerican: () => speaksentence14("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Dressings are changed four hourly (= every four hours) to help prevent infection.""",
                              kurdishText:
                                  """Ø¬Ù„Û•Ú©Ø§Ù† Ø¨Û•Ù¾ÛŽÛŒ Ú©Ø§ØªÚ˜Ù…ÛŽØ± Ø¯Û•Ú¯Û†Ú•Ø¯Ø±ÛŽÙ† Ø¨Û† Ú•ÛŽÚ¯Ø±ÛŒ Ù„Û• ØªÙˆÙˆØ´Ø¨ÙˆÙˆÙ†.""",
                              onPressedBritish: () => speaksentence15("en-GB"),
                              onPressedAmerican: () => speaksentence15("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Immunization gives people the ability to resist infection temporarily or permanently.""",
                              kurdishText:
                                  """Ú©ÙˆØªØ§Ù† ØªÙˆØ§Ù†Ø§ Ø¯Û•Ø¯Ø§Øª Ø¨Û• Ù…Ø±Û†Ú¤ Ø¯Ú˜ Ø¨Û• Ù†Û•Ø®Û†Ø´ÛŒÛŒÛ•Ú© Ø¨Û• Ú©Ø§ØªÛŒ ÛŒØ§Ù† Ù‡Û•Ù…ÛŒØ´Û•ÛŒÛŒ.""",
                              onPressedBritish: () => speaksentence16("en-GB"),
                              onPressedAmerican: () => speaksentence16("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """The source of infection may be a person who is incubating an infectious disease.""",
                              kurdishText:
                                  """Ø³Û•Ø±Ú†Ø§ÙˆÛ•ÛŒ ØªÙˆÙˆØ´Ú©Ø±Ø¯Ù† Ú•Û•Ù†Ú¯Û• Ú©Û•Ø³ÛŽÚ© Ø¨ÛŽØª Ú©Û• Ù†Û•Ø®Û†Ø´ÛŒÛŒÛ•Ú©ÛŒ Ú¯ÙˆØ§Ø²Û•Ø±Û•ÙˆÛ•ÛŒ Ù‡Û•Ø¨ÛŽØª.""",
                              onPressedBritish: () => speaksentence17("en-GB"),
                              onPressedAmerican: () => speaksentence17("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """In smallpox, there is an incubation period of 8â€“18 days between initial infection and first symptoms.""",
                              kurdishText:
                                  """Ù„Û• Ù†Û•Ø®Û†Ø´ÛŒ Ø¦Ø§ÙˆÚµÛ•Ø¯Ø§ØŒ Ù…Ø§ÙˆÛ•ÛŒ Ø¨ÛŽâ€ŒÙ†ÛŒØ´Ø§Ù†Û•ÛŒÛŒ Ù¨-Ù¡Ù¨ Ú•Û†Ú˜ Ù‡Û•ÛŒÛ• Ù„Û• Ù†ÛŽÙˆØ§Ù† Ùˆ Ú¯Ø±ØªÙ†ÛŒ Ø³Û•Ø±Û•ØªØ§ Ùˆ ÛŒÛ•Ú©Û•Ù… Ù†ÛŒØ´Ø§Ù†Û•Ú©Ø§Ù†.""",
                              onPressedBritish: () => speaksentence18("en-GB"),
                              onPressedAmerican: () => speaksentence18("en-US"),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¢. (Ù†Ø§Ùˆ) Ù†Û•Ø®Û†Ø´ÛŒÛŒÛ•Ú© Ú©Û• Ø¨Û•Ù‡Û†ÛŒ Ø¨Û•Ú©ØªØ±ÛŒØ§ ÛŒØ§Ù† Ú¤Ø§ÛŒØ±Û†Ø³ Ø¯Ø±ÙˆÙˆØ³Øª Ø¯Û•Ø¨ÛŽØª Ùˆ ØªÙˆÙˆØ´ÛŒ ÛŒÛ•Ú© Ø¨Û•Ø´ÛŒ Ø¬Û•Ø³ØªÛ• Ø¯Û•Ø¨ÛŽØª"""),
                    SentencesRow(
                      englishText:
                          """Sneezing is the most common way of spreading an infection.""",
                      kurdishText:
                          """Ù¾Ú˜Ù…ÛŒÙ† ÛŒÛ•Ú©ÛŽÚ©Û• Ù„Û• Ú•ÛŽÚ¯Ø§ Ø¨Ø§ÙˆÛ•Ú©Ø§Ù†ÛŒ Ú¯ÙˆØ§Ø³ØªÙ†Û•ÙˆÛ•ÛŒ Ù†Û•Ø®Û†Ø´ÛŒ.""",
                      onPressedBritish: () => speaksentence19("en-GB"),
                      onPressedAmerican: () => speaksentence19("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """My sore throat came from a bacterial infection.""",
                      kurdishText:
                          "Ú¾Û•ÚµØ¦Ø§ÙˆØ³Ø§Ù†ÛŒ Ù‚ÙˆÚ•Ú¯Ù… Ø¨Û•Ú¾Û†ÛŒ Ù†Û•Ø®Û†Ø´ÛŒ Ø¨Û•Ú©ØªØ±ÛŒØ§ÙˆÛ• Ø¨ÙˆÙˆ.",
                      onPressedBritish: () => speaksentence7("en-GB"),
                      onPressedAmerican: () => speaksentence7("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The infection is highly contagious, so don't let anyone else use your towel.""",
                      kurdishText:
                          "Ù¾Û•ØªØ§Ú©Û• ØªÛ•ÙˆØ§Ùˆ Ú•Ø§Ú¯ÙˆÛŽØ²Û•Ø±Û•ØŒ Ø¨Û†ÛŒÛ• Ù…Û•Ú¾ÛŽÚµÛ• Ú¾ÛŒÚ† Ú©Û•Ø³ Ø®Ø§ÙˆÙ„ÛŒÛŒÛ•Ú©Û•Øª Ø¨Û•Ú©Ø§Ø±Ø¨Ú¾ÛŽÙ†ÛŽØª.",
                      onPressedBritish: () => speaksentence9("en-GB"),
                      onPressedAmerican: () => speaksentence9("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """All donated blood is tested for HIV and other infections.""",
                      kurdishText:
                          "Ú¾Û•Ù…ÙˆÙˆ Ø®ÙˆÛŽÙ†ÛŽÚ©ÛŒ Ø¨Û•Ø®Ø´Ø±Ø§Ùˆ Ø¨Û† Ø¦ÛŽÚ†â€ŒØ¦Ø§ÛŒâ€ŒÚ¤ÛŒ Ùˆ Ù†Û•Ø®Û†Ø´ÛŒÛŒÛ•Ú©Ø§Ù†ÛŒ Ø¯ÛŒÚ©Û• Ø¯Û•Ù¾Ø´Ú©Ù†Ø¯Ø±ÛŽØª.",
                      onPressedBritish: () => speaksentence12("en-GB"),
                      onPressedAmerican: () => speaksentence12("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Children and the elderly are those most at risk from the infection.""",
                      kurdishText:
                          """Ù…Ù†Ø¯Ø§ÚµØ§Ù† Ùˆ Ø¨Û•Ø³Ø§ÚµØ§Ú†ÙˆÙˆØ§Ù† Ø²Û†Ø±ØªØ±ÛŒÙ† Ù„Û• Ù…Û•ØªØ±Ø³ÛŒØ¯Ø§Ù† Ø¨Û•Ø±Ø§Ù…Ø¨Û•Ø± Ù†Û•Ø®Û†Ø´ÛŒÛŒÛ•Ú©Û•.""",
                      onPressedBritish: () => speaksentence13("en-GB"),
                      onPressedAmerican: () => speaksentence13("en-US"),
                    ),
                  ],
                ),
              ),
              Consumer(
                builder: (context, ref, child) {
                  if (filteredSentences.isEmpty) {
                    return const NoSentencesFromDatabase();
                  } else {
                    return ListView.builder(
                      itemCount: filteredSentences.length,
                      itemBuilder: (context, index) {
                        final sentence = filteredSentences[index];
                        final showDivider = filteredSentences.length > 1 &&
                            index != filteredSentences.length - 1;
                        return CustomSentenceWidget(
                          englishText: sentence['english'].toString(),
                          frenchText: sentence['french'].toString(),
                          keyword: keyword,
                          onPressedBritish: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-GB",
                          ),
                          onPressedAmerican: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-US",
                          ),
                          showDivider: showDivider,
                        );
                      },
                    );
                  }
                },
              ),
              const YouTubeScroller(
                children: [
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdend),
                    videoId: videoIdend,
                    startSeconds: startSecondsend,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdone),
                    videoId: videoIdone,
                    startSeconds: startSecondsone,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdtwo),
                    videoId: videoIdtwo,
                    startSeconds: startSecondstwo,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdthree),
                    videoId: videoIdthree,
                    startSeconds: startSecondsthree,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdfour),
                    videoId: videoIdfour,
                    startSeconds: startSecondsfour,
                  ),
                  YoutubeEmbeddingWidget(
                    key: ValueKey(videoIdfive),
                    videoId: videoIdfive,
                    startSeconds: startSecondsfive,
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// end WORD_WEB