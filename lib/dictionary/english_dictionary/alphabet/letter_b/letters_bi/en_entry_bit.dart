import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:zeetionary/constants.dart';
import 'package:youtube_player_flutter/youtube_player_flutter.dart';

// More sentences is NOT done

// Define the word "bit" and provide five simple and short example sentences for each meaning. Use Merriam Webster style. Provide at least 5 meanings or more.

// replace bit - replace EnglishEntrybit

// replace speakBit - /bÉªt/

enum TtsState { playing }

class EnglishEntrybit extends StatelessWidget {
// blank divider
  EnglishEntrybit({super.key});
// blank divider
  final FlutterTts flutterTts = FlutterTts();

  Future<void> speakBit(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("bit"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits1(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("These trousers are a bit tight."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits2(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "It costs a bit more than I wanted to spend."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits3(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("Can you move up a bit?"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits4(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("See you in a bit."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits5(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "Here are some useful bits of information."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits6(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("I have a bit of good news for you."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits7(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "I read it, but I missed out the boring bits."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits8(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "Listen to the interview again and pick out the bits you want to use in the article."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits9(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("It rained a fair bit during the night."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits10(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("I bought a 32-bit computer last week."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits11(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "The rider controlled the horse's movement with the bit."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits12(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("The drill bit tore through the wall."); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits13(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits1313"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits14(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits1414"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits15(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits1515"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits16(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits1616"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits17(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits1717"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits18(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits1818"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits19(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits1919"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits20(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2020"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits21(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2121"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits22(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2222"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits23(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2323"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits24(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2424"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits25(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2525"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits26(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2626"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits27(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2727"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits28(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2828"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits29(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits2929"); // DOPSUM: CHANGE TEXT
  }

  Future<void> speakBits30(String languageCode) async {
    // DOPSUM: CHANGE speakBit
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakBits3030"); // DOPSUM: CHANGE TEXT
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 22, // 2 + VIDEOS FIND: FROM_YOUTUBE_BELOW
      child: Scaffold(
        appBar: const ZeetionaryAppbar(),
        body: Padding(
          padding:
              const EdgeInsets.only(left: 14, top: 4, right: 14, bottom: 4),
          // EdgeInsets.zero,
          child: Column(
            children: [
              SingleChildScrollView(
                child: Column(
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Row(
                          children: [
                            EntryTitle(word: "bit"),
                          ],
                        ),
                        Row(
                          children: [
                            const IPAofEnglish(text: "IpaUK: /bÉªt/"),
                            CustomIconButtonBritish(
                              onPressed: () => speakBit("en-GB"),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            const IPAofEnglish(text: "IpaUS: /bÉªt/"),
                            CustomIconButtonAmerican(
                              onPressed: () => speakBit("en-US"),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              const CustomTabBar(
                tabs: [
                  UkIconForTab(),
                  KurdIconForTab(),
                  VideoIconForTab(), // 01
                  VideoIconForTab(), // 02
                  VideoIconForTab(), // 03
                  VideoIconForTab(), // 04
                  VideoIconForTab(), // 05
                  VideoIconForTab(), // 06 --- 2 + VIDEOS REPLACE:length: 22
                  VideoIconForTab(), // 07 --- FIND:
                  VideoIconForTab(), // 08
                  VideoIconForTab(), // 09
                  VideoIconForTab(), // 10
                  VideoIconForTab(), // 11
                  VideoIconForTab(), // 12
                  VideoIconForTab(), // 13
                  VideoIconForTab(), // 14
                  VideoIconForTab(), // 15
                  VideoIconForTab(), // 16
                  VideoIconForTab(), // 17
                  VideoIconForTab(), // 18
                  VideoIconForTab(), // 19
                  VideoIconForTab(), // 20
                ],
              ),
              Expanded(
                child: TabBarView(
                  children: [
                    const EnglishMeaning(), // DOPSUM: ENGLISH MEANING IS BELOW
                    SingleChildScrollView(
                      // DOPSUM: KURDISH MEANING
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          const DividerDefinition(),
                          const DefinitionKurdish(text: """
Ú©ÙØ±Ø¯Û: Ù¾ÛÙÚÚ©Ø Ú©ÙØªØ ÙÛØªØ Ù¾Ø§Ø±ÚÛØ ÙÛØ®ØªÛØ ØªÛØ²ÙØ§ÚµÛØ Ú©ÛÙÛØ Ù¾Ø´Ú©ÛØ Ø¨ÚÛØ ÙØ§ÙÛÛÛØ Ø¨ÚÛÚ©Û Ø²ÛØ±Ø ÙÛØ¯ÛØ Ú©ÛÙØ§Ø Ø¨ÛØ´Ø Ù¾Ø´Ú©Ø Ø³Ú©ÛØ Ú©ÛÛÙØ ØªØ§ Ø¦ÛÙØ¯Ø§Ø²ÛÛÛØ ØªØ§ ÚØ§Ø¯ÛÛÛØ ÙÛØºØ§ÙØ Ø¦Ø§ÙØ®ÛØ±ÛØ ÙØºØ§Ú¤ (Ø¦ÛØ³Ù¾)Ø Ø³ÛØ±ÙÛØªÛØ Ø³ÛØ±ÛÙÛØªÛØ Ø³ÛØ±ÛØ³ÙÛØ Ø³ÙÛØ ØªÛØºÛØ Ø¯ÛÙ (ÚÛÙØ¯Û ÛØ§Ù Ø³ÙÛ)

Ù¡. (ÙØ§Ù) Ú¾ÛÙØ¯ÛÚ©Ø Ú©ÛÙÛÚ©"""),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text: "These trousers are a bit tight."),
                              const ExampleSentenceKurdish(
                                  text: "Ø¦ÛÙ Ù¾Ø§ÙØªÛÚµÛ Ú©ÛÙÛÚ© ØªÛØ³Ú©Û."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits1("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits1("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          // const DividerDefinition(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "It costs a bit more than I wanted to spend."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "Ú©ÛÙÛÚ© Ø²ÛØ§ØªØ± ÙÛÙÛÛ ØªÛØ¯ÛÚÛØª Ú©Û Ø¯ÛÙÙÛØ³Øª Ø®ÛØ±Ø¬Û Ø¨Ú©ÛÙ."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits2("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits2("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ù¢. (ÙØ§Ù) ÙØ§ÙÛÛÛÚ© ÛØ§Ù ÙÛÙØ¯Ø§ÛÛÚ©Û Ú©ÛÙ"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text: "Can you move up a bit?"),
                              const ExampleSentenceKurdish(
                                  text: "Ø¯ÛØªÙØ§ÙÛØª Ú©ÛÙÛÚ© Ø¨ÚÛØªÛ Ø³ÛØ±ÛÙÛØ"),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits3("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits3("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          // const DividerDefinition(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text: "See you in a bit."),
                              const ExampleSentenceKurdish(
                                  text: "Ú©ÛÙÛÚ©Û ØªØ± Ø¯ÛÚ¯ÛÙÛ ÙØ§Øª."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits4("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits4("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ù£. (ÙØ§Ù) ÚÛÚÛÛÛÚ©Û Ú©ÛÙ ÙÛ Ø´ØªÛÚ©"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "Here are some useful bits of information."),
                              const ExampleSentenceKurdish(
                                  text: "Ø¦ÛÙÛ Ú©ÛÙÛÚ© Ø²Ø§ÙÛØ§Ø±Û Ø³ÙÙØ¯Ø¨ÛØ®Ø´Û."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits5("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits5("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          // const DividerDefinition(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text: "I have a bit of good news for you."),
                              const ExampleSentenceKurdish(
                                  text: "Ú¾ÛÙØ¯ÛÚ© Ú¾ÛÙØ§ÚµÛ Ø®ÛØ´Ù Ù¾ÛÛÛ Ø¨ÛØª."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits6("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits6("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ù¤. (ÙØ§Ù) Ø¨ÛØ´ÛÚ© ÙÛ Ø´ØªÛÚ©Û Ú¯ÛÙØ±ÛØªØ±"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "I read it, but I missed out the boring bits."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "Ø®ÙÛÙØ¯ÙÛÙÛØ Ø¨ÛÚµØ§Ù Ø¨ÛØ´Û Ø¨ÛØ²Ø§Ø±Ú©ÛØ±ÛÚ©Ø§ÙÛÙ ØªÛÙ¾ÛÚØ§ÙØ¯."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits7("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits7("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          // const DividerSentences(),
                          // const DividerDefinition(),
                          const DividerSentences(),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "Listen to the interview again and pick out the bits you want to use in the article."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "Ø¯ÙÙØ¨Ø§Ø±Û Ú¯ÙÛ ÙÛ ÚØ§ÙÙ¾ÛÚ©ÛÙØªÙÛÚ©Û Ø¨Ú¯Ø±Û Ù Ø¦ÛÙ Ø¨ÛØ´Ø§ÙÛ Ú¾ÛÚµØ¨ÚÛØ±Û Ú©Û ÙÛ ÙØªØ§Ø±ÛÚ©ÛØª Ø¨ÛÚ©Ø§Ø±ÛØ¯ÛÙÛØª."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits8("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits8("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ù¥. (ÙØ§Ù) ÚÛÚÛÛÛÚ©Û Ú¯ÛÙØ±Û"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "It rained a fair bit during the night."),
                              const ExampleSentenceKurdish(
                                  text: "ØªØ§ÚØ§Ø¯ÛÛÛÚ© Ø²ÛØ± Ø¨Ø§Ø±Ø§Ù Ø¨Ø§Ø±Û ÙÛ Ø´ÛÙØ¯Ø§."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits9("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits9("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ù¦. (ÙØ§Ù) Ø¨ÚÙÙÚ©ØªØ±ÛÙ ÛÛÚ©ÛÛ Ø²Ø§ÙÛØ§Ø±Û ÙÛ Ú©ÛÙÙ¾ÛÙØªÛØ±Ø¯Ø§"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "I bought a 32-bit computer last week."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "Ú¾ÛÙØªÛÛ ÚØ§Ø¨Ø±Ø¯ÙÙ Ú©ÛÙÙ¾ÛÙØªÛØ±ÛÚ©Û Ù£Ù¢ Ø¨ÛØªÛÙ Ú©ÚÛ."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits10("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits10("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ù§. (ÙØ§Ù) Ù¾Ø§Ø±ÚÛ Ø¦Ø§Ø³ÙÛÚ© Ú©Û ÙÛ Ø¯ÛÙÛ Ø¦ÛØ³Ù¾ÛÚ© Ø¯ÛØ®Ø±ÛØª Ø¨Û Ø¦ÛÙÛÛ Ú©ÛÙØªØ±ÛÚµ Ø¨Ú©Ø±ÛØª"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text:
                                      "The rider controlled the horse's movement with the bit."),
                              const ExampleSentenceKurdish(
                                  text:
                                      "Ø³ÙØ§Ø±ÛÚ©Û Ú©ÛÙØªØ±ÛÚµÛ Ø¬ÙÚµÛÛ Ø¦ÛØ³Ù¾ÛÚ©ÛÛ Ø¯ÛÚ©Ø±Ø¯ Ø¨Û ÙÛØºØ§ÙÛÚ©Û."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits11("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits11("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          // const DividerSentences(),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ù¨. (ÙØ§Ù) Ø¦Ø§ÙØ±Ø§Ø²ÛÚ© ÛØ§Ù Ø¨ÛØ´ÛÚ©Û Ø¦Ø§ÙØ±Ø²Ø§ÛÚ© Ú©Û Ø¨Û Ú©ÙÙÚ©Ø±Ø¯Ù Ø¨ÛÚ©Ø§Ø±Ø¯ÛØª"),
                          Row(
                            children: [
                              const ExampleSentenceEnglish(
                                  text: "The drill bit tore through the wall."),
                              const ExampleSentenceKurdish(
                                  text: "Ø¯ÛÙÛ Ø¯ÙÛØ±ÛÚ©Û ÚÙÙ Ø¨Û Ø¯ÛÙØ§Ø±ÛÚ©ÛØ¯Ø§."),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakBits12("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakBits12("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          // const DividerSentences(),
                          // const DividerDefinition(),
                        ],
                      ),
                    ),
                    YoutubeEmbeddedone(),
                    YoutubeEmbeddedtwo(),
                    YoutubeEmbeddedthree(),
                    YoutubeEmbeddedfour(),
                    YoutubeEmbeddedfive(),
                    YoutubeEmbeddedsix(), // FIND: VideoIconForTab
                    YoutubeEmbeddedseven(),
                    YoutubeEmbeddedeight(),
                    YoutubeEmbeddednine(),
                    YoutubeEmbeddedten(),
                    YoutubeEmbeddedeleven(),
                    YoutubeEmbeddedtwelve(),
                    YoutubeEmbeddedthirteen(),
                    YoutubeEmbeddeddfourteen(),
                    YoutubeEmbeddedfifteen(),
                    YoutubeEmbeddeddsixteen(),
                    YoutubeEmbeddeddseventeen(),
                    YoutubeEmbeddeddeighteen(),
                    YoutubeEmbeddeddnineteen(),
                    YoutubeEmbeddedtwenty(),
                    // YoutubeEmbeddedmulti(),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// DOPSUM: ENGLISH MEANING

class EnglishMeaning extends StatelessWidget {
  const EnglishMeaning({
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return const SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          DividerDefinition(),
          EnglishMeaningConst(
            text: """
- Noun: bit (derived forms: bits)
1. A small piece or quantity of something (= spot [informal])
"a bit of paper"; "I gave him a bit of my mind";

2. A small fragment of something broken off from the whole (= chip, flake, fleck, scrap)
"a bit of rock caught him in the eye";
 
3. An indefinitely short time (= moment, mo, minute, second)
"in just a bit";
 
4. An instance of some kind (= piece)
"he had a bit of good luck";
 
5. Piece of metal held in horse's mouth by reins and used to control the horse while riding
"the horse was not accustomed to a bit"
 
6. A unit of measurement of information (from binary + digit); the amount of information in a system having two equiprobable states
"there are 8 bits in a byte"
 
7. A small amount of solid food; a mouthful (= morsel, bite)
"all they had left was a bit of bread";
 
8. A small fragment of sound (music or speech) (= snatch)
"overheard bits of their conversation";
 
9. A short performance that is part of a longer program (= act, routine, number, turn)
"he did his bit three times every evening";

10. The part of a key that enters a lock and lifts the tumblers
 
11. The cutting part of a drill; usually pointed and threaded and is replaceable in a brace, bitstock or drill press
"he looked around for the right size bit"

- Verb: bite (derived forms: bits)
1. To grip, cut off, or tear with or as if with the teeth or jaws (= seize with teeth)
"Gunny invariably tried to bite her";

2. Cause a sharp or stinging pain or discomfort (= sting, burn)
"The sun bit his face";

3. Penetrate or cut, as with a knife
"The fork bit into the surface"
 
4. Deliver a sting to (= sting, prick)
"A bee bit my arm yesterday";
""",
          )
        ],
      ),
    );
  }
}

// DOPSUM: FIRST YOUTUBE VIDEO

class YoutubeEmbeddedone extends StatelessWidget {
  YoutubeEmbeddedone({super.key});

  static String myVideoId = "hFZFjoX2cGg";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 304, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedtwo extends StatelessWidget {
  YoutubeEmbeddedtwo({super.key});

  static String myVideoId = "a_TSR_v07m0";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 64, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedthree extends StatelessWidget {
  YoutubeEmbeddedthree({super.key});

  static String myVideoId = "VrKW58MS12g";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 1202, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedfour extends StatelessWidget {
  YoutubeEmbeddedfour({super.key});

  static String myVideoId = "kNw8V_Fkw28";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 85, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedfive extends StatelessWidget {
  YoutubeEmbeddedfive({super.key});

  static String myVideoId = "DPZzrlFCD_I";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 533, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedsix extends StatelessWidget {
  YoutubeEmbeddedsix({super.key});

  static String myVideoId = "hS2x1zl4rn0";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 561, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedseven extends StatelessWidget {
  YoutubeEmbeddedseven({super.key});

  static String myVideoId = "_spuxXnul0U";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 969, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedeight extends StatelessWidget {
  YoutubeEmbeddedeight({super.key});

  static String myVideoId = "R_fZjGm2OrM";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 230, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddednine extends StatelessWidget {
  YoutubeEmbeddednine({super.key});

  static String myVideoId = "OXW_1i1pA0w";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      // startAt: 222222222222222, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedten extends StatelessWidget {
  YoutubeEmbeddedten({super.key});

  static String myVideoId = "FQ5hSInV9mg";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 12, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedeleven extends StatelessWidget {
  YoutubeEmbeddedeleven({super.key});

  static String myVideoId = "HOYpAgWPTps";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 1241, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedtwelve extends StatelessWidget {
  YoutubeEmbeddedtwelve({super.key});

  static String myVideoId = "6kVpRNlc-8w";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 319, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedthirteen extends StatelessWidget {
  YoutubeEmbeddedthirteen({super.key});

  static String myVideoId = "kh1Hz1HIJDE";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 153, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddeddfourteen extends StatelessWidget {
  YoutubeEmbeddeddfourteen({super.key});

  static String myVideoId = "2IKZIWVHXvo";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 77, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedfifteen extends StatelessWidget {
  YoutubeEmbeddedfifteen({super.key});

  static String myVideoId = "woN8pnA5_wk";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 97, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddeddsixteen extends StatelessWidget {
  YoutubeEmbeddeddsixteen({super.key});

  static String myVideoId = "mU8RDfWJQ-A";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 116, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddeddseventeen extends StatelessWidget {
  YoutubeEmbeddeddseventeen({super.key});

  static String myVideoId = "WxB1gB6K-2A";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 190, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddeddeighteen extends StatelessWidget {
  YoutubeEmbeddeddeighteen({super.key});

  static String myVideoId = "66aG5P0kQpU";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 667, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddeddnineteen extends StatelessWidget {
  YoutubeEmbeddeddnineteen({super.key});

  static String myVideoId = "veTo6eWJQrM";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 512, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

class YoutubeEmbeddedtwenty extends StatelessWidget {
  YoutubeEmbeddedtwenty({super.key});

  static String myVideoId = "3H3uRAXGcEc";

  final YoutubePlayerController _controller = YoutubePlayerController(
    initialVideoId: myVideoId,
    flags: const YoutubePlayerFlags(
      startAt: 494, // DOPSUM: CHANGE IT
      // endAt: 253, // DOPSUM: CHANGE IT
      autoPlay: true,
      enableCaption: true,
      loop: true,
      mute: false,
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeContainerDesign(controller: _controller),
    );
  }
}

// more than one video, only first autoplay

// end bit// TODO Implement this library.
