import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:zeetionary/constants.dart';

enum TtsState { playing }

class EnglishEntrygap extends StatefulWidget {
  const EnglishEntrygap({super.key});

  @override
  State<EnglishEntrygap> createState() => _EnglishEntrygapState();
}

class _EnglishEntrygapState extends State<EnglishEntrygap> {
  @override
  void initState() {
    super.initState();
    flutterTts = FlutterTts();
    flutterTts.setLanguage("en-GB");
    flutterTts.setLanguage("en-US");
    fetchSentences();
  }

  FlutterTts flutterTts = FlutterTts();

  bool isSpeaking = false;

  Future<void> startSpeaking(
      String languageCode, EnglishMeaningConst englishMeaningConst) async {
    String textToSpeak = """
${englishMeaningConst.text}
""";

    await flutterTts.setLanguage(languageCode);
    await flutterTts.speak(textToSpeak);

    setState(() {
      isSpeaking = true;
    });
  }

  Future<void> stopSpeaking() async {
    await flutterTts.stop();

    setState(() {
      isSpeaking = false;
    });
  }

  final EnglishMeaningConst englishMeaningConst = const EnglishMeaningConst(
    text: """
- Noun: gap (Derived forms: gaps)
1. A conspicuous disparity or difference as between two figures (- spread)
"gap between income and outgo";
 
2. An open or empty space in or between things (- opening)
"the explosion made a gap in the wall";
 
3. A narrow space between things; a narrow opening (- crack)
 
4. A pass between mountain peaks; geomorphological term for the lowest point on a mountain ridge between two peaks (- col)
 
5. A difference (especially an unfortunate difference) between two opinions or two views or two situations
 
6. An act of delaying or interrupting the continuity (- break, interruption, disruption)
"there was a gap in his account";

- Verb: gap (Derived forms: gapping, gapped, gaps)
1. Make an opening or gap in (- breach)
""",
  );

  final String keyword = "gap";
  List<Map<String, dynamic>> filteredSentences = [];

  Future<void> fetchSentences() async {
    final sentences =
        await DatabaseUtils.instance.fetchFilteredSentences(keyword: keyword);
    setState(() {
      filteredSentences = sentences;
    });
  }

  void speakEnglish(String text, {String? languageCode}) async {
    await flutterTts.setLanguage(languageCode ?? "en-GB");
    await flutterTts.speak(text);
  }

  Future<void> speakheadword(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""gap""");
  }

  Future<void> speaksentence1(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""Extra funding is needed to plug the gap.""");
  }

  Future<void> speaksentence2(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""Fill the gaps in these sentences.""");
  }

  Future<void> speaksentence3(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""There are huge gaps in their knowledge.""");
  }

  Future<void> speaksentence4(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""His death left an enormous gap in my life.""");
  }

  Future<void> speaksentence5(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("""We think we've identified a gap in the market.""");
  }

  Future<void> speaksentence6(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""There should be a six-inch gap at the bottom.""");
  }

  Future<void> speaksentence7(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""Leave a gap between your car and the next.""");
  }

  Future<void> speaksentence8(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""I managed to squeeze through the gap.""");
  }

  Future<void> speaksentence9(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        """Position the tiles, leaving a narrow gap between the edges.""");
  }

  Future<void> speaksentence10(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        """He wrote his first novel in the gap between school and university.""");
  }

  Future<void> speaksentence11(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""They met again after a gap of twenty years.""");
  }

  Future<void> speaksentence12(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""Thereâ€™s a big age gap between them.""");
  }

  Future<void> speaksentence13(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("""She returned to teaching after a twelve-year gap.""");
  }

  Future<void> speaksentence14(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        """A huge gap has opened up between expectations and what is deliverable.""");
  }

  Future<void> speaksentence15(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("""The only way to close this gap is to innovate.""");
  }

  Future<void> speaksentence16(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        """The crisis was largely due to a wide gap between supply and demand.""");
  }

  Future<void> speaksentence17(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence1700""");
  }

  Future<void> speaksentence18(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence1800""");
  }

  Future<void> speaksentence19(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence1900""");
  }

  Future<void> speaksentence20(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence_2000""");
  }

  Future<void> speaksentence21(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence2100""");
  }

  Future<void> speaksentence22(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence2200""");
  }

  Future<void> speaksentence23(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence2300""");
  }

  Future<void> speaksentence24(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence2400""");
  }

  Future<void> speaksentence25(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence2500""");
  }

  Future<void> speaksentence26(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence2600""");
  }

  Future<void> speaksentence27(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence2700""");
  }

  Future<void> speaksentence28(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence2800""");
  }

  Future<void> speaksentence29(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence2900""");
  }

  Future<void> speaksentence30(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence_3000""");
  }

  Future<void> speaksentence31(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence3100""");
  }

  Future<void> speaksentence32(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence3200""");
  }

  Future<void> speaksentence33(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence3300""");
  }

  Future<void> speaksentence34(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence3400""");
  }

  Future<void> speaksentence35(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence3500""");
  }

  Future<void> speaksentence36(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence3600""");
  }

  Future<void> speaksentence37(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence3700""");
  }

  Future<void> speaksentence38(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence3800""");
  }

  Future<void> speaksentence39(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence3900""");
  }

  Future<void> speaksentence40(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence_4000""");
  }

  Future<void> speaksentence41(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence4100""");
  }

  Future<void> speaksentence42(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence4200""");
  }

  Future<void> speaksentence43(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence4300""");
  }

  Future<void> speaksentence44(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence4400""");
  }

  Future<void> speaksentence45(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence4500""");
  }

  Future<void> speaksentence46(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence4600""");
  }

  Future<void> speaksentence47(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence4700""");
  }

  Future<void> speaksentence48(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence4800""");
  }

  Future<void> speaksentence49(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence4900""");
  }

  Future<void> speaksentence50(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence_5000""");
  }

  Future<void> speaksentence51(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence5100""");
  }

  Future<void> speaksentence52(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence5200""");
  }

  Future<void> speaksentence53(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence5300""");
  }

  Future<void> speaksentence54(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence5400""");
  }

  Future<void> speaksentence55(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence5500""");
  }

  Future<void> speaksentence56(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence5600""");
  }

  Future<void> speaksentence57(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence5700""");
  }

  Future<void> speaksentence58(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence5800""");
  }

  Future<void> speaksentence59(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence5900""");
  }

  Future<void> speaksentence60(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence_6000""");
  }

  Future<void> speaksentence61(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence6100""");
  }

  Future<void> speaksentence62(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence6200""");
  }

  Future<void> speaksentence63(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence6300""");
  }

  Future<void> speaksentence64(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence6400""");
  }

  Future<void> speaksentence65(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence6500""");
  }

  Future<void> speaksentence66(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence6600""");
  }

  Future<void> speaksentence67(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence6700""");
  }

  Future<void> speaksentence68(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence6800""");
  }

  Future<void> speaksentence69(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence6900""");
  }

  Future<void> speaksentence70(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence_7000""");
  }

  Future<void> speaksentence71(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence7100""");
  }

  Future<void> speaksentence72(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence7200""");
  }

  Future<void> speaksentence73(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence7300""");
  }

  Future<void> speaksentence74(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence7400""");
  }

  Future<void> speaksentence75(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence7500""");
  }

  Future<void> speaksentence76(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence7600""");
  }

  Future<void> speaksentence77(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence7700""");
  }

  Future<void> speaksentence78(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence7800""");
  }

  Future<void> speaksentence79(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence7900""");
  }

  Future<void> speaksentence80(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence_8000""");
  }

  Future<void> speaksentence81(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence8100""");
  }

  Future<void> speaksentence82(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence8200""");
  }

  Future<void> speaksentence83(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence8300""");
  }

  Future<void> speaksentence84(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence8400""");
  }

  Future<void> speaksentence85(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence8500""");
  }

  Future<void> speaksentence86(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence8600""");
  }

  Future<void> speaksentence87(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence8700""");
  }

  Future<void> speaksentence88(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence8800""");
  }

  Future<void> speaksentence89(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence8900""");
  }

  Future<void> speaksentence90(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("""speaksentence_9000""");
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 4,
      child: Scaffold(
        appBar: const ZeetionaryAppbar(),
        body: NestedScrollView(
          headerSliverBuilder: (context, innerBoxIsScrolled) {
            return [
              SliverAppBar(
                pinned: true,
                floating: true,
                expandedHeight: 220.0,
                flexibleSpace: FlexibleSpaceBar(
                  background: SingleChildScrollView(
                    child: EntryPageColumn(
                      word: """gap""",
                      // alsoEnglishWord: "also: gap",
                      britshText: """IpaUK: /É¡Ã¦p/""",
                      americanText: """IpaUS: /É¡Ã¦p/""",
                      onPressedBritish: () => speakheadword("en-GB"),
                      onPressedAmerican: () => speakheadword("en-US"),
                    ),
                  ),
                ),
                automaticallyImplyLeading: false,
                bottom: const TabBar(
                  tabs: [
                    UkIconForTab(),
                    KurdIconForTab(),
                    SentencesIconForTab(),
                    VideoIconForTab(),
                  ],
                ),
              ),
            ];
          },
          body: TabBarView(
            children: [
              SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const DividerDefinition(),
                    EnglishButtonTTS(
                      onBritishPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onAmericanPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onStopPressed: stopSpeaking,
                    ),
                    englishMeaningConst,
                  ],
                ),
              ),
              SingleChildScrollView(
                child: CustomColumnWidget(
                  children: [
                    const DividerDefinition(),
                    const KurdishVocabulary(text: """
Ú©ÙˆØ±Ø¯ÛŒ: Ú©Û•Ù„ÛŽÙ†ØŒ Ú©Û•Ù„Û•Ø¨Û•Ø±ØŒ Ú©Û•Ù„ØŒ Ú©Û•Ù„Ø§ÛŒÛŒØŒ Ú©Û•Ù„Ø§Ø´ØŒ Ø´Û•Ø¨Û•Ù‚ØŒ Ù‚Û•ÚµÛ•Ø´ØŒ Ø¯Û•Ù„Ø§Ù‚Û•ØŒ Ú•Û•Ø®Ù†Û•ØŒ Ú©ÙˆÙ†ØŒ Ø¨Ø§Ø®Û†Ø±ØŒ Ø¨Ø§Ø¨ÙˆÛŽØ±ØŒ Ø¬ÛŒØ§ÙˆØ§Ø²ÛŒØŒ Ø¬ÛŒØ§ÛŒÛŒØŒ Ø¬ÛŒØ§Ø¨ÙˆÙˆÙ†Û•ÙˆÛ•ØŒ Ù¾Ø³Ø§Ù†ØŒ Ø¯Ø§Ø¨Ú•Ø§Ù†ØŒ Ù¾Ú†Ú•Ø§Ù†ØŒ	Ù…Û•ÙˆØ¯Ø§ØŒ Ø¯ÙˆÙˆØ±ÛŒØŒ	(Ø®ÙˆØ§Ø²Û•) Ø¨Û†Ø´Ø§ÛŒÛŒØŒ Ú¤Ø§Ù„Ø§Ù‡ÛŒ
"""),

// With short examples define "gap", please follow LX instructions
                    const DefinitionKurdish(
                        text:
                            """Ù¡. (Ù†Ø§Ùˆ) Ø¨Û†Ø´Ø§ÛŒÛŒÛ•Ú© Ú©Û• Ø¯Û•Ø¨ÛŽØª Ø´ØªÛŽÚ©ÛŒ ØªÛŽØ¯Ø§ Ø¨ÛŽØª Ø¨Û•ÚµØ§Ù… ØªÛŽÛŒØ¯Ø§ Ù†ÛŒÛŒÛ•"""),
                    SentencesRow(
                      englishText:
                          """Extra funding is needed to plug the gap.""",
                      kurdishText:
                          """Ù¾Ø§Ø±Û•ÛŒ Ø²ÛŒØ§ØªØ± Ù¾ÛŽÙˆÛŒØ³ØªÛ• Ø¨Û† Ù¾Ú•Ú©Ø±Ø¯Ù†Û•ÙˆÛ•ÛŒ Ú©Û•Ù„ÛŽÙ†Û•Ú©Û•.""",
                      englishNote:
                          """This means additional financial resources are required to cover or address the shortfall or deficit.""",
                      onPressedBritish: () => speaksentence1("en-GB"),
                      onPressedAmerican: () => speaksentence1("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """Fill the gaps in these sentences.""",
                      kurdishText: """Ù„Û•Ù… Ú•Ø³ØªØ§Ù†Û•Ø¯Ø§ Ø¨Û†Ø´Ø§ÛŒÛŒÛ•Ú©Ø§Ù† Ù¾Ú•Ø¨Ú©Û•Ø±Û•ÙˆÛ•.""",
                      onPressedBritish: () => speaksentence2("en-GB"),
                      onPressedAmerican: () => speaksentence2("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """There are huge gaps in their knowledge.""",
                      kurdishText: """Ú©Û•Ù„ÛŽÙ†ÛŒ Ø²Û†Ø± Ù‡Û•ÛŒÛ• Ù„Û• Ø²Ø§Ù†ÛŒØ§Ø±ÛŒÛŒØ§Ù†Ø¯Ø§.""",
                      onPressedBritish: () => speaksentence3("en-GB"),
                      onPressedAmerican: () => speaksentence3("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """His death left an enormous gap in my life.""",
                      kurdishText: """Ù…Û•Ø±Ú¯ÛŒ Ú©Û•Ù„ÛŽÙ†ÛŽÚ©ÛŒ Ú¯Û•ÙˆØ±Û•ÛŒ Ù„Û• Ú˜ÛŒØ§Ù†Ù… Ø¬ÛŽÙ‡ÛŽØ´Øª.""",
                      onPressedBritish: () => speaksentence4("en-GB"),
                      onPressedAmerican: () => speaksentence4("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """We think we've identified a gap in the market (= a business opportunity to make or sell something that is not yet available).""",
                      kurdishText:
                          """Ù¾ÛŽÙ…Ø§Ù† ÙˆØ§ÛŒÛ• Ú©Û•Ù„ÛŽÙ†ÛŽÚ©Ù…Ø§Ù† Ù„Û• Ø¨Ø§Ø²Ø§Ú•Ø¯Ø§ Ø¯Û†Ø²ÛŒÙˆÛ•ØªÛ•ÙˆÛ•.""",
                      onPressedBritish: () => speaksentence5("en-GB"),
                      onPressedAmerican: () => speaksentence5("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¢. (Ù†Ø§Ùˆ) Ø¨Û†Ø´Ø§ÛŒÛŒ Ù†ÛŽÙˆØ§Ù† Ø¯ÙˆÙˆ Ø´Øª ÛŒØ§Ù† Ù†Ø§ÙˆÛ•Ú•Ø§Ø³ØªÛŒ Ø´ØªÛŽÚ©ØŒ Ø¨Û• ØªØ§ÛŒØ¨Û•ØªÛŒ Ø¨Û•Ù‡Û†ÛŒ Ø¦Û•ÙˆÛ•ÛŒ Ø¨Û•Ø´ÛŽÚ© ÙˆÙ†Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """There should be a six-inch gap at the bottom.""",
                      kurdishText: """Ø¯Û•Ø¨ÛŽØª Ø¨Û†Ø´Ø§ÛŒÛŒ Ø´Û•Ø´ Ø¦ÛŒÙ†Ú† Ù„Û• Ú˜ÛŽØ±Û•ÙˆÛ• Ù‡Û•Ø¨ÛŽØª.""",
                      onPressedBritish: () => speaksentence6("en-GB"),
                      onPressedAmerican: () => speaksentence6("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Leave a gap between your car and the next.""",
                      kurdishText:
                          """Ø¨Û†Ø´Ø§ÛŒÛŒÛ•Ú© Ù„Û• Ù†ÛŽÙˆØ§Ù† Ø¦Û†ØªÛ†Ù…Ø¨ÛŽÙ„Û•Ú©Û•Øª Ùˆ Ø¦Û•ÙˆÛ•ÛŒ Ø¯ÙˆØ§ØªØ± Ø¬ÛŽØ¨Ù‡ÛŽÚµÛ•.""",
                      onPressedBritish: () => speaksentence7("en-GB"),
                      onPressedAmerican: () => speaksentence7("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """I managed to squeeze through the gap.""",
                      kurdishText: """ØªÙˆØ§Ù†ÛŒÙ… Ø®Û†Ù… Ø¨Ú©Û•Ù… Ø¨Û• Ø¨Û†Ø´Ø§ÛŒÛŒÛ•Ú©Û•Ø¯Ø§.""",
                      onPressedBritish: () => speaksentence8("en-GB"),
                      onPressedAmerican: () => speaksentence8("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Position the tiles, leaving a narrow gap between the edges.""",
                      kurdishText:
                          """Ø®Ø´ØªÛ•Ú©Ø§Ù† Ø¯Ø§Ø¨Ù†ÛŽ Ùˆ Ø¨Û†Ø´Ø§ÛŒÛŒÛ•Ú©ÛŒ Ú©Û•Ù… Ù„Û• Ù†ÛŽÙˆØ§Ù† Ù‚Û•Ø±Ø§ØºÛ•Ú©Ø§Ù† Ø¨Ù‡ÛŽÚµÛ•ÙˆÛ•.""",
                      onPressedBritish: () => speaksentence9("en-GB"),
                      onPressedAmerican: () => speaksentence9("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù£. (Ù†Ø§Ùˆ) Ù…Ø§ÙˆÛ•ÛŒ ÙˆÛ•Ø³ØªØ§Ù†ÛŒ Ø´ØªÛŽÚ©ØŒ ÛŒØ§Ù† Ù…Ø§ÙˆÛ•ÛŒ Ù†ÛŽÙˆØ§Ù† Ø¯ÙˆÙˆ Ø´Øª"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He wrote his first novel in the gap between school and university.""",
                      kurdishText:
                          """ÛŒÛ•Ú©Û•Ù… Ú•Û†Ù…Ø§Ù†ÛŒÛŒ Ù„Û• Ù…Ø§ÙˆÛ•ÛŒ Ù†ÛŽÙˆØ§Ù† Ù‚ÙˆØªØ§Ø¨Ø®Ø§Ù†Û• Ùˆ Ø²Ø§Ù†Ú©Û† Ù†ÙˆÙˆØ³ÛŒ.""",
                      onPressedBritish: () => speaksentence10("en-GB"),
                      onPressedAmerican: () => speaksentence10("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """They met again after a gap of twenty years.""",
                      kurdishText:
                          """Ø¯ÙˆÙˆØ¨Ø§Ø±Û• ÛŒÛ•Ú©ÛŒØ§Ù† Ø¨ÛŒÙ†ÛŒÙˆÛ• Ø¯ÙˆØ§ÛŒ Ù…Ø§ÙˆÛ•ÛŒ Ø¨ÛŒØ³Øª Ø³Ø§Úµ.""",
                      onPressedBritish: () => speaksentence11("en-GB"),
                      onPressedAmerican: () => speaksentence11("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Thereâ€™s a big age gap between them (= a big difference in their ages).""",
                      kurdishText:
                          """Ø¬ÛŒØ§ÙˆØ§Ø²ÛŒÛŒÛ•Ú©ÛŒ Ú¯Û•ÙˆØ±Û•ÛŒ ØªÛ•Ù…Û•Ù†ÛŒ Ù‡Û•ÛŒÛ• Ù„Û• Ù†ÛŽÙˆØ§Ù†ÛŒØ§Ù†Ø¯Ø§.""",
                      onPressedBritish: () => speaksentence12("en-GB"),
                      onPressedAmerican: () => speaksentence12("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She returned to teaching after a twelve-year gap.""",
                      kurdishText:
                          """Ú¯Û•Ú•Ø§ÛŒÛ•ÙˆÛ• Ø¨Û† Ú©Ø§Ø±ÛŒ Ù…Ø§Ù…Û†Ø³ØªØ§ÛŒÛ•ØªÛŒ Ù„Û• Ø¯ÙˆØ§ÛŒ Ù…Ø§ÙˆÛ•ÛŒ Ø¯ÙˆØ§Ø²Ø¯Û• Ø³Ø§Úµ.""",
                      onPressedBritish: () => speaksentence13("en-GB"),
                      onPressedAmerican: () => speaksentence13("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¤. (Ù†Ø§Ùˆ) Ø¬ÛŒØ§ÙˆØ§Ø²ÛŒÛŒÛ•Ú© Ú©Û• Ø®Û•ÚµÚ©ÛŒ ÛŒØ§Ù† Ø¨Ø§ÙˆÛ•Ú•ÛŒØ§Ù†ØŒ Ø¯Û†Ø®ÛŒØ§Ù†ØŒ Ù‡ØªØ¯ Ø¬ÛŒØ§Ø¯Û•Ú©Ø§ØªÛ•ÙˆÛ•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """A huge gap has opened up between expectations and what is deliverable.""",
                      kurdishText:
                          """Ø¬ÛŒØ§ÙˆØ§Ø²ÛŒÛŒÛ•Ú©ÛŒ Ø²Û†Ø± Ø¯Ø±ÙˆÙˆØ³Øª Ø¨ÙˆÙˆÛ• Ù„Û• Ù†ÛŽÙˆØ§Ù† Ù¾ÛŽØ´Ø¨ÛŒÙ†ÛŒ Ùˆ Ø¦Û•ÙˆÛ•ÛŒ Ú©Û• Ù¾ÛŽØ´Ú©Û•Ø´ Ø¯Û•Ú©Ø±ÛŽØª.""",
                      onPressedBritish: () => speaksentence14("en-GB"),
                      onPressedAmerican: () => speaksentence14("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The only way to close this gap is to innovate.""",
                      kurdishText:
                          """ØªÛ•Ù†Ù‡Ø§ Ú•ÛŽÚ¯Ø§ÛŒ Ú©Û•Ù…Ú©Ø±Ø¯Ù†Û•ÙˆÛ•ÛŒ Ø¦Û•Ù… Ø¬ÛŒØ§ÙˆØ§Ø²ÛŒÛŒÛ• Ù†ÙˆÛŽÚ¯Û•Ø±ÛŒÛŒÛŒÛ•.""",
                      onPressedBritish: () => speaksentence15("en-GB"),
                      onPressedAmerican: () => speaksentence15("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The crisis was largely due to a wide gap between supply and demand.""",
                      kurdishText:
                          """Ù‚Û•ÛŒØ±Ø§Ù†Û•Ú©Û• Ø¨Û• Ù‡Û†Ú©Ø§Ø±ÛŽÚ©ÛŒ Ø²Û†Ø± Ø¨Û•Ù‡Û†ÛŒ Ø¬ÛŒØ§ÙˆØ§Ø²ÛŒÛŒ Ù†ÛŽÙˆØ§Ù† Ø¨Û•Ø±Ù‡Û•Ù…Ù‡ÛŽÙ†Ø§Ù† Ùˆ Ø®ÙˆØ§Ø³Øª Ø¨ÙˆÙˆ.""",
                      onPressedBritish: () => speaksentence16("en-GB"),
                      onPressedAmerican: () => speaksentence16("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence1700""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence17("en-GB"),
                      onPressedAmerican: () => speaksentence17("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence1800""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence18("en-GB"),
                      onPressedAmerican: () => speaksentence18("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence1900""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence19("en-GB"),
                      onPressedAmerican: () => speaksentence19("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_2000""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence20("en-GB"),
                      onPressedAmerican: () => speaksentence20("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence2100""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence21("en-GB"),
                      onPressedAmerican: () => speaksentence21("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence2200""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence22("en-GB"),
                      onPressedAmerican: () => speaksentence22("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence2300""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence23("en-GB"),
                      onPressedAmerican: () => speaksentence23("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence2400""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence24("en-GB"),
                      onPressedAmerican: () => speaksentence24("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence2500""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence25("en-GB"),
                      onPressedAmerican: () => speaksentence25("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence2600""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence26("en-GB"),
                      onPressedAmerican: () => speaksentence26("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence2700""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence27("en-GB"),
                      onPressedAmerican: () => speaksentence27("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence2800""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence28("en-GB"),
                      onPressedAmerican: () => speaksentence28("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence2900""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence29("en-GB"),
                      onPressedAmerican: () => speaksentence29("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_3000""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence30("en-GB"),
                      onPressedAmerican: () => speaksentence30("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence3100""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence31("en-GB"),
                      onPressedAmerican: () => speaksentence31("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence3200""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence32("en-GB"),
                      onPressedAmerican: () => speaksentence32("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence3300""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence33("en-GB"),
                      onPressedAmerican: () => speaksentence33("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence3400""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence34("en-GB"),
                      onPressedAmerican: () => speaksentence34("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence3500""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence35("en-GB"),
                      onPressedAmerican: () => speaksentence35("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence3600""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence36("en-GB"),
                      onPressedAmerican: () => speaksentence36("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence3700""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence37("en-GB"),
                      onPressedAmerican: () => speaksentence37("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence3800""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence38("en-GB"),
                      onPressedAmerican: () => speaksentence38("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence3900""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence39("en-GB"),
                      onPressedAmerican: () => speaksentence39("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_4000""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence40("en-GB"),
                      onPressedAmerican: () => speaksentence40("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence4100""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence41("en-GB"),
                      onPressedAmerican: () => speaksentence41("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence4200""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence42("en-GB"),
                      onPressedAmerican: () => speaksentence42("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence4300""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence43("en-GB"),
                      onPressedAmerican: () => speaksentence43("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence4400""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence44("en-GB"),
                      onPressedAmerican: () => speaksentence44("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence4500""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence45("en-GB"),
                      onPressedAmerican: () => speaksentence45("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence4600""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence46("en-GB"),
                      onPressedAmerican: () => speaksentence46("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence4700""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence47("en-GB"),
                      onPressedAmerican: () => speaksentence47("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence4800""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence48("en-GB"),
                      onPressedAmerican: () => speaksentence48("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence4900""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence49("en-GB"),
                      onPressedAmerican: () => speaksentence49("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_5000""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence50("en-GB"),
                      onPressedAmerican: () => speaksentence50("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5100""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence51("en-GB"),
                      onPressedAmerican: () => speaksentence51("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5200""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence52("en-GB"),
                      onPressedAmerican: () => speaksentence52("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5300""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence53("en-GB"),
                      onPressedAmerican: () => speaksentence53("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5400""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence54("en-GB"),
                      onPressedAmerican: () => speaksentence54("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5500""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence55("en-GB"),
                      onPressedAmerican: () => speaksentence55("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5600""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence56("en-GB"),
                      onPressedAmerican: () => speaksentence56("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5700""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence57("en-GB"),
                      onPressedAmerican: () => speaksentence57("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5800""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence58("en-GB"),
                      onPressedAmerican: () => speaksentence58("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5900""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence59("en-GB"),
                      onPressedAmerican: () => speaksentence59("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_6000""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence60("en-GB"),
                      onPressedAmerican: () => speaksentence60("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6100""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence61("en-GB"),
                      onPressedAmerican: () => speaksentence61("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6200""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence62("en-GB"),
                      onPressedAmerican: () => speaksentence62("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6300""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence63("en-GB"),
                      onPressedAmerican: () => speaksentence63("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6400""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence64("en-GB"),
                      onPressedAmerican: () => speaksentence64("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6500""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence65("en-GB"),
                      onPressedAmerican: () => speaksentence65("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6600""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence66("en-GB"),
                      onPressedAmerican: () => speaksentence66("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6700""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence67("en-GB"),
                      onPressedAmerican: () => speaksentence67("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6800""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence68("en-GB"),
                      onPressedAmerican: () => speaksentence68("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6900""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence69("en-GB"),
                      onPressedAmerican: () => speaksentence69("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_7000""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence70("en-GB"),
                      onPressedAmerican: () => speaksentence70("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7100""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence71("en-GB"),
                      onPressedAmerican: () => speaksentence71("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7200""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence72("en-GB"),
                      onPressedAmerican: () => speaksentence72("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7300""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence73("en-GB"),
                      onPressedAmerican: () => speaksentence73("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7400""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence74("en-GB"),
                      onPressedAmerican: () => speaksentence74("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7500""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence75("en-GB"),
                      onPressedAmerican: () => speaksentence75("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7600""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence76("en-GB"),
                      onPressedAmerican: () => speaksentence76("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7700""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence77("en-GB"),
                      onPressedAmerican: () => speaksentence77("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7800""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence78("en-GB"),
                      onPressedAmerican: () => speaksentence78("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7900""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence79("en-GB"),
                      onPressedAmerican: () => speaksentence79("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_8000""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence80("en-GB"),
                      onPressedAmerican: () => speaksentence80("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8100""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence81("en-GB"),
                      onPressedAmerican: () => speaksentence81("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8200""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence82("en-GB"),
                      onPressedAmerican: () => speaksentence82("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8300""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence83("en-GB"),
                      onPressedAmerican: () => speaksentence83("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ú˜Ù…Ù…Ø±. (Ù†Ø§Ùˆ) Ù¾Ù†Ù†Ø³Û•"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8400""",
                      kurdishText: """Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•_Ø±Ø³ØªÛ•.""",
                      onPressedBritish: () => speaksentence84("en-GB"),
                      onPressedAmerican: () => speaksentence84("en-US"),
                    ),
                  ],
                ),
              ),
              Consumer(
                builder: (context, ref, child) {
                  if (filteredSentences.isEmpty) {
                    return const NoSentencesFromDatabase();
                  } else {
                    return ListView.builder(
                      itemCount: filteredSentences.length,
                      itemBuilder: (context, index) {
                        final sentence = filteredSentences[index];
                        final showDivider = filteredSentences.length > 1 &&
                            index != filteredSentences.length - 1;
                        return CustomSentenceWidget(
                          englishText: sentence['english'].toString(),
                          frenchText: sentence['french'].toString(),
                          keyword: keyword,
                          onPressedBritish: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-GB",
                          ),
                          onPressedAmerican: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-US",
                          ),
                          showDivider: showDivider,
                        );
                      },
                    );
                  }
                },
              ),
              const YouTubeScroller(
                children: [
                  YoutubeEmbeddedone(),
                  YoutubeEmbeddedtwo(),
                  YoutubeEmbeddedthree(),
                  YoutubeEmbeddedfour(),
                  YoutubeEmbeddedfive(),
                  // YoutubeEmbeddedsix(),
                  // YoutubeEmbeddedseven(),
                  // YoutubeEmbeddedeight(),
                  // YoutubeEmbeddednine(),
                  // YoutubeEmbeddedten(),
                  // YoutubeEmbeddedeleven(),
                  // YoutubeEmbeddedtwelve(),
                  // YoutubeEmbeddedthirteen(),
                  // YoutubeEmbeddeddfourteen(),
                  // YoutubeEmbeddedfifteen(),
                  // YoutubeEmbeddeddsixteen(),
                  // YoutubeEmbeddeddseventeen(),
                  // YoutubeEmbeddeddeighteen(),
                  // YoutubeEmbeddeddnineteen(),
                  // YoutubeEmbeddedtwenty(),
                  // YoutubeEmbeddedmulti(),
                  YoutubeEmbeddedend(),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// 188888880002200
const String _videoIdend = 'https://youtu.be/hFZFjoX2cGg?t=';
const double _startSecondsend = 000000000000000000000000000748;
const String _videoIdone = 'https://youtu.be/AF8d72mA41M?t=';
const double _startSecondsone = 000000000000000000000000000316;
const String _videoIdtwo = 'https://youtu.be/qYXw_qvtNQc?t=';
const double _startSecondstwo = 000000000000000000000000000201;
const String _videoIdthree = 'https://youtu.be/SEZu7K5tGxw?t=';
const double _startSecondsthree = 000000000000000000000000000323;
const String _videoIdfour = 'https://youtu.be/bHIhgxav9LY?t=';
const double _startSecondsfour = 000000000000000000000000000134;
const String _videoIdfive = 'https://youtu.be/fZJGTevM3QI?t=';
const double _startSecondsfive = 000000000000000000000000000290;

class YoutubeEmbeddedend extends StatelessWidget {
  const YoutubeEmbeddedend({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdend,
      startSeconds: _startSecondsend,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdend,
        startSeconds: _startSecondsend,
      );
    }

    return YouTubeVideosScaffoldEnd(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedone extends StatelessWidget {
  const YoutubeEmbeddedone({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdone,
      startSeconds: _startSecondsone,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdone,
        startSeconds: _startSecondsone,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedtwo extends StatelessWidget {
  const YoutubeEmbeddedtwo({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdtwo,
      startSeconds: _startSecondstwo,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdtwo,
        startSeconds: _startSecondstwo,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedthree extends StatelessWidget {
  const YoutubeEmbeddedthree({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdthree,
      startSeconds: _startSecondsthree,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdthree,
        startSeconds: _startSecondsthree,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedfour extends StatelessWidget {
  const YoutubeEmbeddedfour({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdfour,
      startSeconds: _startSecondsfour,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdfour,
        startSeconds: _startSecondsfour,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedfive extends StatelessWidget {
  const YoutubeEmbeddedfive({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdfive,
      startSeconds: _startSecondsfive,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdfive,
        startSeconds: _startSecondsfive,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

// end WORD_WEB