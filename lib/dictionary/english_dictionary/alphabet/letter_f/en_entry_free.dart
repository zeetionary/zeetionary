import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:zeetionary/constants.dart';

enum TtsState { playing }

class EnglishEntryfree extends StatefulWidget {
  const EnglishEntryfree({super.key});

  @override
  State<EnglishEntryfree> createState() => _EnglishEntryfreeState();
}

class _EnglishEntryfreeState extends State<EnglishEntryfree> {
  @override
  void initState() {
    super.initState();
    flutterTts = FlutterTts();
    flutterTts.setLanguage("en-GB");
    flutterTts.setLanguage("en-US");
    fetchSentences();
  }

  FlutterTts flutterTts = FlutterTts();

  bool isSpeaking = false;

  Future<void> startSpeaking(
      String languageCode, EnglishMeaningConst englishMeaningConst) async {
    String textToSpeak = """
${englishMeaningConst.text}
""";

    await flutterTts.setLanguage(languageCode);
    await flutterTts.speak(textToSpeak);

    setState(() {
      isSpeaking = true;
    });
  }

  Future<void> stopSpeaking() async {
    await flutterTts.stop();

    setState(() {
      isSpeaking = false;
    });
  }

  final EnglishMeaningConst englishMeaningConst = const EnglishMeaningConst(
    text: """
- Adjective: free (derived forms: freest, freer)
1. Costing nothing (= complimentary, costless, gratis, gratuitous, courtesy)
"free admission";
 
2. Not limited or hampered; not under compulsion or restraint
"free enterprise"; "a free port"; "a free country"; "I have an hour free"; "free will"; "free of racism"; "feel free to stay as long as you wish"; "a free choice"
 
3. Not occupied or in use
"a free locker"; "a free lane"
 
4. Not fixed in position (= detached)
"he pulled his arm free and ran";
 
5. Not taken up by scheduled activities (= spare)
"a free hour between classes";
 
6. Completely wanting or lacking (= barren, destitute, devoid, innocent, empty)
"writing free of insight";
 
7. Not literal (= loose, liberal)
"a free translation of the poem";
 
8. Not held in servitude
"after the Civil War he was a free man"
 
9. (physics) unconstrained or not chemically bound in a molecule or not fixed and capable of relatively unrestricted motion
"free expansion"; "free oxygen"; "a free electron"

- Verb: free (derived forms: frees, freed, freeing)
1. Grant freedom to; free from confinement (= liberate, release, unloose, unloosen, loose)
 
2. Relieve from (= rid, disembarrass)
"free the house of pests";
 
3. Remove or force out from a position (= dislodge)
"He finally could free the legs of the earthquake victim who was buried in the rubble";
 
4. Grant relief or an exemption from a rule or requirement to (= exempt, relieve)
"She freed me from the exam";
 
5. Make (information) available for publication (= release)
"free the list with the names of the prisoners";
 
6. Release from obligations or duties (= discharge)
 
7. Remove obstruction from (= disengage)
"free a path across the cluttered floor";
 
8. Let off the hook (= absolve)
"I free you from this responsibility";
 
9. Part with a possession or right (= release, relinquish, resign, give up)
 
10. Make (assets) available (= unblock, unfreeze, release)
"free the holdings in the dictator's bank account";
 
11. (chemistry) release (gas or energy) as a result of a chemical reaction or physical decomposition (= release, liberate)

- Noun: free (derived forms: frees)
1. People who are free (= free people)
"the home of the free and the brave";

- Adverb: free
1. Without restraint (= loose)
"cows in India are running free";
""",
  );

  final String keyword = "free";
  List<Map<String, dynamic>> filteredSentences = [];

  Future<void> fetchSentences() async {
    final sentences =
        await DatabaseUtils.instance.fetchFilteredSentences(keyword: keyword);
    setState(() {
      filteredSentences = sentences;
    });
  }

  void speakEnglish(String text, {String? languageCode}) async {
    await flutterTts.setLanguage(languageCode ?? "en-GB");
    await flutterTts.speak(text);
  }

  Future<void> speakheadword(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""free""");
  }

  Future<void> speaksentence1(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Are you free on Saturday?""");
  }

  Future<void> speaksentence2(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""We try to keep Sundays free.""");
  }

  Future<void> speaksentence3(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""If Janice is free for lunch I'll take her out.""");
  }

  Future<void> speaksentence4(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Keep Friday night free for my party.""");
  }

  Future<void> speaksentence5(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Is this seat free?""");
  }

  Future<void> speaksentence6(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The hospital needs to keep some beds free for emergencies.""");
  }

  Future<void> speaksentence7(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""There were no free tables, so we had to share.""");
  }

  Future<void> speaksentence8(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""None of the library computers were free.""");
  }

  Future<void> speaksentence9(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Admission is free.""");
  }

  Future<void> speaksentence10(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""We offer a free web design service.""");
  }

  Future<void> speaksentence11(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Use of the pool is free to members.""");
  }

  Future<void> speaksentence12(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""You can't expect people to work for free.""");
  }

  Future<void> speaksentence13(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Entrance is free for students.""");
  }

  Future<void> speaksentence14(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Education should be free for everyone.""");
  }

  Future<void> speaksentence15(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Membership is free.""");
  }

  Future<void> speaksentence16(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Shipping is free for orders over Â£50.""");
  }

  Future<void> speaksentence17(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""They get free medical care.""");
  }

  Future<void> speaksentence18(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""We're giving away 100 free tickets to the final.""");
  }

  Future<void> speaksentence19(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The game is available as a free download.""");
  }

  Future<void> speaksentence20(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""You get all this absolutely free.""");
  }

  Future<void> speaksentence21(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """I have no ambitions other than to have a happy life and be free.""");
  }

  Future<void> speaksentence22(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""You are free to leave at any time.""");
  }

  Future<void> speaksentence23(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The government wants to leave companies free to make their own decisions.""");
  }

  Future<void> speaksentence24(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The organization wants to remain free from government control.""");
  }

  Future<void> speaksentence25(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """We want an independent state free of foreign interference.""");
  }

  Future<void> speaksentence26(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""Feel free to email me if you have any questions.""");
  }

  Future<void> speaksentence27(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""After my divorce I felt free.""");
  }

  Future<void> speaksentence28(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """You have a completely free choice of topic for your essay.""");
  }

  Future<void> speaksentence29(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""You are free to express your opinion, of course.""");
  }

  Future<void> speaksentence30(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""You are free to come and go as you please.""");
  }

  Future<void> speaksentence31(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""A true democracy needs free speech and a free press.""");
  }

  Future<void> speaksentence32(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He called for free and fair elections.""");
  }

  Future<void> speaksentence33(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""They gave me free access to all the files.""");
  }

  Future<void> speaksentence34(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """In a free country you should be able to go wherever you want.""");
  }

  Future<void> speaksentence35(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """He opposes the free flow of goods and people into the country.""");
  }

  Future<void> speaksentence36(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""We want to be a free and democratic nation.""");
  }

  Future<void> speaksentence37(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He walked out of jail a free man.""");
  }

  Future<void> speaksentence38(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The hostages were all set free.""");
  }

  Future<void> speaksentence39(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""After twelve years in captivity, they were free.""");
  }

  Future<void> speaksentence40(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She pleaded with them to let her free.""");
  }

  Future<void> speaksentence41(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The researchers set the birds free.""");
  }

  Future<void> speaksentence42(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Our livestock is free to roam.
""");
  }

  Future<void> speaksentence43(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""She opened the cage and let the bird fly free.""");
  }

  Future<void> speaksentence44(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""Ensure there is a free flow of air around the machine.""");
  }

  Future<void> speaksentence45(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The roads are relatively free today.""");
  }

  Future<void> speaksentence46(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Everyone deserves to live free from fear.""");
  }

  Future<void> speaksentence47(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """It was several weeks before he was completely free of pain.""");
  }

  Future<void> speaksentence48(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Our staff have a right to work free from violence or threats.""");
  }

  Future<void> speaksentence49(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The text should be totally free of mistakes.""");
  }

  Future<void> speaksentence50(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""After six months of treatment he is cancer-free.""");
  }

  Future<void> speaksentence51(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Completely pain-free childbirth is a myth.""");
  }

  Future<void> speaksentence52(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He's managed to stay injury-free this season.""");
  }

  Future<void> speaksentence53(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""Holidays should be a relaxed, pressure-free time.""");
  }

  Future<void> speaksentence54(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""I want her time here to be happy and stress-free.""");
  }

  Future<void> speaksentence55(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Pull gently on the free end of the rope.""");
  }

  Future<void> speaksentence56(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She finally managed to pull herself free.""");
  }

  Future<void> speaksentence57(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""They tied him up but he managed to get free.""");
  }

  Future<void> speaksentence58(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The dog had broken free of its chain.""");
  }

  Future<void> speaksentence59(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Children under five travel free.""");
  }

  Future<void> speaksentence60(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""You can download the app for free.""");
  }

  Future<void> speaksentence61(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Attach the top and let the ends hang free.""");
  }

  Future<void> speaksentence62(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Her long hair hung free down her back.""");
  }

  Future<void> speaksentence63(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""The hijackers agreed to free a further ten hostages.""");
  }

  Future<void> speaksentence64(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""She led an armed mission that freed 700 slaves.""");
  }

  Future<void> speaksentence65(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""They succeeded in freeing their friends from prison.""");
  }

  Future<void> speaksentence66(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""They're launching a campaign to free the three men.""");
  }

  Future<void> speaksentence67(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She struggled to free herself.""");
  }

  Future<void> speaksentence68(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Three people were freed from the wreckage.""");
  }

  Future<void> speaksentence69(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""These exercises help free the body of tension.""");
  }

  Future<void> speaksentence70(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The police are determined to free the town of violent crime.""");
  }

  Future<void> speaksentence71(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The centre aims to free young people from dependency on drugs.""");
  }

  Future<void> speaksentence72(String languageCode) async {
    await flutterTts.setLanguage(languageCode);

    await flutterTts
        .speak("""We freed time each week for a project meeting.""");
  }

  Future<void> speaksentence73(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The government has promised to free up more resources for education.""");
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 4,
      child: Scaffold(
        appBar: const ZeetionaryAppbar(),
        body: NestedScrollView(
          headerSliverBuilder: (context, innerBoxIsScrolled) {
            return [
              CustomSliverAppBar(
                flexibleSpace: FlexibleSpaceBar(
                  background: SingleChildScrollView(
                    child: EntryPageColumn(
                      word: """free""",
                      // alsoEnglishWord: "also: free",
                      britshText: """IpaUK: /friË/""",
                      americanText: """IpaUS: /friË/""",
                      onPressedBritish: () => speakheadword("en-GB"),
                      onPressedAmerican: () => speakheadword("en-US"),
                    ),
                  ),
                ),
                bottom: const CustomTabBarNew(
                  tabs: [
                    UkIconForTab(),
                    KurdIconForTab(),
                    SentencesIconForTab(),
                    VideoIconForTab(),
                  ],
                ),
              ),
            ];
          },
          body: TabBarView(
            children: [
              SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    EnglishButtonTTS(
                      onBritishPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onAmericanPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onStopPressed: stopSpeaking,
                    ),
                    englishMeaningConst,
                  ],
                ),
              ),
              SingleChildScrollView(
                child: CustomColumnWidget(
                  children: [
                    const KurdishVocabulary(text: """
Ú©ÙØ±Ø¯Û: Ø¦Ø§Ø²Ø§Ø¯Ø Ø³ÛØ±Ø§Ø²Ø§Ø Ø³ÛØ±Ø¨ÛØ³ØªØ Ø³ÛØ±Ø¨ÛØ®ÛØ Ø³ÛØ±Ø¨ÛØ³ØªØ§ÙÛØ Ø¦Ø§Ø²Ø§Ø¯Ø§ÙÛØ Ø¨ÛØ±Ø¯Ø±Ø§ÙØ Ø¨ÛÚÛÚµØ§Ø ÙÛØ¨ÛØ³Ø±Ø§ÙØ Ù¾ÛØªâÙÛÚ©Ø±Ø§ÙØ Ø¨ÛØ±Ø¨ÛÚÛÚµØ§Ø Ø´ÙØ ÚÛÚ¾Ø§Ø	ØªÛØ±Ø®Ø§ÙØ Ø¨ÛØ®Ø´Ø±Ø§ÙØ Ø¬ÛØ¨Û(Ú©Ø±Ø§Ù)Ø	(ÙÛ ÙÛÚ©Ø¯Ø§ÙØ§) Ø¨ÛÙØ Ø¨ÛØªØ§ÚµÛ ÙÛØ Ø®Ø§ÚµÛ ÙÛØ	Ø®ÛÚØ§ÛÛØ Ø¨ÛâÙ¾Ø§Ø±ÛØ ÙÙØªØ Ø¨ÛÙØ§Ø´Ø	Ú©Ø±Ø§ÙÛØ Ø¯Ø§ÙÛØ®Ø±Ø§ÙØ Ø¦Ø§ÙØ§ÚµÛØ	Ø¨ÛØ¯ÛØ³âÙØ¯ÚµØ Ø¯ÚµØ§ÙØ§Ø Ø¨ÛØ¯ÛÚ¾ÙØ¯ÛØ	ÚÛÙØ§Ø ÚÛÚ¯ÛØ¯Ø±Ø§ÙØ Ú©ÛÙØªÚÛÚµâÙÛÚ©Ø±Ø§ÙØ	(Ú©ÙØ±Ø³Û) Ø¨ÛØªØ§ÚµØ ÙÛÚ¯ÛØ±Ø§ÙØ Ø®Ø§ÚµÛØ	(Ú©ÛÙÛØ§) ÙÛÚ¯ÛÚµ ØªÙØ®ÙÛ ØªØ± ÙÛÚ©âÙÛØ¯Ø±Ø§ÙÛØ	ÙØ³ÛÙÛÚÙÙØ	Ø¨ÛÚ©Ø§Ø±Ø Ø¨ÛâØ¦ÛØ´Ø Ø¯ÛØ³âØ¨ÛØªØ§ÚµØ Ø¦Ø§Ø²Ø§Ø¯Ø	Ø¨Û Ø®ÛÚØ§ÛÛØ Ø¨ÛÙØ§Ø´Ø Ø¨ÛâÙØ²Ø	Ø¦Ø§Ø²Ø§Ø¯Ø§ÙÛØ Ø³ÛØ±Ø¨ÛØ³ØªØ§ÙÛ
"""),
                    const DefinitionKurdish(
                        text:
                            """Ù¡. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ú©ÛØ³ÛÚ© Ú©Û Ù¾ÙØ§Ù Ù ÚÛÚ©ÛØªÙÛ ØªØ§ÛØ¨ÛØªÛ ÙÛÛÛ"""),
                    SentencesRow(
                      englishText: """Are you free on Saturday?""",
                      kurdishText: """ÚÛÚÛ Ø´ÛÙÙÛ Ø¯ÛØ³ØªØ¨ÛØªØ§ÚµÛØªØ""",
                      onPressedBritish: () => speaksentence1("en-GB"),
                      onPressedAmerican: () => speaksentence1("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """We try to keep Sundays free.""",
                      kurdishText: """Ú¾ÛÙÚµ Ø¯ÛØ¯ÛÛÙ Ø¨ÛâØ¦ÛØ´ Ø¨ÛÛÙ.""",
                      onPressedBritish: () => speaksentence2("en-GB"),
                      onPressedAmerican: () => speaksentence2("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """If Janice is free for lunch I'll take her out.""",
                      kurdishText:
                          """Ø¦ÛÚ¯ÛØ± Ø¬Ø§ÙÛØ³ Ø¨Û Ø¦ÛØ´ Ø¨ÛØª Ø¨Û ÙØ§ÙÛ ÙÛÙÛÚÛ Ø¯ÛÛØ¨ÛÙÛ ÚÙØ§ÙÛÚ©.""",
                      onPressedBritish: () => speaksentence3("en-GB"),
                      onPressedAmerican: () => speaksentence3("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """Keep Friday night free for my party.""",
                      kurdishText:
                          """Ø´ÛÙÛ Ú¾ÛÛÙÛ Ø¨ÛâØ¦ÛØ´ Ø¨Ú¾ÛÚµÙÛÙÛ Ø¨Û Ø¦Ø§Ú¾ÛÙÚ¯ÛÚ©ÛÙ.""",
                      onPressedBritish: () => speaksentence4("en-GB"),
                      onPressedAmerican: () => speaksentence4("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¢. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ú©Û Ø¨ÛÚ©Ø§Ø±ÙØ§ÛÛØª"""),
                    SentencesRow(
                      englishText: """Is this seat free?""",
                      kurdishText: """Ø¦ÛÙ Ø¬ÛÚ¯Ø§ÛÛ Ø¨ÛØªØ§ÚµÛØ""",
                      onPressedBritish: () => speaksentence5("en-GB"),
                      onPressedAmerican: () => speaksentence5("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The hospital needs to keep some beds free for emergencies.""",
                      kurdishText:
                          """ÙÛØ®ÛØ´Ø®Ø§ÙÛÚ©Û Ø¯ÛØ¨ÛØª Ú¾ÛÙØ¯ÛÚ© ÙÛØ±ÛÙÛÚµÛ Ø¨Û Ø¨ÛØªØ§ÚµÛ Ø¨Ú¾ÛÚµÛØªÛÙÛ Ø¨Û Ø¯ÛØ®Û ÙÛÙØ§Ú©Ø§Ù.""",
                      onPressedBritish: () => speaksentence6("en-GB"),
                      onPressedAmerican: () => speaksentence6("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """There were no free tables, so we had to share.""",
                      kurdishText:
                          """Ú¾ÛÚ ÙÛØ²ÛÚ©Û Ø¨ÛØªØ§Úµ ÙÛØ¨ÙÙ Ø¨ÛÛÛ Ù¾ÛÙÛØ³Øª Ø¨ÙÙ ÛÛÚ©ÛÚ© Ú¾Ø§ÙØ¨ÛØ´ Ø¨Ú©ÛÛÙ.""",
                      onPressedBritish: () => speaksentence7("en-GB"),
                      onPressedAmerican: () => speaksentence7("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """None of the library computers were free.""",
                      kurdishText:
                          """Ú¾ÛÚ ÛÛÚ© ÙÛ Ú©ÛÙÙ¾ÛÙØªÛØ±ÛÚ©Ø§ÙÛ Ú©ØªÛØ¨Ø®Ø§ÙÛÚ©Û Ø¨ÛØªØ§Úµ ÙÛØ¨ÙÙÙ (= Ú¾ÛÙÙÙÛ Ø¨ÛÚ©Ø§Ø±Ø¯ÛÚ¾Ø§Øª).""",
                      onPressedBritish: () => speaksentence8("en-GB"),
                      onPressedAmerican: () => speaksentence8("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù£. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ú©Û Ù¾Ø§Ø±ÛÛ ØªÛÙØ§ÚÛØª"""),
                    SentencesRow(
                      englishText: """Admission is free.""",
                      kurdishText: """ÚÙÙÙÛÚÙÙØ±ÛÙÛ Ø¨ÛØ¨ÛØ±Ø§ÙØ¨ÛØ±Û.""",
                      onPressedBritish: () => speaksentence9("en-GB"),
                      onPressedAmerican: () => speaksentence9("en-US"),
                    ),
                    Column(
                      children: [
                        MyExpansionTile(
                          children: [
                            SentencesRow(
                              englishText:
                                  """We offer a free web design service.""",
                              kurdishText:
                                  """Ø®Ø²ÙÛØªÚ¯ÙØ²Ø§Ø±Û Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ±Û Ø¯ÛØ²Ø§ÙÛ Ø³Ø§ÛØª Ù¾ÛØ´Ú©ÛØ´ Ø¯ÛÚ©ÛÛÙ.""",
                              onPressedBritish: () => speaksentence10("en-GB"),
                              onPressedAmerican: () => speaksentence10("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Use of the pool is free to members.""",
                              kurdishText:
                                  """Ø¨ÛÚ©Ø§Ø±Ú¾ÛÙØ§ÙÛ ÙÛÙÛÙØ§ÙÚ¯ÛÚ©Û Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ±Û Ø¨Û Ø¦ÛÙØ¯Ø§ÙØ§Ù.""",
                              onPressedBritish: () => speaksentence11("en-GB"),
                              onPressedAmerican: () => speaksentence11("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """You can't expect people to work for free (= without payment).""",
                              kurdishText:
                                  """Ù¾ÛØ´Ø¨ÛÙÛ Ø¦ÛÙÛ ÙÛÚ©Û Ø®ÛÚµÚ©Û Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ± Ú©Ø§Ø± Ø¨Ú©ÛÙ.""",
                              onPressedBritish: () => speaksentence12("en-GB"),
                              onPressedAmerican: () => speaksentence12("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText: """Entrance is free for students.""",
                              kurdishText:
                                  """ÚÙÙÙÛÚÙÙÚÛÙÛ Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ±Û Ø¨Û Ø¦ÛÙØ¯Ø§ÙØ§Ù.""",
                              onPressedBritish: () => speaksentence13("en-GB"),
                              onPressedAmerican: () => speaksentence13("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Education should be free for everyone.""",
                              kurdishText:
                                  """ÙÛØ±Ú©Ø±Ø¯Ù Ø¯ÛØ¨ÛØª Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ± Ø¨ÛØª Ø¨Û Ú¾ÛÙÙØ§Ù.""",
                              onPressedBritish: () => speaksentence14("en-GB"),
                              onPressedAmerican: () => speaksentence14("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText: """Membership is free.""",
                              kurdishText: """Ø¨ÙÙÙ Ø¨Û Ø¦ÛÙØ¯Ø§Ù Ø¨ÛÙØ§Ø´Û.""",
                              onPressedBritish: () => speaksentence15("en-GB"),
                              onPressedAmerican: () => speaksentence15("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Shipping is free for orders over Â£50.""",
                              kurdishText:
                                  """Ú¯ÛÛØ§ÙØ¯Ù Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ±Û Ø¨Û Ø¦ÛØ±Ø¯ÛØ±Û Ø³ÛØ±ÙÙ Ù¥Ù  Ù¾Ø§ÙÛÙØ¯Û.""",
                              onPressedBritish: () => speaksentence16("en-GB"),
                              onPressedAmerican: () => speaksentence16("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText: """They get free medical care.""",
                              kurdishText:
                                  """ÚØ§ÙØ¯ÛØ±ÛÛ ØªÛÙØ¯Ø±ÙÙØ³ØªÛ Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ± ÙÛØ±Ø¯ÛÚ¯Ø±Ù.""",
                              onPressedBritish: () => speaksentence17("en-GB"),
                              onPressedAmerican: () => speaksentence17("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """We're giving away 100 free tickets to the final.""",
                              kurdishText:
                                  """Ù¡Ù Ù  Ø¨ÙÛØªÛ Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ± Ø¯ÛØ¨ÛØ®Ø´ÛÙ Ø¨Û ÛØ§Ø±ÛÛ Ú©ÛØªØ§ÛÛ.""",
                              onPressedBritish: () => speaksentence18("en-GB"),
                              onPressedAmerican: () => speaksentence18("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """The game is available as a free download.""",
                              kurdishText:
                                  """ÛØ§Ø±ÛÛÛÚ©Û Ø¨Û Ø¯Ø§Ø¨ÛØ²Ø§ÙØ¯ÙÛ Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ± Ø¨ÛØ±Ø¯ÛØ³ØªÛ.""",
                              onPressedBritish: () => speaksentence19("en-GB"),
                              onPressedAmerican: () => speaksentence19("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """You get all this absolutely free.""",
                              kurdishText:
                                  """Ú¾ÛÙÙÙ Ø¦ÛÙÛ Ø¨Û ØªÛÙØ§ÙÛ Ø¨Û Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ± ÙÛØ±Ø¯ÛÚ¯Ø±ÛØª.""",
                              onPressedBritish: () => speaksentence20("en-GB"),
                              onPressedAmerican: () => speaksentence20("en-US"),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¤. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ø¦Ø§Ø²Ø§Ø¯Ø Ú©Û Ø¦ÛÙÛ Ø¨Ú©ÛÛØª Ú©Û Ø®ÛØª Ø¯ÛØªÛÙÛØª"""),
                    SentencesRow(
                      englishText:
                          """I have no ambitions other than to have a happy life and be free.""",
                      kurdishText:
                          """Ú¾ÛÚ Ø®ÙØ§Ø³ØªÛÚ©Ù ÙÛÛÛ Ø¬Ú¯Û ÙÛÙÛÛ Ú©Û ÚÛØ§ÙÛÚ©Û Ø¯ÚµØ®ÛØ´Ø§ÙÛÙ Ú¾ÛØ¨ÛØª Ù Ø¦Ø§Ø²Ø§Ø¯ Ø¨Ù.""",
                      onPressedBritish: () => speaksentence21("en-GB"),
                      onPressedAmerican: () => speaksentence21("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """You are free to leave at any time.""",
                      kurdishText: """Ø¦Ø§Ø²Ø§Ø¯ÛØª ÙÛÙÛÛ Ú©ÛÛ Ø¯ÛÚÛÛØª.""",
                      onPressedBritish: () => speaksentence22("en-GB"),
                      onPressedAmerican: () => speaksentence22("en-US"),
                    ),
                    Column(
                      children: [
                        MyExpansionTile(
                          children: [
                            SentencesRow(
                              englishText:
                                  """The government wants to leave companies free to make their own decisions.""",
                              kurdishText:
                                  """Ø­Ú©ÙÙÛØª Ø¯ÛÛÛÙÛØª Ú©ÛÙÙ¾Ø§ÙÛØ§Ú©Ø§Ù Ø¦Ø§Ø²Ø§Ø¯ Ø¨Ú©Ø§Øª ÙÛÙÛÛ Ø¨ÚÛØ§Ø±Û Ø®ÛÛØ§Ù Ø¨Ø¯ÛÙ.""",
                              onPressedBritish: () => speaksentence23("en-GB"),
                              onPressedAmerican: () => speaksentence23("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """The organization wants to remain free from government control.""",
                              kurdishText:
                                  """Ø¯Ø§ÙÛØ²Ø±Ø§ÙÛÚ©Û Ø¯ÛÛÛÙÛØª Ø¨Û Ø¦Ø§Ø²Ø§Ø¯Û ÙÛ Ú©ÛÙØªØ±ÛÚµÛ Ø­Ú©ÙÙÛØª Ø¨ÙÛÙÛØªÛÙÛ.""",
                              onPressedBritish: () => speaksentence24("en-GB"),
                              onPressedAmerican: () => speaksentence24("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """We want an independent state free of foreign interference.""",
                              kurdishText:
                                  """ÙÚµØ§ØªÛÚ©Û Ø³ÛØ±Ø¨ÛØ®ÛÙØ§Ù Ø¯ÛÙÛØª Ú¾ÛÚ Ø¯ÛØ³ØªÛÙÛØ±Ø¯Ø§ÙÛ Ø¯ÛØ±ÛÚ©Û ÙÛØ¨ÛØª.""",
                              onPressedBritish: () => speaksentence25("en-GB"),
                              onPressedAmerican: () => speaksentence25("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Feel free to email me if you have any questions.""",
                              kurdishText:
                                  """Ú¾ÛØ± Ù¾Ø±Ø³ÛØ§Ø±ÛÚ©Øª Ø¨ÙÙ Ø¦Ø§Ø²Ø§Ø¯ÛØª ÙÛÙÛÛ Ø¦ÛÙÛÛÚµÙ Ø¨Û Ø¨ÙÛØ±ÛØª.""",
                              onPressedBritish: () => speaksentence26("en-GB"),
                              onPressedAmerican: () => speaksentence26("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText: """After my divorce I felt free.""",
                              kurdishText:
                                  """Ø¯ÙØ§Û Ø¬ÛØ§Ø¨ÙÙÙÛÙÛÚ©ÛÙ Ú¾ÛØ³ØªÙ Ø¨Û Ø¦Ø§Ø²Ø§Ø¯Û Ú©Ø±Ø¯.""",
                              onPressedBritish: () => speaksentence27("en-GB"),
                              onPressedAmerican: () => speaksentence27("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """You have a completely free choice of topic for your essay.""",
                              kurdishText:
                                  """ØªÛÙØ§Ù Ú¾ÛÚµØ¨ÚØ§Ø±Ø¯ÙÛ Ø¦Ø§Ø²Ø§Ø¯Øª Ú¾ÛÛÛ Ø¨Û Ø¯Ø§ÚØ´ØªÙÛÚ©ÛØª.""",
                              onPressedBritish: () => speaksentence28("en-GB"),
                              onPressedAmerican: () => speaksentence28("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """You are free to express your opinion, of course.""",
                              kurdishText:
                                  """Ø¨Û Ø¯ÚµÙÛØ§ÛÛÛÙÛ Ø¦Ø§Ø²Ø§Ø¯ÛØª ÙÛÙÛÛ Ø¨ÛÚÙÙÙØª Ø¯ÛØ±Ø¨Ø¨ÚÛØª.""",
                              onPressedBritish: () => speaksentence29("en-GB"),
                              onPressedAmerican: () => speaksentence29("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """You are free to come and go as you please.""",
                              kurdishText:
                                  """Ø¦Ø§Ø²Ø§Ø¯ÛØª ÙÛÙÛÛ Ø¨ÛÛØª Ù Ø¨ÚÛØª Ø¨ÛÙ Ø´ÛÙÛÛÛÚ© Ù¾ÛØª Ø®ÛØ´Û.""",
                              onPressedBritish: () => speaksentence30("en-GB"),
                              onPressedAmerican: () => speaksentence30("en-US"),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¤. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ú©Û ÙÛÙØ§ÛÛÙ Ú©ÛØ³ÛÙÛ Ú©ÛÙØªØ±ÛÚµ ÛØ§Ù Ø³ÙÙÙØ±Ø¯Ø§Ø± ÙÛÚ©Ø±Ø§ÙÛ"""),
                    SentencesRow(
                      englishText:
                          """A true democracy needs free speech and a free press.""",
                      kurdishText:
                          """Ø¯ÛÙÙÚ©Ø±Ø§Ø³ÛÛ ØªÛÙØ§Ù Ø¯ÛØ¨ÛØª Ø¦Ø§Ø²Ø§Ø¯ÛÛ ÚØ§Ø¯ÛØ±Ø¨ÚÛÙ Ù ÙÛØ¯ÛØ§Û Ø¦Ø§Ø²Ø§Ø¯Û Ú¾ÛØ¨ÛØª.""",
                      onPressedBritish: () => speaksentence31("en-GB"),
                      onPressedAmerican: () => speaksentence31("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """He called for free and fair elections.""",
                      kurdishText:
                          """Ø¯Ø§ÙØ§Û Ú¾ÛÚµØ¨ÚØ§Ø±Ø¯ÙÛ Ø¦Ø§Ø²Ø§Ø¯ Ù Ø¯Ø§Ø¯Ù¾ÛØ±ÙÛØ±Ø§ÙÛÛ Ú©Ø±Ø¯.""",
                      onPressedBritish: () => speaksentence32("en-GB"),
                      onPressedAmerican: () => speaksentence32("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """They gave me free access to all the files.""",
                      kurdishText:
                          """Ø¯ÛØ³ØªÚ¯ÛØ´ØªÙÛ ØªÛÙØ§ÙÛØ§Ù Ù¾ÛØ¯Ø§Ù Ø¨Û Ú¾ÛÙÙÙ ÙØ§ÛÙÛÚ©Ø§Ù.""",
                      onPressedBritish: () => speaksentence33("en-GB"),
                      onPressedAmerican: () => speaksentence33("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """In a free country you should be able to go wherever you want.""",
                      kurdishText:
                          """ÙÛ ÙÚµØ§ØªÛÚ©Û Ø¦Ø§Ø²Ø§Ø¯Ø¯Ø§ Ø¯ÛØ¨ÛØª Ø¨ØªÙØ§ÙÛØª Ø¨ÚÛØªÛ Ú¾ÛØ± Ú©ÙÛÛÛÚ© Ú©Û Ø¯ÛØªÛÙÛØª.""",
                      onPressedBritish: () => speaksentence34("en-GB"),
                      onPressedAmerican: () => speaksentence34("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He opposes the free flow of goods and people into the country.""",
                      kurdishText:
                          """Ø¯Ú Ø¨Û ÙÛØ´Ø§ÙÛ Ø¦Ø§Ø²Ø§Ø¯Û Ø®ÛÚµÚ© Ù Ú©Ø§ÚµØ§ÛÛ Ø¨Û ÙØ§Ù ÙÚµØ§ØªÛÚ©Û.""",
                      onPressedBritish: () => speaksentence35("en-GB"),
                      onPressedAmerican: () => speaksentence35("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """We want to be a free and democratic nation.""",
                      kurdishText:
                          """Ø¯ÛÙØ§ÙÛÙÛØª ÙÚµØ§ØªÛÚ©Û Ø¦Ø§Ø²Ø§Ø¯Û Ø¯ÛÙÙÚ©Ø±Ø§Ø³Û Ø¨ÛÛÙ.""",
                      onPressedBritish: () => speaksentence36("en-GB"),
                      onPressedAmerican: () => speaksentence36("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¥. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ú©ÛØ³ÛÚ© Ú©Û Ø²ÛÙØ¯Ø§ÙÛ ÛØ§Ù Ú©ÛÛÙÛ ÙÛÛÛ"""),
                    SentencesRow(
                      englishText: """He walked out of jail a free man.""",
                      kurdishText: """ÙÛÚ© Ú©ÛØ³ÛÚ©Û Ø¦Ø§Ø²Ø§Ø¯ ÙÛ Ø²ÛÙØ¯Ø§Ù Ø¯ÛØ±ÚÙÙ.""",
                      onPressedBritish: () => speaksentence37("en-GB"),
                      onPressedAmerican: () => speaksentence37("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """The hostages were all set free.""",
                      kurdishText: """Ø¨Ø§Ø±ÙØªÛÚ©Ø§Ù Ú¾ÛÙÙÙÛØ§Ù Ø¦Ø§Ø²Ø§Ø¯ Ú©Ø±Ø§Ù.""",
                      onPressedBritish: () => speaksentence38("en-GB"),
                      onPressedAmerican: () => speaksentence38("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """After twelve years in captivity, they were free.""",
                      kurdishText: """ÙÛ Ø¯ÙØ§Û Ù¡Ù¢ Ø³Ø§Úµ ÙÛ Ø¯ÛÙÛ Ø¦Ø§Ø²Ø§Ø¯ Ø¨ÙÙÙ.""",
                      onPressedBritish: () => speaksentence39("en-GB"),
                      onPressedAmerican: () => speaksentence39("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """She pleaded with them to let her free.""",
                      kurdishText: """ÙÛÛØ§Ù Ù¾Ø§ÚØ§ÛÛÙÛ Ø¦Ø§Ø²Ø§Ø¯Û Ø¨Ú©ÛÙ.""",
                      onPressedBritish: () => speaksentence40("en-GB"),
                      onPressedAmerican: () => speaksentence40("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù§. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ú©Û ÙÛØ¨ÛØ³ØªØ±Ø§ÙÛØªÛÙÛ ÛØ§Ù ÙÛ ÙÛÙÛØ² ÙÛÛÛ"""),
                    SentencesRow(
                      englishText: """The researchers set the birds free.""",
                      kurdishText: """ØªÙÛÚÛØ±Ø§Ù Ø¨Ø§ÚµÙØ¯ÛÚ©Ø§ÙÛØ§Ù Ø¦Ø§Ø²Ø§Ø¯ Ú©Ø±Ø¯.""",
                      onPressedBritish: () => speaksentence41("en-GB"),
                      onPressedAmerican: () => speaksentence41("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """Our livestock is free to roam.
""",
                      kurdishText: """ÙÛÚÙÙÙØ§ÚµØ§ØªÛÚ©ÛÙØ§Ù Ø¦Ø§Ø²Ø§Ø¯Ù Ø¨Û ÙÛÙÛÚØ§Ù.""",
                      onPressedBritish: () => speaksentence42("en-GB"),
                      onPressedAmerican: () => speaksentence42("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She opened the cage and let the bird fly free.""",
                      kurdishText:
                          """ÙÛÙÛØ²ÛÚ©ÛÛ Ú©Ø±Ø¯ÛÙÛ Ù Ú¾ÛØ´ØªÛ Ø¨Ø§ÚµÙØ¯ÛÚ©Û Ø¨ÙÚÛØª Ø¨Û Ø¦Ø§Ø²Ø§Ø¯Û.""",
                      onPressedBritish: () => speaksentence43("en-GB"),
                      onPressedAmerican: () => speaksentence43("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¨. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ú©Û ÚÛÚ¯Ø§Û ÙÛ ÙØ§Ú¯ÛØ±Ø¯Ø±ÛØª"""),
                    SentencesRow(
                      englishText:
                          """Ensure there is a free flow of air around the machine.""",
                      kurdishText:
                          """Ø¯ÚµÙÛØ§ Ø¨ÛØ±ÛÙÛ Ø¬ÙÙÚµÛÛ Ø¦Ø§Ø²Ø§Ø¯Û Ú¾ÛÙØ§ ÙÛ Ø¦Ø§ÙÛØ±ÛÚ©Û Ú¾ÛÛÛ.""",
                      onPressedBritish: () => speaksentence44("en-GB"),
                      onPressedAmerican: () => speaksentence44("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """The roads are relatively free today.""",
                      kurdishText: """ÚÛÚ¯Ø§Ú©Ø§Ù Ø¦ÛÙÚÛ Ú©ÛÙÛÚ© Ø¨ÛØªØ§ÚµÙ.""",
                      onPressedBritish: () => speaksentence45("en-GB"),
                      onPressedAmerican: () => speaksentence45("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù©. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ú©Û Ú©Ø§Ø±ÛÚ¯ÛØ± ÙÛÛÛ Ø¨Û Ø´ØªÛÚ©Û Ø®Ø±Ø§Ù¾"""),
                    SentencesRow(
                      englishText:
                          """Everyone deserves to live free from fear.""",
                      kurdishText: """Ú¾ÛÙÙÙ Ú©ÛØ³ Ø¯ÛØ¨ÛØª Ø¦Ø§Ø²Ø§Ø¯ ÙÛ ØªØ±Ø³ Ø¨ÚÛ.""",
                      onPressedBritish: () => speaksentence46("en-GB"),
                      onPressedAmerican: () => speaksentence46("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """It was several weeks before he was completely free of pain.""",
                      kurdishText:
                          """ÚÛÙØ¯ Ú¾ÛÙØªÛÛÛÚ©Û Ù¾ÛÚÙÙ Ù¾ÛØ´ Ø¦ÛÙÛÛ Ø¨Û ØªÛÙØ§ÙÛ Ø¨Û Ø¦Ø§Ø²Ø§Ø± Ø¨ÛØª.""",
                      onPressedBritish: () => speaksentence47("en-GB"),
                      onPressedAmerican: () => speaksentence47("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Our staff have a right to work free from violence or threats.""",
                      kurdishText:
                          """Ø³ØªØ§ÙÛÚ©ÛÙØ§Ù ÙØ§ÙÛØ§Ù Ú¾ÛÛÛ Ú©Û Ø¨ÛØ¨Û ØªÙÙØ¯ÙÙØªÛÚÛ Ù Ú¾ÛÚÛØ´Û Ú©Ø§Ø± Ø¨Ú©ÛÙ.""",
                      onPressedBritish: () => speaksentence48("en-GB"),
                      onPressedAmerican: () => speaksentence48("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The text should be totally free of mistakes.""",
                      kurdishText: """ÙÙÙØ³Ø±Ø§ÙÛÚ©Û Ø¯ÛØ¨ÛØª ØªÛÙØ§Ù Ø¨ÛØ¨Û Ú¾ÛÚµÛ Ø¨ÛØª.""",
                      onPressedBritish: () => speaksentence49("en-GB"),
                      onPressedAmerican: () => speaksentence49("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù . (Ú¾Ø§ÙÛÚµÙØ§Ù) Ø¨ÛØ¨Û Ø¦ÛÙ Ø´ØªÛÛ Ø¨Ø§Ø³Ú©Ø±Ø§ÙÛ"""),
                    SentencesRow(
                      englishText:
                          """After six months of treatment he is cancer-free.""",
                      kurdishText:
                          """Ø¯ÙØ§Û Ø´ÛØ´ ÙØ§ÙÚ¯ ÙÛ ÚØ§Ø±ÛØ³ÛØ± ÙÛ Ú©ÛØªØ§ÛÛØ¯Ø§ Ø¨ÛØ¨Û Ø´ÛØ±Ù¾ÛÙØ¬Û Ø¨ÙÙ.""",
                      onPressedBritish: () => speaksentence50("en-GB"),
                      onPressedAmerican: () => speaksentence50("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Completely pain-free childbirth is a myth.""",
                      kurdishText: """ÙÙØ¯Ø§ÚµØ¨ÙÙÙÛ ØªÛÙØ§Ù Ø¨Û Ø¦Ø§Ø²Ø§Ø± Ø¦ÛÙØ³Ø§ÙÛÛÛÚ©Û.""",
                      onPressedBritish: () => speaksentence51("en-GB"),
                      onPressedAmerican: () => speaksentence51("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He's managed to stay injury-free this season.""",
                      kurdishText:
                          """Ø¦ÛÙ ÙÛØ±Ø²Û ØªÙØ§ÙÛÙÛÛØªÛ Ø¨ÛØ¨Û Ù¾ÛÚ©Ø§Ù Ø¨ÙÛÙÛØªÛÙÛ.""",
                      onPressedBritish: () => speaksentence52("en-GB"),
                      onPressedAmerican: () => speaksentence52("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Holidays should be a relaxed, pressure-free time.""",
                      kurdishText:
                          """ÚÛÚØ§ÙÛ Ù¾Ø´ÙÙ Ø¯ÛØ¨ÛØª Ú©Ø§ØªÛ Ø¦Ø§Ø³ÙÙØ¯ÛÛ Ù Ø¨Û ÙØ´Ø§Ø±Û Ø¨ÛØª.""",
                      onPressedBritish: () => speaksentence53("en-GB"),
                      onPressedAmerican: () => speaksentence53("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """I want her time here to be happy and stress-free.""",
                      kurdishText: """Ø¯ÛÙÛÙÛØª ÙÛØ±Û Ø¯ÚµØ®ÛØ´ Ù Ø¨Û Ø³ØªØ±ÛØ³ Ø¨ÛØª.""",
                      onPressedBritish: () => speaksentence54("en-GB"),
                      onPressedAmerican: () => speaksentence54("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù¡. (Ú¾Ø§ÙÛÚµÙØ§Ù) Ú©Û ÙÛØ¨ÛØ³ØªØ±Ø§ÙÛ Ø¨Û Ø´ØªÛÚ©ÛÙÛ"""),
                    SentencesRow(
                      englishText:
                          """Pull gently on the free end of the rope.""",
                      kurdishText: """Ø¨Û Ú¾ÛÙØ§Ø´Û ÙØ§ Ú©Ø§Ø±ÙÛÚ©ÛÛ Ø­ÛØ¨ÙÛÚ©Û ÚØ§Ø¨Ú©ÛØ´Û.""",
                      onPressedBritish: () => speaksentence55("en-GB"),
                      onPressedAmerican: () => speaksentence55("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She finally managed to pull herself free.""",
                      kurdishText: """ÙÛ Ú©ÛØªØ§ÛÛØ¯Ø§ ØªÙØ§ÙÛ Ø®ÛÛ Ø¦Ø§Ø²Ø§Ø¯ Ø¨Ú©Ø§Øª.""",
                      onPressedBritish: () => speaksentence56("en-GB"),
                      onPressedAmerican: () => speaksentence56("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """They tied him up but he managed to get free.""",
                      kurdishText: """Ø¨ÛØ³ØªÛØ§ÙÛÙÛ Ø¨ÛÚµØ§Ù ØªÙØ§ÙÛ Ø®ÛÛ Ø¨Ú©Ø§ØªÛÙÛ.""",
                      onPressedBritish: () => speaksentence57("en-GB"),
                      onPressedAmerican: () => speaksentence57("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """The dog had broken free of its chain.""",
                      kurdishText: """Ø³ÛÚ¯ÛÚ©Û Ø®ÛÛ ÙÛ Ø²ÙØ¬ÛØ±ÛÚ©ÛÛ ÚØ²Ú¯Ø§Ø± Ú©Ø±Ø¯Ø¨ÙÙ.""",
                      onPressedBritish: () => speaksentence58("en-GB"),
                      onPressedAmerican: () => speaksentence58("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù¢. (Ú¾Ø§ÙÛÚµÚ©Ø§Ø±) Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ±"""),
                    SentencesRow(
                      englishText: """Children under five travel free.""",
                      kurdishText:
                          """ÙÙØ¯Ø§ÚµØ§ÙÛ Ø®ÙØ§Ø± Ù¾ÛÙØ¬ Ø³Ø§Úµ Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ± Ú¯ÛØ´Øª Ø¯ÛÚ©ÛÙ.""",
                      onPressedBritish: () => speaksentence59("en-GB"),
                      onPressedAmerican: () => speaksentence59("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """You can download the app for free.""",
                      kurdishText: """Ø¯ÛØªÙØ§ÙÛØª Ø¦ÛÙ¾ÛÚ©Û Ø¨ÛâØ¨ÛØ±Ø§ÙØ¨ÛØ± Ø¯Ø§Ø¨ÛØ²ÛÙÛØª.""",
                      onPressedBritish: () => speaksentence60("en-GB"),
                      onPressedAmerican: () => speaksentence60("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù£. (Ú¾Ø§ÙÛÚµÚ©Ø§Ø±) Ú©Û ÙÛØ¨ÛØ³ØªØ±Ø§ÙÛØªÛÙÛ"""),
                    SentencesRow(
                      englishText:
                          """Attach the top and let the ends hang free.""",
                      kurdishText:
                          """Ø³ÛØ±ÛÙÛÛ Ø¨Ø¨ÛØ³ØªÛÙÛ Ø¨Ú¾ÛÚµÛ Ú©ÛØªØ§ÛÛÛÚ©Ø§Ù Ø¨Û Ø¦Ø§Ø²Ø§Ø¯Û Ø´ÛÚØ¨Ø¨ÙÛÙÛ.""",
                      onPressedBritish: () => speaksentence61("en-GB"),
                      onPressedAmerican: () => speaksentence61("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """Her long hair hung free down her back.""",
                      kurdishText:
                          """ÙÚÛ Ø¯Ø±ÛÚÛÚ©ÛÛ Ø¨Û Ø¦Ø§Ø²Ø§Ø¯Û Ø¨Û Ù¾Ø´ØªÛØ¯Ø§ Ø´ÛÚØ¨ÙÙØ¨ÙÙÛÛÙÛ.""",
                      onPressedBritish: () => speaksentence62("en-GB"),
                      onPressedAmerican: () => speaksentence62("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ù¡Ù¤. (Ú©Ø±Ø¯Ø§Ø±) Ø¦Ø§Ø²Ø§Ø¯Ú©Ø±Ø¯Ù"""),
                    const AlsoEnglishckb(word: "Ú¾ÛØ±ÙÛÚ¾Ø§: release"),
                    SentencesRow(
                      englishText:
                          """The hijackers agreed to free a further ten hostages.""",
                      kurdishText:
                          """ÚÙÛÙÛØ±Ø§Ù ÚØ§Ø²Û Ø¨ÙÙÙ Ø¨Ø§Ø±ÙØªÛÛ Ø²ÛØ§ØªØ± Ø¦Ø§Ø²Ø§Ø¯ Ø¨Ú©ÛÙ.""",
                      onPressedBritish: () => speaksentence63("en-GB"),
                      onPressedAmerican: () => speaksentence63("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She led an armed mission that freed 700 slaves.""",
                      kurdishText:
                          """Ø³ÛØ±Ù¾ÛØ±Ø´ØªÛÛ Ø¦ÛØ±Ú©ÛÚ©Û Ø³ÛØ±Ø¨Ø§Ø²Û Ú©Ø±Ø¯ Ú©Û Ù§Ù Ù  Ú©ÛÛÙÛÛ Ø¦Ø§Ø²Ø§Ø¯ Ú©Ø±Ø¯.""",
                      onPressedBritish: () => speaksentence64("en-GB"),
                      onPressedAmerican: () => speaksentence64("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """They succeeded in freeing their friends from prison.""",
                      kurdishText:
                          """Ø³ÛØ±Ú©ÛÙØªÙÙ Ø¨ÙÙÙ ÙÛ Ø¦Ø§Ø²Ø§Ø¯Ú©Ø±Ø¯ÙÛ Ú¾Ø§ÙÚÛÚ©Ø§ÙÛØ§Ù ÙÛ Ø²ÛÙØ¯Ø§Ù.""",
                      onPressedBritish: () => speaksentence65("en-GB"),
                      onPressedAmerican: () => speaksentence65("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """They're launching a campaign to free the three men.""",
                      kurdishText:
                          """Ú©ÛÙÙ¾ÛÙÛÚ© Ø¯ÛØ³Øª Ù¾ÛØ¯ÛÚ©ÛÙ Ø¨Û Ø¦Ø§Ø²Ø§Ø¯Ú©Ø±Ø¯ÙÛ Ø³Û Ú©ÛØ³ÛÚ©Û.""",
                      onPressedBritish: () => speaksentence66("en-GB"),
                      onPressedAmerican: () => speaksentence66("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¡Ù¥. (Ú©Ø±Ø¯Ø§Ø±) ÚØ²Ú¯Ø§Ø±Ú©Ø±Ø¯ÙÛ Ú©ÛØ³ÛÚ© Ú©Û Ú¯ÛØ±Û Ú©Ø±Ø¯ÙÙÛ ÙÛ Ø´ØªÛÚ© ÛØ§Ù Ø¨ÛØ³ØªØ±Ø§ÙÛØªÛÙÛ"""),
                    const AlsoEnglishckb(word: "Ú¾ÛØ±ÙÛÚ¾Ø§: release"),
                    SentencesRow(
                      englishText: """She struggled to free herself.""",
                      kurdishText: """ØªÛÙÛÚµØ§Û Ø¨ÙÙ Ú©Û Ø®ÛÛ Ø¦Ø§Ø²Ø§Ø¯ Ø¨Ú©Ø§Øª.""",
                      onPressedBritish: () => speaksentence67("en-GB"),
                      onPressedAmerican: () => speaksentence67("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Three people were freed from the wreckage.""",
                      kurdishText: """Ø³Û Ú©ÛØ³ ÙÛ Ù¾Ø§Ø´ÙØ§ÙÛÚ©Û ÚØ²Ú¯Ø§Ø± Ú©Ø±Ø§Ù  .""",
                      onPressedBritish: () => speaksentence68("en-GB"),
                      onPressedAmerican: () => speaksentence68("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¡Ù¦. (Ú©Ø±Ø¯Ø§Ø±) ÙÛÚ¾ÛØ´ØªÙÛ Ø´ØªÛÚ©Û ÙØ§Ø®ÛØ´Û Ú©ÛØ³ÛÚ©/Ø´ØªÛÚ©"""),
                    const AlsoEnglishckb(word: "Ú¾ÛØ±ÙÛÚ¾Ø§: rid"),
                    SentencesRow(
                      englishText:
                          """These exercises help free the body of tension.""",
                      kurdishText:
                          """Ø¦ÛÙ ÚØ§Ú¾ÛÙØ§ÙØ§ÙÛ Ø¯ÛÚ©Ø±ÛØª Ø¬ÛØ³ØªÛ ÙÛ ÙØ´Ø§Ø± ÚØ²Ú¯Ø§Ø± Ø¨Ú©ÛÙ.""",
                      onPressedBritish: () => speaksentence69("en-GB"),
                      onPressedAmerican: () => speaksentence69("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The police are determined to free the town of violent crime.""",
                      kurdishText:
                          """Ù¾ÛÙÛØ³ Ø³ÙÙØ±Ù ÙÛØ³ÛØ± ÚØ²Ú¯Ø§Ø±Ú©Ø±Ø¯ÙÛ Ø´Ø§Ø±ÛÚ©Û ÙÛ ØªØ§ÙØ§ÙÛ ØªÙÙÙØ¯ÙÙØªÛÚÛ.""",
                      onPressedBritish: () => speaksentence70("en-GB"),
                      onPressedAmerican: () => speaksentence70("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The centre aims to free young people from dependency on drugs.""",
                      kurdishText:
                          """Ø³ÛÙØªÛØ±ÛÚ©Û Ø¦Ø§ÙØ§ÙØ¬ÛÛØªÛ Ú¯ÛÙØ¬Ø§Ù ÚØ²Ú¯Ø§Ø± Ø¨Ú©Ø§Øª ÙÛÙÛÛ Ù¾Ø´Øª Ø¨Û ÙØ§Ø¯ÛÛ Ú¾ÛØ´Ø¨ÛØ± Ø¨Ø¨ÛØ³ØªÙ.""",
                      onPressedBritish: () => speaksentence71("en-GB"),
                      onPressedAmerican: () => speaksentence71("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¡Ù§. (Ú©Ø±Ø¯Ø§Ø±) Ø¦ÛÙÛÛ Ø´ØªÛÚ© Ø¨ÛØ±Ø¯ÛØ³Øª Ø¨Ø®ÛÛØª Ø¨Û ÙÛØ¨ÛØ³ØªÛÚ©Û Ø¯ÛØ§Ø±ÛÚ©Ø±Ø§Ù"""),
                    SentencesRow(
                      englishText:
                          """We freed time each week for a project meeting.""",
                      kurdishText:
                          """Ú¾ÛØ± Ú¾ÛÙØªÛÛÛÚ© Ú©Ø§ØªÙØ§Ù Ø¨Û Ù¾ÚÛÚÛÚ©Û Ø¯ÛÚ¾ÛØ´ØªÛÙÛ.""",
                      onPressedBritish: () => speaksentence72("en-GB"),
                      onPressedAmerican: () => speaksentence72("en-US"),
                    ),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The government has promised to free up more resources for education.""",
                      kurdishText:
                          """Ø­Ú©ÙÙÛØª Ø¨ÛÚµÛÙÛ Ø¯Ø§ÙÛ Ø³ÛØ±ÚØ§ÙÛÛ Ø²ÛØ§ØªØ± Ø¨Û Ø®ÙÛÙØ¯Ù ØªÛØ±Ø®Ø§Ù Ø¨Ú©Ø§Øª.""",
                      onPressedBritish: () => speaksentence73("en-GB"),
                      onPressedAmerican: () => speaksentence73("en-US"),
                    ),
                  ],
                ),
              ),
              Consumer(
                builder: (context, ref, child) {
                  if (filteredSentences.isEmpty) {
                    return const NoSentencesFromDatabase();
                  } else {
                    return ListView.builder(
                      itemCount: filteredSentences.length,
                      itemBuilder: (context, index) {
                        final sentence = filteredSentences[index];
                        final showDivider = filteredSentences.length > 1 &&
                            index != filteredSentences.length - 1;
                        return CustomSentenceWidget(
                          englishText: sentence['english'].toString(),
                          frenchText: sentence['french'].toString(),
                          keyword: keyword,
                          onPressedBritish: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-GB",
                          ),
                          onPressedAmerican: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-US",
                          ),
                          showDivider: showDivider,
                        );
                      },
                    );
                  }
                },
              ),
              const YouTubeScroller(
                children: [
                  YoutubeEmbeddedone(),
                  YoutubeEmbeddedtwo(),
                  YoutubeEmbeddedthree(),
                  YoutubeEmbeddedfour(),
                  YoutubeEmbeddedfive(),
                  // YoutubeEmbeddedsix(),
                  // YoutubeEmbeddedseven(),
                  // YoutubeEmbeddedeight(),
                  // YoutubeEmbeddednine(),
                  // YoutubeEmbeddedten(),
                  // YoutubeEmbeddedeleven(),
                  // YoutubeEmbeddedtwelve(),
                  // YoutubeEmbeddedthirteen(),
                  // YoutubeEmbeddeddfourteen(),
                  // YoutubeEmbeddedfifteen(),
                  // YoutubeEmbeddeddsixteen(),
                  // YoutubeEmbeddeddseventeen(),
                  // YoutubeEmbeddeddeighteen(),
                  // YoutubeEmbeddeddnineteen(),
                  // YoutubeEmbeddedtwenty(),
                  // YoutubeEmbeddedmulti(),
                  YoutubeEmbeddedend(),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

const String _videoIdend = 'fg8Cpl5PIRE';
const double _startSecondsend = 0;
const String _videoIdone = 'nE8nQZPfYpY';
const double _startSecondsone = 345;
const String _videoIdtwo = 'hFZFjoX2cGg';
const double _startSecondstwo = 1107;
const String _videoIdthree = '3C0BdIn6Hdo';
const double _startSecondsthree = 465;
const String _videoIdfour = 'tnzz-eFmKaw';
const double _startSecondsfour = 237;
const String _videoIdfive = 'JqDf1X2eIbE';
const double _startSecondsfive = 62;

class YoutubeEmbeddedend extends StatelessWidget {
  const YoutubeEmbeddedend({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdend,
      startSeconds: _startSecondsend,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdend,
        startSeconds: _startSecondsend,
      );
    }

    return YouTubeVideosScaffoldEnd(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedone extends StatelessWidget {
  const YoutubeEmbeddedone({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdone,
      startSeconds: _startSecondsone,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdone,
        startSeconds: _startSecondsone,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedtwo extends StatelessWidget {
  const YoutubeEmbeddedtwo({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdtwo,
      startSeconds: _startSecondstwo,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdtwo,
        startSeconds: _startSecondstwo,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedthree extends StatelessWidget {
  const YoutubeEmbeddedthree({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdthree,
      startSeconds: _startSecondsthree,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdthree,
        startSeconds: _startSecondsthree,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedfour extends StatelessWidget {
  const YoutubeEmbeddedfour({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdfour,
      startSeconds: _startSecondsfour,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdfour,
        startSeconds: _startSecondsfour,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedfive extends StatelessWidget {
  const YoutubeEmbeddedfive({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdfive,
      startSeconds: _startSecondsfive,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdfive,
        startSeconds: _startSecondsfive,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

// end WORD_WEB