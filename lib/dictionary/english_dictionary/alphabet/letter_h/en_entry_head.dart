import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:zeetionary/constants.dart';

enum TtsState { playing }

class EnglishEntryhead extends StatefulWidget {
  const EnglishEntryhead({super.key});

  @override
  State<EnglishEntryhead> createState() => _EnglishEntryheadState();
}

class _EnglishEntryheadState extends State<EnglishEntryhead> {
  @override
  void initState() {
    super.initState();
    flutterTts = FlutterTts();
    flutterTts.setLanguage("en-GB");
    flutterTts.setLanguage("en-US");
    fetchSentences();
  }

  FlutterTts flutterTts = FlutterTts();

  bool isSpeaking = false;

  Future<void> startSpeaking(
      String languageCode, EnglishMeaningConst englishMeaningConst) async {
    String textToSpeak = """
${englishMeaningConst.text}
""";

    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(textToSpeak);

    setState(() {
      isSpeaking = true;
    });
  }

  Future<void> stopSpeaking() async {
    await flutterTts.stop();

    setState(() {
      isSpeaking = false;
    });
  }

  final EnglishMeaningConst englishMeaningConst = const EnglishMeaningConst(
    text: """
- Noun: head (Derived forms: heads)
1. The upper part of the human body or the front part of the body in animals; contains the face and brains (- caput [technical], bean [informal], bonce [Brit, informal], noodle [informal], noggin [informal], dome [informal], nob [informal], napper [Brit, informal], skull [informal], nut [informal])
"he stuck his head out the window";
 
2. That which is responsible for one's thoughts, feelings, and conscious brain functions; the seat of the faculty of reason (- mind, brain, loaf [Brit, informal])
"I couldn't get his words out of my head";
 
3. A person who is in charge (- chief, top dog [informal])
"the head of the whole operation";
 
4. A single domestic animal
"200 head of cattle"
 
5. (military) the front of a military formation or procession
"the head of the column advanced boldly"; "they were at the head of the attack"
 
6. The pressure exerted by a fluid
"a head of steam"
 
7. The top of something
"the head of the stairs"; "the head of the page"; "the head of the list"
 
8. The source of water from which a stream arises (- fountainhead, headspring)
"they tracked him back toward the head of the stream";
 
9. (grammar) the word in a grammatical constituent that plays the same grammatical role as the whole constituent (- head word)
 
10. The tip of an abscess (where the pus accumulates)
 
11. The length or height based on the size of a human or animal head
"he is two heads taller than his little sister"; "his horse won by a head"
 
12. A dense cluster of flowers or foliage (- capitulum)
"a head of lettuce";
 
13. The educator who has executive authority for a school (- principal, school principal, head teacher)
"she sent unruly pupils to see the head";
 
14. An individual person
"tickets are Â£5 per head"
 
15. A user of (usually soft) drugs
"the office was full of secret heads"
 
16. A natural elevation (especially a rocky one that juts out into the sea) (- promontory, headland, foreland)
 
17. A rounded compact mass
"the head of a comet"
 
18. The foam or froth that accumulates at the top when you pour an effervescent liquid into a container
"the beer had a large head of foam"
 
19. The part in the front or nearest the viewer (- forefront)
"he was at the head of the column";
 
20. A difficult juncture (- pass, straits)
"matters came to a head yesterday";
 
21. Forward movement (- headway)
"the ship made little head against the gale";
 
22. A V-shaped mark at one end of an arrow pointer (- point)
"the head of the arrow was due north";
 
23. The subject matter at issue (- question)
"under the head of minor Roman poets";
 
24. A line of text serving to indicate what the passage below it is about (- heading, header)
 
25. The rounded end of a bone that fits into a rounded cavity in another bone to form a joint
"the head of the humerus"
 
26. That part of a skeletal muscle that is away from the bone that it moves
 
27. (computing) a tiny electromagnetic coil and metal pole used to write and read magnetic patterns on a disk (- read/write head)
 
28. (usually plural) the obverse side of a coin that usually bears the representation of a person's head
"call heads or tails!"
 
29. The striking part of a tool
"the head of the hammer"
 
30. (nautical) a toilet on board a boat or ship
 
31. A projection out from one end
"the head of the nail"; "a pinhead is the head of a pin"
 
32. A membrane that is stretched taut over a drum (- drumhead)
 
33. [vulgar] Oral stimulation of the genitals (- oral sex)
"they say he gives good head";
 
34. A headlike protuberance on an organ or structure (- caput [technical])
"the caput humeri is the head of the humerus which fits into a cavity in the scapula";

- Verb: head (Derived forms: heads, heading, headed)
1. To go or travel towards
"where is she heading"; "We were headed for the mountains"
 
2. Be in charge of (- lead)
"Who is heading this project?";
 
3. Travel in front of; go in advance of others (- lead)
"The procession was headed by John";
 
4. Be the first or leading member of (a group) and excel (- head up)
"This student heads the class";
 
5. Determine the direction of travelling (- steer, maneuver [US], manoeuver [non-standard], manoeuvre [Brit, Cdn], direct, point, guide, channelize, channelise [Brit])

6. Take its rise
"These rivers head from a mountain range in the Himalayas"
 
7. Be in the front of or on top of
"The list was headed by the name of the president"
 
8. Form a head, come or grow to a head
"The wheat headed early this year"
 
9. Remove the head of
"head the fish"
""",
  );

  final String keyword = "head";
  List<Map<String, dynamic>> filteredSentences = [];

  Future<void> fetchSentences() async {
    final sentences =
        await DatabaseUtils.instance.fetchFilteredSentences(keyword: keyword);
    setState(() {
      filteredSentences = sentences;
    });
  }

  void speakEnglish(String text, {String? languageCode}) async {
    await flutterTts.setLanguage(languageCode ?? "en-GB");
    await flutterTts.speak(text);
  }

  Future<void> speakheadword(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""head""");
  }

  Future<void> speaksentence1(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """Her head was filled with the clamour of voices calling her name.""");
  }

  Future<void> speaksentence2(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""He had a closely shaved head and a small, neat beard.""");
  }

  Future<void> speaksentence3(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Try not to clutter your head with trivia.""");
  }

  Future<void> speaksentence4(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""She cocked her head to one side and looked at me.""");
  }

  Future<void> speaksentence5(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""As he fell, his head collided with the table.""");
  }

  Future<void> speaksentence6(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He stood up, bashing his head on the ceiling.""");
  }

  Future<void> speaksentence7(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""My head banged on a rock and everything went black.""");
  }

  Future<void> speaksentence8(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She had injuries to her head and body.""");
  }

  Future<void> speaksentence9(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She bowed her head in shame.""");
  }

  Future<void> speaksentence10(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""She gave a slight bow of her head in greeting.""");
  }

  Future<void> speaksentence11(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """When his head broke the surface he took in deep gulps of air.""");
  }

  Future<void> speaksentence12(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""I bumped my head on the door frame.""");
  }

  Future<void> speaksentence13(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""A butt from his head left him momentarily disorientated.""");
  }

  Future<void> speaksentence14(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""He conked the burglar on the head with a baseball bat.""");
  }

  Future<void> speaksentence15(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """The assailant struck the victim over the head with a cosh.""");
  }

  Future<void> speaksentence16(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""He hit his head as he stood up and cursed loudly.""");
  }

  Future<void> speaksentence17(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She had fallen and cut her head open.""");
  }

  Future<void> speaksentence18(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He shook his head in disapproval.""");
  }

  Future<void> speaksentence19(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""I sometimes wonder what goes on in that head of yours.""");
  }

  Future<void> speaksentence20(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""I wish you'd use your head.""");
  }

  Future<void> speaksentence21(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The thought never entered my head.""");
  }

  Future<void> speaksentence22(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""I can't work it out in my headâI need a calculator.""");
  }

  Future<void> speaksentence23(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She started hearing voices in her head.""");
  }

  Future<void> speaksentence24(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""Who's been putting such weird ideas into your head?""");
  }

  Future<void> speaksentence25(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""His head was spinning after only one drink.""");
  }

  Future<void> speaksentence26(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She's a good head taller than her sister.""");
  }

  Future<void> speaksentence27(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The favourite won by a short head.""");
  }

  Future<void> speaksentence28(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""I woke up with a really bad head this morning.""");
  }

  Future<void> speaksentence29(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""She resigned as head of department.""");
  }

  Future<void> speaksentence30(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""I've asked the department head for an appointment.""");
  }

  Future<void> speaksentence31(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He is deputy head of the British Museum.""");
  }

  Future<void> speaksentence32(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He is only the nominal head of the company.""");
  }

  Future<void> speaksentence33(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""I've been called in to see the Head.""");
  }

  Future<void> speaksentence34(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak(
        """I remember sitting outside the Head's office waiting to be called in.""");
  }

  Future<void> speaksentence35(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""I called heads and it came down tails.""");
  }

  Future<void> speaksentence36(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""He hit the head of the nail with the hammer.""");
  }

  Future<void> speaksentence37(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""They finished the season at the head of their league.""");
  }

  Future<void> speaksentence38(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""The head of the river is often clear and fresh.""");
  }

  Future<void> speaksentence39(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The President sat at the head of the table.""");
  }

  Future<void> speaksentence40(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The prince rode at the head of his regiment.""");
  }

  Future<void> speaksentence41(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""Remove the dead heads to encourage new growth.""");
  }

  Future<void> speaksentence42(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""He waited for the head to settle before drinking.""");
  }

  Future<void> speaksentence43(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The pimple had a small white head.""");
  }

  Future<void> speaksentence44(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Where are we heading?""");
  }

  Future<void> speaksentence45(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Where are you two headed?""");
  }

  Future<void> speaksentence46(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Let's head back home.""");
  }

  Future<void> speaksentence47(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""We headed north.""");
  }

  Future<void> speaksentence48(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts
        .speak("""She has been appointed to head the research team.""");
  }

  Future<void> speaksentence49(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The delegation will be headed by Lord Arthur.""");
  }

  Future<void> speaksentence50(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Italy heads the table after two games.""");
  }

  Future<void> speaksentence51(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""The chapter was headed âMy Early Lifeâ.""");
  }

  Future<void> speaksentence52(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""Walsh headed the ball into an empty goal.""");
  }

  Future<void> speaksentence53(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence5300""");
  }

  Future<void> speaksentence54(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence5400""");
  }

  Future<void> speaksentence55(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence5500""");
  }

  Future<void> speaksentence56(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence5600""");
  }

  Future<void> speaksentence57(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence5700""");
  }

  Future<void> speaksentence58(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence5800""");
  }

  Future<void> speaksentence59(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence5900""");
  }

  Future<void> speaksentence60(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_6000""");
  }

  Future<void> speaksentence61(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence6100""");
  }

  Future<void> speaksentence62(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence6200""");
  }

  Future<void> speaksentence63(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence6300""");
  }

  Future<void> speaksentence64(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence6400""");
  }

  Future<void> speaksentence65(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence6500""");
  }

  Future<void> speaksentence66(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence6600""");
  }

  Future<void> speaksentence67(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence6700""");
  }

  Future<void> speaksentence68(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence6800""");
  }

  Future<void> speaksentence69(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence6900""");
  }

  Future<void> speaksentence70(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_7000""");
  }

  Future<void> speaksentence71(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence7100""");
  }

  Future<void> speaksentence72(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence7200""");
  }

  Future<void> speaksentence73(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence7300""");
  }

  Future<void> speaksentence74(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence7400""");
  }

  Future<void> speaksentence75(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence7500""");
  }

  Future<void> speaksentence76(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence7600""");
  }

  Future<void> speaksentence77(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence7700""");
  }

  Future<void> speaksentence78(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence7800""");
  }

  Future<void> speaksentence79(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence7900""");
  }

  Future<void> speaksentence80(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_8000""");
  }

  Future<void> speaksentence81(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence8100""");
  }

  Future<void> speaksentence82(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence8200""");
  }

  Future<void> speaksentence83(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence8300""");
  }

  Future<void> speaksentence84(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence8400""");
  }

  Future<void> speaksentence85(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence8500""");
  }

  Future<void> speaksentence86(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence8600""");
  }

  Future<void> speaksentence87(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence8700""");
  }

  Future<void> speaksentence88(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence8800""");
  }

  Future<void> speaksentence89(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence8900""");
  }

  Future<void> speaksentence90(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_9000""");
  }

  Future<void> speaksentence91(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence9100""");
  }

  Future<void> speaksentence92(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence9200""");
  }

  Future<void> speaksentence93(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence9300""");
  }

  Future<void> speaksentence94(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence9400""");
  }

  Future<void> speaksentence95(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence9500""");
  }

  Future<void> speaksentence96(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence9600""");
  }

  Future<void> speaksentence97(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence9700""");
  }

  Future<void> speaksentence98(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence9800""");
  }

  Future<void> speaksentence99(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence9900""");
  }

  Future<void> speaksentence100(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence__10000""");
  }

  Future<void> speaksentence101(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_10100""");
  }

  Future<void> speaksentence102(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_10200""");
  }

  Future<void> speaksentence103(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_10300""");
  }

  Future<void> speaksentence104(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_10400""");
  }

  Future<void> speaksentence105(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_10500""");
  }

  Future<void> speaksentence106(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_10600""");
  }

  Future<void> speaksentence107(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_10700""");
  }

  Future<void> speaksentence108(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_10800""");
  }

  Future<void> speaksentence109(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_10900""");
  }

  Future<void> speaksentence110(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11000""");
  }

  Future<void> speaksentence111(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11100""");
  }

  Future<void> speaksentence112(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11200""");
  }

  Future<void> speaksentence113(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11300""");
  }

  Future<void> speaksentence114(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11400""");
  }

  Future<void> speaksentence115(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11500""");
  }

  Future<void> speaksentence116(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11600""");
  }

  Future<void> speaksentence117(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11700""");
  }

  Future<void> speaksentence118(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11800""");
  }

  Future<void> speaksentence119(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_11900""");
  }

  Future<void> speaksentence120(String languageCode) async {
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(ttsPitch);
    await flutterTts.setSpeechRate(ttsSpeechRate);
    await flutterTts.speak("""speaksentence_12000""");
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 4,
      child: Scaffold(
        appBar: const ZeetionaryAppbar(),
        body: NestedScrollView(
          headerSliverBuilder: (context, innerBoxIsScrolled) {
            return [
              CustomSliverAppBar(
                flexibleSpace: FlexibleSpaceBar(
                  background: SingleChildScrollView(
                    child: EntryPageColumn(
                      word: """head""",
                      // alsoEnglishWord: "also: head",
                      britshText: """IpaUK: /hed/""",
                      americanText: """IpaUS: /hed/""",
                      onPressedBritish: () => speakheadword("en-GB"),
                      onPressedAmerican: () => speakheadword("en-US"),
                    ),
                  ),
                ),
                bottom: const TabBar(
                  tabs: [
                    UkIconForTab(),
                    KurdIconForTab(),
                    SentencesIconForTab(),
                    VideoIconForTab(),
                  ],
                ),
              ),
            ];
          },
          body: TabBarView(
            children: [
              SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const DividerDefinition(),
                    EnglishButtonTTS(
                      onBritishPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onAmericanPressed: (languageCode) =>
                          startSpeaking(languageCode, englishMeaningConst),
                      onStopPressed: stopSpeaking,
                    ),
                    englishMeaningConst,
                  ],
                ),
              ),
              SingleChildScrollView(
                child: CustomColumnWidget(
                  children: [
                    const DividerDefinition(),
                    const KurdishVocabulary(text: """
Ú©ÙØ±Ø¯Û: Ø³ÛØ±Ø Ú©ÛÙÛØ Ú©ÛÙÙÛØ Ø³ÛÙÚ©Ø ÙÛØ´Ú©Ø	ÙØ§ÙÛØ±ÙÛ Ø³ÛØ±ÛØ´ÛØ ÚØ§ÙÛØ³ÛØ±Ø	Ø³ÛØ±ÙÙØ ÚÙÙØ±Ø Ø¨Ø§ÙØ ÙÛØ³ÛØ±ÙÙÛØ ÙÛÚÙÙØ±Ø Ù¾ÛØ´Ø ÙÛÙ¾ÛØ´Ø ÙÙÙÚ©Ø	Ø¦ÛÙÚµØ ÙØ§ÙØ Ø¦Ø§ÙÛØ²Ø Ø®ÛÛØ§ÚµâÚ©Ø±Ø¯ÙÛÙÛØ Ø¨ÛØ±Ø ÙØ²Ø±Ø ØªÛÚ¯ÛÛØ´ØªÙØ ØªÙØ§ÙØ§ÛÛØ Ø¨ÛÙØ±ÛØ	Ø¨Ø§Ø¨ÛØªØ Ø¨Ø§Ø±ÛØ Ø¨Ø§Ø³Ø ÙÚØ§Ø±Ø ÚÛØ¨ÛØ±Ø§ÙØ Ø³ÛØ±Ø§ÙØ	Ø³ÛØ±ÛÚ©Ø Ø¨ÛÚÛÙÛØ¨ÛØ±Ø Ø¨ÛÚÛÙÛØ¨ÛØ±Û Ø®ÙÛÙØ¯ÙÚ¯Ø§ ÛØ§Ù Ø¯ÛØ²Ú¯Ø§ÛÛØ Ú¯ÛÙØ±ÛØ Ø³ÛØ±Ù¾ÛØ±Ø´ØªØ ÚÛØ¨ÛØ±Ø Ø³Ø§ÙØ§Ø±Ø Ø³ÛØ±Ø¯Ø§Ø±Ø Ø³ÛØ±ÙÛØ±Ø Ø³ÛØ±Ú¯ÛÙØ±ÛØ	Ú©ÛØ³Ø ÛÛÚ©ÛØ Ø¯Ø§ÙÛØ	(Ø¦Ø§ÚÛÚµ) Ø³ÛØ±Ø ÚÙØ§Ø±ÛØ	Ù¾ÛØ´Û Ú©ÛØ´ØªÛØ Ø³ÛØ± ÛØ§Ù Ù¾ÛØ´ÛÙÛÛ Ú©ÛØ´ØªÛØ Ø³ÛØ±Ú©Ø ÙÙÙØªÚ©ÛØ	Ø³ÛØ±Ø¯ÛÚØ Ø¨ÛØ´Ø Ù¾Ø´Ú©Ø Ù¾Ø§Ø±ÚÛØ	(ÚÙÙØ¨Ø§Ø±) Ø¨ÛØ´Û Ø³ÛØ±ÙÙØ Ú©ÛÙØ	(Ú¤ÛØ¯ÛÛ Ù ÙØªØ¯) ÙÛØ¯Ø	(Ø²ÙØ§ÙÛÙØ§ÙÛ) ÙØ§ÙÚ©
"""),
// With short examples define "head", please follow LX instructions
                    const DefinitionKurdish(text: """Ù¡. (ÙØ§Ù) Ø³ÛØ±"""),
                    SentencesRow(
                      englishText:
                          """He had a closely shaved head and a small, neat beard.""",
                      kurdishText:
                          "ÙÚÛÚ©Û Ø²ÛØ± Ø¨ÚØ¯Ø±Ø§ÙÛ Ú¾ÛØ¨ÙÙ ÙÛÚ¯ÛÚµ ÚÛØ´ÛÚ©Û Ú©ÙØ±Øª Ù ÚÛÚ©âÙÙ¾ÛÚ©.",
                      onPressedBritish: () => speaksentence2("en-GB"),
                      onPressedAmerican: () => speaksentence2("en-US"),
                    ),
                    Column(
                      children: [
                        MyExpansionTile(
                          children: [
                            SentencesRow(
                              englishText:
                                  """She cocked her head to one side and looked at me.""",
                              kurdishText:
                                  "Ø³ÛØ±Û Ø¨Û ÙØ§ÛÛÚ©Ø¯Ø§ Ø¨ÛØ±Ø²Ú©Ø±Ø¯ÛÙÛ Ù Ø³ÛÛØ±ÙÛ Ú©Ø±Ø¯.",
                              onPressedBritish: () => speaksentence4("en-GB"),
                              onPressedAmerican: () => speaksentence4("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """As he fell, his head collided with the table.""",
                              kurdishText: "Ú©Û Ú©ÛÙØªØ Ø³ÛØ±Û Ú©ÛØ´Ø§Û Ø¨Û ÙÛØ²ÛÚ©ÛØ¯Ø§.",
                              onPressedBritish: () => speaksentence5("en-GB"),
                              onPressedAmerican: () => speaksentence5("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """He stood up, bashing his head on the ceiling.""",
                              kurdishText:
                                  "Ú¾ÛØ³ØªØ§ÛÛ Ø³ÛØ±Ù¾Û Ù Ø³ÛØ±Û Ú©ÛØ´Ø§Û Ø¨Û Ø³ÛÙÙÛÚ©ÛØ¯Ø§.",
                              onPressedBritish: () => speaksentence6("en-GB"),
                              onPressedAmerican: () => speaksentence6("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """My head banged on a rock and everything went black.""",
                              kurdishText:
                                  "Ø³ÛØ±Ù Ø¯Ø§Û Ø¨Û Ø¨ÛØ±Ø¯ÛÚ©Ø¯Ø§ Ù Ú¾ÛÙÙÙ Ø´ØªÛÚ© ØªØ§Ø±ÛÚ© Ø¨ÙÙ.",
                              onPressedBritish: () => speaksentence7("en-GB"),
                              onPressedAmerican: () => speaksentence7("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """She had injuries to her head and body.""",
                              kurdishText: "Ø¨Ø±ÛÙÛ Ú¾ÛØ¨ÙÙ ÙÛØ³ÛØ± Ø³ÛØ±Û Ù Ø¬ÛØ³ØªÛÛ.",
                              onPressedBritish: () => speaksentence8("en-GB"),
                              onPressedAmerican: () => speaksentence8("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText: """She bowed her head in shame.""",
                              kurdishText: "ÙÛ Ø´ÛØ±ÙØ¯Ø§ Ø³ÛØ±Û Ø¯ÛÙÛÙØ§ÙØ¯.",
                              onPressedBritish: () => speaksentence9("en-GB"),
                              onPressedAmerican: () => speaksentence9("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """She gave a slight bow of her head in greeting.""",
                              kurdishText:
                                  "Ø³ÛØ±Û Ø¨Û Ú©ÛÙÛ ÚÛÙØ§ÙØ¯ÛÙÛ Ø¨Û Ø³ÚµØ§ÙÚ©Ø±Ø¯Ù.",
                              onPressedBritish: () => speaksentence10("en-GB"),
                              onPressedAmerican: () => speaksentence10("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """When his head broke the surface he took in deep gulps of air.""",
                              kurdishText:
                                  "Ú©Û Ø³ÛØ±Û Ø¯ÛØ±Ú©Ø±Ø¯ ÙÛ Ø¦Ø§ÙÛÚ©Û Ú¾ÛÙØ§Ø³ÛÛ ÙÙÙÚµÛ Ú¾ÛÚµÙÚÛ.",
                              onPressedBritish: () => speaksentence11("en-GB"),
                              onPressedAmerican: () => speaksentence11("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """I bumped my head on the door frame.""",
                              kurdishText: "Ø³ÛØ±ÙÙ Ú©ÛØ´Ø§ Ø¨Û ÚÙØ§Ø±ÚÛÙÛÛ Ø¯ÛØ±Ú¯Ø§Ú©ÛØ¯Ø§.",
                              onPressedBritish: () => speaksentence12("en-GB"),
                              onPressedAmerican: () => speaksentence12("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """A butt from his head left him momentarily disorientated.""",
                              kurdishText: "Ú©ÛÙÙÛÛÛÚ© ÙÛØ³ÛØ±Û Ø¨Û ÙØ§ÙÛÛ Ú¯ÛÚÛ Ú©Ø±Ø¯.",
                              onPressedBritish: () => speaksentence13("en-GB"),
                              onPressedAmerican: () => speaksentence13("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """He conked the burglar on the head with a baseball bat.""",
                              kurdishText:
                                  "Ú©ÛØ´Ø§Û Ø¨Û Ø³ÛØ±Û Ø¯Ø²ÛÚ©ÛØ¯Ø§ Ø¨Û Ø¯Ø§Ø±ÛÚ©Û ÛØ§Ø±Û Ø¨ÛÛØ³Ø¨ÛÚµ.",
                              onPressedBritish: () => speaksentence14("en-GB"),
                              onPressedAmerican: () => speaksentence14("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """The assailant struck the victim over the head with a cosh.""",
                              kurdishText:
                                  "Ú¾ÛØ±Ø´Ú©Ø§Ø±ÛÚ©Û Ø¨Û ØªÛÚµØ§ÛÛÚ© Ú©ÛØ´Ø§Û Ø¨Û Ø³ÛØ±Û ÙÙØ±Ø¨Ø§ÙÛÛÛÚ©ÛØ¯Ø§.",
                              onPressedBritish: () => speaksentence15("en-GB"),
                              onPressedAmerican: () => speaksentence15("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """He hit his head as he stood up and cursed loudly.""",
                              kurdishText:
                                  "Ú©Û Ú¾ÛØ³ØªØ§ Ø¦ÛØ´Û Ø¨Û Ø³ÛØ±Û Ú¯ÛÛØ§ÙØ¯ Ù Ø¨Û Ø¯ÛÙÚ¯Û Ø¨ÛØ±Ø² Ø¯ÛØ³ØªÛ Ø¨Û Ø¬ÙÛÙØ¯Ø§Ù Ú©Ø±Ø¯.",
                              onPressedBritish: () => speaksentence16("en-GB"),
                              onPressedAmerican: () => speaksentence16("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """She had fallen and cut her head open.""",
                              kurdishText: """Ú©ÛÙØªØ¨ÙÙ Ù Ø³ÛØ±Û ÙÚµÛØ´Ø§ÙØ¯Ø¨ÙÙ..""",
                              onPressedBritish: () => speaksentence17("en-GB"),
                              onPressedAmerican: () => speaksentence17("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """He shook his head in disapproval.""",
                              kurdishText: "Ø³ÛØ±Û ÚØ§ÙÛØ´Ø§ÙØ¯ ÙÛÚ© ÙØ§ÚÛØ²Ø§ÛÛØªÛ.",
                              onPressedBritish: () => speaksentence18("en-GB"),
                              onPressedAmerican: () => speaksentence18("en-US"),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ù¢. (ÙØ§Ù) Ø¨ÛØ± Ù ÙÛØ´Ú©"""),
                    SentencesRow(
                      englishText:
                          """Try not to clutter your head with trivia.""",
                      kurdishText:
                          "(Ø¨ÛÚ©Ø§Ø±Ú¾ÛÙØ§ÙÛ Ø®ÙØ§Ø²Ø±Ø§ÙÛ) Ú¾ÛÙÚµ Ø¨Ø¯Û ÙÛØ´Ú©Øª Ø¨Û Ø´ØªÛ Ø²ÛØ§Ø¯Û Ø³ÛØ±ÙØ§Úµ ÙÛÚ©ÛÛØª.",
                      onPressedBritish: () => speaksentence3("en-GB"),
                      onPressedAmerican: () => speaksentence3("en-US"),
                    ),
                    Column(
                      children: [
                        MyExpansionTile(
                          children: [
                            SentencesRow(
                              englishText:
                                  """Her head was filled with the clamour of voices calling her name.""",
                              kurdishText:
                                  "ÙÛØ´Ú©Û Ù¾ÚØ¨ÙÙ ÙÛ ÙØ§ÚµÛÙØ§ÚµÛ Ø®ÛÚµÚ©Û Ú©Û Ø¨Ø§ÙÚ¯ÛØ§Ù Ø¯ÛÚ©Ø±Ø¯.",
                              onPressedBritish: () => speaksentence1("en-GB"),
                              onPressedAmerican: () => speaksentence1("en-US"),
                            ),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """I sometimes wonder what goes on in that head of yours.""",
                              kurdishText:
                                  """ÙÛÙØ¯ÛÚ© Ø¬Ø§Ø± Ø¨ÛØ±Ø¯ÛÚ©ÛÙÛÙÛ ÚÛ Ø¯ÛÚ¯ÙØ²ÛÚÛØª ÙÛÙ Ø³ÛØ±ÛÛ ØªÛØ¯Ø§.""",
                              onPressedBritish: () => speaksentence19("en-GB"),
                              onPressedAmerican: () => speaksentence19("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """I wish you'd use your head (= think carefully before doing or saying something).""",
                              kurdishText:
                                  """Ø®ÛØ²Ú¯Û Ø¯ÛØ®ÙØ§Ø²Ù ÙÛØ´Ú©Øª Ø¨ÛÚ©Ø§Ø± Ø¨ÙÛÙØ§Ø¨Ø§ÛÛ.""",
                              onPressedBritish: () => speaksentence20("en-GB"),
                              onPressedAmerican: () => speaksentence20("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """The thought never entered my head.""",
                              kurdishText:
                                  """Ø¨ÛØ±Ú©Ø±Ø¯ÙÛÙÛÚ©Û ÙÛØ±Ú¯ÛØ² ÙÛÙØ§Øª Ø¨Û ÙØ²Ø±ÙØ¯Ø§.""",
                              onPressedBritish: () => speaksentence21("en-GB"),
                              onPressedAmerican: () => speaksentence21("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """I can't work it out in my headâI need a calculator.""",
                              kurdishText:
                                  """ÙØ§ØªÙØ§ÙÙ ÙÛ ÙÛØ´Ú©ÙØ¯Ø§ Ø¨ÛØ¯ÛØ²ÙÛÙÛ Ù Ù¾ÛÙÛØ³ØªÛÙ Ø¨Û ÚÙÛØ±ÛØ±ÛÚ©Û.""",
                              onPressedBritish: () => speaksentence22("en-GB"),
                              onPressedAmerican: () => speaksentence22("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """She started hearing voices in her head.""",
                              kurdishText:
                                  """Ø¯ÛØ³ØªÛ Ú©Ø±Ø¯ Ø¨Û Ø¨ÛØ³ØªÙÛ Ø¯ÛÙÚ¯ ÙÛ ÙÛØ´Ú©ÛØ¯Ø§.""",
                              onPressedBritish: () => speaksentence23("en-GB"),
                              onPressedAmerican: () => speaksentence23("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """Who's been putting such weird ideas into your head?""",
                              kurdishText:
                                  """Ú©Û Ø¨ÛØ±ÛÚ©ÛÛ ÙÛÙØ§ ÙØ§ÙÛÛ Ø®Ø³ØªÙÙÛØªÛ ÙÛØ´Ú©ØªÛÙÛ.""",
                              onPressedBritish: () => speaksentence24("en-GB"),
                              onPressedAmerican: () => speaksentence24("en-US"),
                            ),
                            const DividerDefinition(),
                            const DefinitionKurdish(
                                text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                            const DividerSentences(),
                            SentencesRow(
                              englishText:
                                  """His head was spinning (= he felt dizzy or confused) after only one drink.""",
                              kurdishText:
                                  """Ø³ÛØ±Û Ø¯ÛØ³ÙÙÚØ§ÛÛÙÛ ØªÛÙÙØ§ ÙÛ Ø¯ÙØ§Û ÛÛÚ© Ø®ÙØ§Ø±Ø¯ÙÛÙÛ.""",
                              onPressedBritish: () => speaksentence25("en-GB"),
                              onPressedAmerican: () => speaksentence25("en-US"),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù£. (ÙØ§Ù) Ø¦ÛÙØ¯Ø§Ø²ÛÛ Ø³ÛØ±Û Ú©ÛØ³ÛÚ© ÛØ§Ù Ø¦Ø§ÚÛÚµÛÚ© Ú©Û Ø¨Û Ù¾ÛÙØ§Ù Ø¨ÛÚ©Ø§Ø±Ø¯ÛØª"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She's a good head taller than her sister.""",
                      kurdishText: """ÛÛÚ© Ø³ÛØ±Û ØªÛÙØ§Ù Ø¯Ø±ÛÚØªØ±Û ÙÛ Ø®ÙØ´Ú©ÛÚ©ÛÛ.""",
                      onPressedBritish: () => speaksentence26("en-GB"),
                      onPressedAmerican: () => speaksentence26("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The favourite won by a short head (= a distance slightly less than the length of a horse's head).""",
                      kurdishText:
                          """Ù¾Ø§ÚµÛÙØ±Ø§ÙÛÚ©Û Ø¨Û Ø¬ÛØ§ÙØ§Ø²Û Ú©ÛÙØªØ± ÙÛ Ø³ÛØ±Û Ø¦ÛØ³Ù¾ÛÚ©Û Ø¨Ø±Ø¯ÛÛÛÙÛ.""",
                      onPressedBritish: () => speaksentence27("en-GB"),
                      onPressedAmerican: () => speaksentence27("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """Ù¤. (ÙØ§Ù) Ø³ÛØ±ÛØ´Û"""),
                    const AlsoEnglishckb(word: "Ú¾ÛØ±ÙÛÚ¾Ø§: headache"),
                    SentencesRow(
                      englishText:
                          """I woke up with a really bad head this morning.""",
                      kurdishText:
                          """Ø¦ÛÙ Ø¨ÛÛØ§ÙÛÛÛ Ø¨Û Ø³ÛØ±ÛØ´ÛÛÛÚ©Û Ø®Ø±Ø§Ù¾ÛÙÛ Ø®ÛØ¨ÛØ±Ù Ø¨ÙÙÛÛÙÛ.""",
                      onPressedBritish: () => speaksentence28("en-GB"),
                      onPressedAmerican: () => speaksentence28("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¥. (ÙØ§Ù) Ú©ÛØ³ÛÚ© Ú©Û Ø¨ÛØ±Ù¾Ø±Ø³Û ÚÙØ§Ø±ÛÛÛÚ© Ú©ÛØ³ ÛØ§Ù Ø¯Ø§ÙÛØ²Ø±Ø§ÙÛÛÛÚ©Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """She resigned as head of department.""",
                      kurdishText: """ÙÛÚ© Ø³ÛØ±ÛÚ© Ø¨ÛØ´ Ø¯ÛØ³ØªÛ ÙÛÚ©Ø§Ø± Ú©ÛØ´Ø§ÛÛÙÛ.""",
                      onPressedBritish: () => speaksentence29("en-GB"),
                      onPressedAmerican: () => speaksentence29("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """I've asked the department head for an appointment.""",
                      kurdishText:
                          """Ø¯Ø§ÙØ§Û ÚØ§ÙÙ¾ÛÚ©ÛÙØªÙÛÚ©Ù ÙÛ Ø³ÛØ±ÛÚ© Ø¨ÛØ´ Ú©Ø±Ø¯ÙÙÛ.""",
                      onPressedBritish: () => speaksentence30("en-GB"),
                      onPressedAmerican: () => speaksentence30("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He is deputy head of the British Museum.""",
                      kurdishText: """Ø¬ÛÚ¯Ø±Û Ø³ÛØ±ÛÚ©Û ÙÛØ²ÛØ®Ø§ÙÛÛ Ø¨ÛØ±ÛØªØ§ÙÛØ§ÛÛ.""",
                      onPressedBritish: () => speaksentence31("en-GB"),
                      onPressedAmerican: () => speaksentence31("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He is only the nominal head of the company.""",
                      kurdishText: """ØªÛÙÙØ§ Ø³ÛØ±ÛÚ©Û ÚÙÙÚ©ÛØ´Û Ú©ÛÙÙ¾Ø§ÙÛØ§Ú©ÛÛÛ.""",
                      kurdishNote:
                          """ÙØ§ØªØ§ Ø¦ÛÙ ØªÛÙÙØ§ Ø¨Û ÙØ§Ù Ø³ÛØ±ÛÚ©Û Ú©ÛÙÙ¾Ø§ÙÛØ§Ú©ÛÛÛ.""",
                      onPressedBritish: () => speaksentence32("en-GB"),
                      onPressedAmerican: () => speaksentence32("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¥. (ÙØ§Ù) Ø¨ÛÚÛÙØ¨ÛØ±Û ÙÙØªØ§Ø¨Ø®Ø§ÙÛ ÛØ§Ù Ú©ÛÙÛÚÛÚ©"""),
                    const AlsoEnglishckb(
                        word:
                            "Ú¾ÛØ±ÙÛÚ¾Ø§: headmasterØ headmistressØ head teacher"),
                    SentencesRow(
                      englishText: """I've been called in to see the Head.""",
                      kurdishText: """Ø¯Ø§ÙØ§Ù ÙÛÚ©Ø±Ø§ÙÛ Ø¨ÛÚÛÙØ¨ÛØ± Ø¨Ø¨ÛÙÙ.""",
                      onPressedBritish: () => speaksentence33("en-GB"),
                      onPressedAmerican: () => speaksentence33("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """I remember sitting outside the Head's office waiting to be called in.""",
                      kurdishText:
                          """ÙÛØ¨ÛØ±ÙÛ ÙÛ Ø¯ÛØ±ÛÙÛÛ Ø¦ÛÙÛØ³Û Ø¨ÛÚÛÙØ¨ÛØ± Ø¯Ø§ÙÛØ´ØªØ¨ÙÙÙ ÚØ§ÙÛÚÛ Ø¨ÙÙÙ  Ø¨Ø§ÙÚ¯ Ø¨Ú©Ø±ÛÙÛ ÚÙÙØ±ÛÙÛ.""",
                      onPressedBritish: () => speaksentence34("en-GB"),
                      onPressedAmerican: () => speaksentence34("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù§. (ÙØ§Ù) Ø´ÛØ± ÙÛ Ú©Ø§ØªÛ Ø¯Ø±Ø§Ù ÙÛÚµØ¯Ø§ÙØ¯Ø§"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """I called heads and it came down tails.""",
                      kurdishText: """Ø´ÛØ±Ù Ú¯ÙØª Ø¨ÛÚµØ§Ù Ø®ÛØª Ø¯ÛØ±ÚÙÙ.""",
                      onPressedBritish: () => speaksentence35("en-GB"),
                      onPressedAmerican: () => speaksentence35("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¨. (ÙØ§Ù) Ø³ÛØ±Û Ø´ØªÛÚ©Û Ø¨Ø§Ø±ÛÚ© Ú©Û Ú¯ÛÙØ±ÛØªØ± ÛØ§Ù ÙØ±Ø§ÙØ§ÙØªØ±Û ÙÛ Ø¨ÛØ´ÛÚ©Ø§ÙÛ Ø¯ÛÚ©ÛÛ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He hit the head of the nail with the hammer.""",
                      kurdishText: """Ø¨Û ÚÛÚ©ÙØ´ÛÚ©Û Ú©ÛØ´Ø§Û Ø¨Û Ø³ÛØ±Û Ø¨Ø²ÙØ§Ø±ÛÚ©ÛØ¯Ø§.""",
                      onPressedBritish: () => speaksentence36("en-GB"),
                      onPressedAmerican: () => speaksentence36("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù©. (ÙØ§Ù) Ø¨ÛØ´Û Ø³ÛØ±ÛÙÛÛ Ø´ØªÛÚ©"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """They finished the season at the head of their league.""",
                      kurdishText:
                          """ÙÛØ±Ø²ÛÚ©ÛÛØ§Ù ØªÛÙØ§Ù Ú©Ø±Ø¯ ÙÛ Ø³ÛØ±ÛÙÛÛ Ø®ÙÙÛÚ©ÛØ¯Ø§.""",
                      onPressedBritish: () => speaksentence37("en-GB"),
                      onPressedAmerican: () => speaksentence37("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù . (ÙØ§Ù) Ø´ÙÛÙÛ Ø¯ÛØ³ØªÙ¾ÛÚ©Ø±Ø¯ÙÛ ÚÙÙØ¨Ø§Ø±ÛÚ©"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The head of the river is often clear and fresh.""",
                      kurdishText:
                          """Ø³ÛØ±ÚØ§ÙÛÛ ÚÙÙØ¨Ø§Ø±ÛÚ©Û Ø²ÛØ±Ø¨ÛÛ Ú©Ø§Øª ÚÙÙÙ Ù Ù¾Ø§Ú©Û.""",
                      onPressedBritish: () => speaksentence38("en-GB"),
                      onPressedAmerican: () => speaksentence38("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù¡. (ÙØ§Ù) Ú¯Ø±ÙÚ¯ØªØ±ÛÙ Ú©ÙØ±Ø³Û ÙÛØ²ÛÚ©"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The President sat at the head of the table.""",
                      kurdishText: """Ø³ÛØ±ÛÚ© ÙÛ Ø³ÛØ±ÛÙÛÛ ÙÛØ²ÛÚ©Û Ø¯Ø§ÙÛØ´Øª.""",
                      onPressedBritish: () => speaksentence39("en-GB"),
                      onPressedAmerican: () => speaksentence39("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù¢. (ÙØ§Ù) Ø³ÛØ±ÛØªØ§Û ÚÛØ²ÛÚ© ÙÛ Ø®ÛÚµÚ©Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The prince rode at the head of his regiment.""",
                      kurdishText:
                          """Ø´Ø§Ø²Ø§Ø¯ÛÚ©Û ÙÛ Ù¾ÛØ´ÛÙÛÛ ØªÛÙ¾ÛÚ©ÛÛ Ø³ÙØ§Ø±ÚØ§Ú©Û Ø¯ÛÚ©Ø±Ø¯.""",
                      onPressedBritish: () => speaksentence40("en-GB"),
                      onPressedAmerican: () => speaksentence40("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¡Ù£. (ÙØ§Ù) Ú©ÛÙÛÚµÛÚ© Ú¯ÛÚµØ§ ÛØ§Ù Ú¯ÙÚµ ÙÛ Ú©ÛØªØ§ÛÛ ÙÛØ¯ÛÚ©"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Remove the dead heads to encourage new growth.""",
                      kurdishText:
                          """Ú¯ÙÚµÛ ÙØ´Ú©Ø¨ÙÙÛÚ©Ø§Ù ÙÛ Ø¨Ú©ÛØ±ÛÙÛ Ø¨Û Ø¯ÛØ³ØªÙ¾ÛÚ©Ø±Ø¯ÙÛ Ú¯ÛØ´ÛÛ ØªØ§Ø²Û.""",
                      onPressedBritish: () => speaksentence41("en-GB"),
                      onPressedAmerican: () => speaksentence41("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù¤. (ÙØ§Ù) Ú©ÛÙÛ Ø³ÛØ± Ú¯ÚµØ§Ø³ÛÚ© Ø¨ÛØ±Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """He waited for the head to settle before drinking.""",
                      kurdishText:
                          """ÚØ§ÙÛÚÛ Ø¨ÙÙ Ú©ÛÙÛÚ©Û ÙÛÙÛÙÛØª Ù¾ÛØ´ Ø¦ÛÙÛÛ Ø¨ÛØ®ÙØ§ØªÛÙÛ.""",
                      onPressedBritish: () => speaksentence42("en-GB"),
                      onPressedAmerican: () => speaksentence42("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¡Ù¥. (ÙØ§Ù) Ø¦ÛÙ Ø¨ÛØ´ÛÛ Ø³ÛØ± Ù¾ÛØ³Øª Ú©Û Ø´ÙÛÛÛÚ©Û Ø²ÛØ±Ø¯Û ØªÛØ¯Ø§ÛÛ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """The pimple had a small white head.""",
                      kurdishText: """Ø²ÛÙ¾Ú©ÛÚ©Û Ø³ÛØ±ÛÚ©Û Ø³Ù¾Û Ø¨ÚÙÙÙÛ ÙÛØ¨ÙÙ.""",
                      onPressedBritish: () => speaksentence43("en-GB"),
                      onPressedAmerican: () => speaksentence43("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù¦. (Ú©Ø±Ø¯Ø§Ø±) Ø¬ÙÚµØ§Ù Ø¨Û Ø¦Ø§Ø±Ø§Ø³ØªÛÛÛÚ©Û Ø¯ÛØ§Ø±ÛÚ©Ø±Ø§Ù"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """Where are we heading?""",
                      kurdishText: """Ø¨ÛØ±ÛÙ Ú©ÙÛ Ø¯ÛÚÛÙØ""",
                      onPressedBritish: () => speaksentence44("en-GB"),
                      onPressedAmerican: () => speaksentence44("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """Where are you two headed?""",
                      kurdishText: """Ø¦ÛÙ Ø¯ÙÙØ§ÙÛØªØ§Ù Ø¨Û Ú©ÙÛ Ø¯ÛÚÙØ""",
                      onPressedBritish: () => speaksentence45("en-GB"),
                      onPressedAmerican: () => speaksentence45("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """Let's head back home.""",
                      kurdishText: """Ø¨Ø§ Ø¨ÛØ±ÛÙ ÙØ§ÚµÛÙÛ Ø¨ÚÛÙ.""",
                      onPressedBritish: () => speaksentence46("en-GB"),
                      onPressedAmerican: () => speaksentence46("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """We headed north.""",
                      kurdishText: """Ø¨ÛØ±ÛÙ Ø¨Ø§Ú©ÙÙØ± ÚÙÙÛÙ.""",
                      onPressedBritish: () => speaksentence47("en-GB"),
                      onPressedAmerican: () => speaksentence47("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¡Ù§. (Ú©Ø±Ø¯Ø§Ø±) Ø³ÛØ±Ù¾ÛØ±Ø´ØªÛ Ú©Ø±Ø¯ÙÛ Ø´ØªÛÚ©"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """She has been appointed to head the research team.""",
                      kurdishText:
                          """Ø¯ÛØ§Ø±Û Ú©Ø±Ø§ÙÛ Ø³ÛØ±Ù¾ÛØ±Ø´ØªÛ ØªÛÙÛ ØªÙÛÚÛÙÛÙÛÚ©Û Ø¨Ú©Ø§Øª.""",
                      onPressedBritish: () => speaksentence48("en-GB"),
                      onPressedAmerican: () => speaksentence48("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The delegation will be headed by Lord Arthur.""",
                      kurdishText:
                          """Ø´Ø§ÙØ¯ÛÚ©Û ÙÛÙØ§ÛÛÙ ÙÛØ±Ø¯ Ø¦Ø§Ø±Ø³ÛØ± Ø³ÛØ±Ù¾ÛØ±Ø´ØªÛ Ø¯ÛÚ©Ø±ÛØª.""",
                      onPressedBritish: () => speaksentence49("en-GB"),
                      onPressedAmerican: () => speaksentence49("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¡Ù¨. (Ú©Ø±Ø¯Ø§Ø±) Ø¨ÙÙÙ ÙÛ Ø³ÛØ±ÛÙÛÛ ÙÛØ³ØªÛÚ© ÛØ§Ù Ù¾ÛØ´ÛÙÛÛ ÚÛØ²ÛÚ©"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """Italy heads the table after two games.""",
                      kurdishText:
                          """Ø¦ÛØªØ§ÙÛØ§ ÙÛ Ø³ÛØ±ÛÙÛÛ Ø®Ø´ØªÛÚ©ÛÛÛ ÙÛ Ø¯ÙØ§Û Ø¯ÙÙ ÛØ§Ø±Û.""",
                      onPressedBritish: () => speaksentence50("en-GB"),
                      onPressedAmerican: () => speaksentence50("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text:
                            """Ù¡Ù©. (Ú©Ø±Ø¯Ø§Ø±) Ø¯Ø§ÙØ§ÙÛ ÙØ´ÛÛÛÚ© ÛØ§Ù ÚÙØ§Ø±ÛÛÛÚ© ÙØ´Û ÙÛ Ø³ÛØ±ÛÙÛÛ Ù¾ÛÚÛÛÛÚ© ÛØ§Ù Ø¨ÛØ´ÛÚ©Û Ú©ØªÛØ¨ÛÚ© ÙÛÚ© Ø³ÛØ±Ø¯ÛÚ"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """The chapter was headed âMy Early Lifeâ.""",
                      kurdishText:
                          """Ø¨ÛØ´ÛÚ©Û Ø³ÛØ±Ø¯ÛÚÛ 'ÚÛØ§ÙÛ Ø³ÛØ±ÛØªØ§ÛÛÙ' ÙÙÛ Ù¾ÛØ¯Ø±Ø§.""",
                      onPressedBritish: () => speaksentence51("en-GB"),
                      onPressedAmerican: () => speaksentence51("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(
                        text: """Ù¢Ù . (Ú©Ø±Ø¯Ø§Ø±) ÙÛØ¯Ø§Ù ÙÛ ØªÛÙ¾ÛÚ© Ø¨Û Ø³ÛØ±Øª"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText:
                          """Walsh headed the ball into an empty goal.""",
                      kurdishText:
                          """ÙØ§ÚµØ´ Ø¨Û Ú©ÛÙÛ ØªÛÙ¾ÛÚ©ÛÛ Ø®Ø³ØªÛ Ú¯ÛÚµÛ Ø¨ÛØªØ§ÚµÛÚ©ÛÙÛ.""",
                      onPressedBritish: () => speaksentence52("en-GB"),
                      onPressedAmerican: () => speaksentence52("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5300""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence53("en-GB"),
                      onPressedAmerican: () => speaksentence53("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5400""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence54("en-GB"),
                      onPressedAmerican: () => speaksentence54("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5500""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence55("en-GB"),
                      onPressedAmerican: () => speaksentence55("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5600""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence56("en-GB"),
                      onPressedAmerican: () => speaksentence56("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5700""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence57("en-GB"),
                      onPressedAmerican: () => speaksentence57("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5800""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence58("en-GB"),
                      onPressedAmerican: () => speaksentence58("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence5900""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence59("en-GB"),
                      onPressedAmerican: () => speaksentence59("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_6000""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence60("en-GB"),
                      onPressedAmerican: () => speaksentence60("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6100""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence61("en-GB"),
                      onPressedAmerican: () => speaksentence61("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6200""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence62("en-GB"),
                      onPressedAmerican: () => speaksentence62("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6300""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence63("en-GB"),
                      onPressedAmerican: () => speaksentence63("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6400""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence64("en-GB"),
                      onPressedAmerican: () => speaksentence64("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6500""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence65("en-GB"),
                      onPressedAmerican: () => speaksentence65("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6600""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence66("en-GB"),
                      onPressedAmerican: () => speaksentence66("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6700""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence67("en-GB"),
                      onPressedAmerican: () => speaksentence67("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6800""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence68("en-GB"),
                      onPressedAmerican: () => speaksentence68("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence6900""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence69("en-GB"),
                      onPressedAmerican: () => speaksentence69("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_7000""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence70("en-GB"),
                      onPressedAmerican: () => speaksentence70("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7100""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence71("en-GB"),
                      onPressedAmerican: () => speaksentence71("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7200""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence72("en-GB"),
                      onPressedAmerican: () => speaksentence72("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7300""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence73("en-GB"),
                      onPressedAmerican: () => speaksentence73("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7400""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence74("en-GB"),
                      onPressedAmerican: () => speaksentence74("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7500""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence75("en-GB"),
                      onPressedAmerican: () => speaksentence75("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7600""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence76("en-GB"),
                      onPressedAmerican: () => speaksentence76("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7700""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence77("en-GB"),
                      onPressedAmerican: () => speaksentence77("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7800""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence78("en-GB"),
                      onPressedAmerican: () => speaksentence78("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence7900""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence79("en-GB"),
                      onPressedAmerican: () => speaksentence79("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_8000""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence80("en-GB"),
                      onPressedAmerican: () => speaksentence80("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8100""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence81("en-GB"),
                      onPressedAmerican: () => speaksentence81("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8200""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence82("en-GB"),
                      onPressedAmerican: () => speaksentence82("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8300""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence83("en-GB"),
                      onPressedAmerican: () => speaksentence83("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8400""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence84("en-GB"),
                      onPressedAmerican: () => speaksentence84("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8500""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence85("en-GB"),
                      onPressedAmerican: () => speaksentence85("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8600""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence86("en-GB"),
                      onPressedAmerican: () => speaksentence86("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8700""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence87("en-GB"),
                      onPressedAmerican: () => speaksentence87("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8800""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence88("en-GB"),
                      onPressedAmerican: () => speaksentence88("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence8900""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence89("en-GB"),
                      onPressedAmerican: () => speaksentence89("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_9000""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence90("en-GB"),
                      onPressedAmerican: () => speaksentence90("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence9100""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence91("en-GB"),
                      onPressedAmerican: () => speaksentence91("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence9200""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence92("en-GB"),
                      onPressedAmerican: () => speaksentence92("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence9300""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence93("en-GB"),
                      onPressedAmerican: () => speaksentence93("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence9400""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence94("en-GB"),
                      onPressedAmerican: () => speaksentence94("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence9500""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence95("en-GB"),
                      onPressedAmerican: () => speaksentence95("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence9600""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence96("en-GB"),
                      onPressedAmerican: () => speaksentence96("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence9700""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence97("en-GB"),
                      onPressedAmerican: () => speaksentence97("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence9800""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence98("en-GB"),
                      onPressedAmerican: () => speaksentence98("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence9900""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence99("en-GB"),
                      onPressedAmerican: () => speaksentence99("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence__10000""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence100("en-GB"),
                      onPressedAmerican: () => speaksentence100("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_10100""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence101("en-GB"),
                      onPressedAmerican: () => speaksentence101("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_10200""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence102("en-GB"),
                      onPressedAmerican: () => speaksentence102("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_10300""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence103("en-GB"),
                      onPressedAmerican: () => speaksentence103("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_10400""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence104("en-GB"),
                      onPressedAmerican: () => speaksentence104("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_10500""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence105("en-GB"),
                      onPressedAmerican: () => speaksentence105("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_10600""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence106("en-GB"),
                      onPressedAmerican: () => speaksentence106("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_10700""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence107("en-GB"),
                      onPressedAmerican: () => speaksentence107("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_10800""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence108("en-GB"),
                      onPressedAmerican: () => speaksentence108("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_10900""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence109("en-GB"),
                      onPressedAmerican: () => speaksentence109("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11000""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence110("en-GB"),
                      onPressedAmerican: () => speaksentence110("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11100""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence111("en-GB"),
                      onPressedAmerican: () => speaksentence111("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11200""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence112("en-GB"),
                      onPressedAmerican: () => speaksentence112("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11300""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence113("en-GB"),
                      onPressedAmerican: () => speaksentence113("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11400""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence114("en-GB"),
                      onPressedAmerican: () => speaksentence114("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11500""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence115("en-GB"),
                      onPressedAmerican: () => speaksentence115("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11600""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence116("en-GB"),
                      onPressedAmerican: () => speaksentence116("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11700""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence117("en-GB"),
                      onPressedAmerican: () => speaksentence117("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11800""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence118("en-GB"),
                      onPressedAmerican: () => speaksentence118("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_11900""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence119("en-GB"),
                      onPressedAmerican: () => speaksentence119("en-US"),
                    ),
                    const DividerDefinition(),
                    const DefinitionKurdish(text: """ÚÙÙØ±. (Ú©Ø±Ø¯Ø§Ø±) Ù¾ÙÙØ³Û"""),
                    const DividerSentences(),
                    SentencesRow(
                      englishText: """speaksentence_12000""",
                      kurdishText: """Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ_Ø±Ø³ØªÛ.""",
                      onPressedBritish: () => speaksentence120("en-GB"),
                      onPressedAmerican: () => speaksentence120("en-US"),
                    ),
                  ],
                ),
              ),
              Consumer(
                builder: (context, ref, child) {
                  if (filteredSentences.isEmpty) {
                    return const NoSentencesFromDatabase();
                  } else {
                    return ListView.builder(
                      itemCount: filteredSentences.length,
                      itemBuilder: (context, index) {
                        final sentence = filteredSentences[index];
                        final showDivider = filteredSentences.length > 1 &&
                            index != filteredSentences.length - 1;
                        return CustomSentenceWidget(
                          englishText: sentence['english'].toString(),
                          frenchText: sentence['french'].toString(),
                          keyword: keyword,
                          onPressedBritish: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-GB",
                          ),
                          onPressedAmerican: () => speakEnglish(
                            sentence['english'].toString(),
                            languageCode: "en-US",
                          ),
                          showDivider: showDivider,
                        );
                      },
                    );
                  }
                },
              ),
              const YouTubeScroller(
                children: [
                  YoutubeEmbeddedone(),
                  YoutubeEmbeddedtwo(),
                  YoutubeEmbeddedthree(),
                  YoutubeEmbeddedfour(),
                  YoutubeEmbeddedfive(),
                  // YoutubeEmbeddedsix(),
                  // YoutubeEmbeddedseven(),
                  // YoutubeEmbeddedeight(),
                  // YoutubeEmbeddednine(),
                  // YoutubeEmbeddedten(),
                  // YoutubeEmbeddedeleven(),
                  // YoutubeEmbeddedtwelve(),
                  // YoutubeEmbeddedthirteen(),
                  // YoutubeEmbeddeddfourteen(),
                  // YoutubeEmbeddedfifteen(),
                  // YoutubeEmbeddeddsixteen(),
                  // YoutubeEmbeddeddseventeen(),
                  // YoutubeEmbeddeddeighteen(),
                  // YoutubeEmbeddeddnineteen(),
                  // YoutubeEmbeddedtwenty(),
                  // YoutubeEmbeddedmulti(),
                  YoutubeEmbeddedend(),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// 188888880002200
const String _videoIdend = 'https://youtu.be/hFZFjoX2cGg?t=';
const double _startSecondsend = 000000000000000000000000000149;
const String _videoIdone = 'https://youtu.be/hTqtGJwsJVE?t=';
const double _startSecondsone = 000000000000000000000000000715;
const String _videoIdtwo = 'https://youtu.be/fXLrw7XozC8?t=';
const double _startSecondstwo = 000000000000000000000000000278;
const String _videoIdthree = 'https://youtu.be/wizgxRBfVTY?t=';
const double _startSecondsthree = 00000000000000000000000000038;
const String _videoIdfour = 'https://youtu.be/WHi60ToJ8FE?t=';
const double _startSecondsfour = 000000000000000000000000000112;
const String _videoIdfive = 'https://youtu.be/jQO-OrjpybQ?t=';
const double _startSecondsfive = 00000000000000000000000000022;

class YoutubeEmbeddedend extends StatelessWidget {
  const YoutubeEmbeddedend({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdend,
      startSeconds: _startSecondsend,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdend,
        startSeconds: _startSecondsend,
      );
    }

    return YouTubeVideosScaffoldEnd(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedone extends StatelessWidget {
  const YoutubeEmbeddedone({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdone,
      startSeconds: _startSecondsone,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdone,
        startSeconds: _startSecondsone,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedtwo extends StatelessWidget {
  const YoutubeEmbeddedtwo({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdtwo,
      startSeconds: _startSecondstwo,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdtwo,
        startSeconds: _startSecondstwo,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedthree extends StatelessWidget {
  const YoutubeEmbeddedthree({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdthree,
      startSeconds: _startSecondsthree,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdthree,
        startSeconds: _startSecondsthree,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedfour extends StatelessWidget {
  const YoutubeEmbeddedfour({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdfour,
      startSeconds: _startSecondsfour,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdfour,
        startSeconds: _startSecondsfour,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

class YoutubeEmbeddedfive extends StatelessWidget {
  const YoutubeEmbeddedfive({super.key});

  @override
  Widget build(BuildContext context) {
    YoutubePlayerController controller = YoutubePlayerController.fromVideoId(
      videoId: _videoIdfive,
      startSeconds: _startSecondsfive,
      autoPlay: true,
      params: defaultYoutubePlayerParams,
    );

    void reloadVideo() {
      controller.loadVideoById(
        videoId: _videoIdfive,
        startSeconds: _startSecondsfive,
      );
    }

    return YouTubeVideosScaffold(
      controller: controller,
      onReloadVideo: reloadVideo,
    );
  }
}

// end WORD_WEB