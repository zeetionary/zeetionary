import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:zeetionary/constants.dart';

// DefaultTabController TabBarView YoutubeEmbeddedone YouTubeScroller
// scrollDirection: Axis.vertical,

// More sentences is NOT done

enum TtsState { playing }

class EnglishEntrychase extends StatelessWidget {
  // blank divider
  EnglishEntrychase({super.key});
  // blank divider
  final FlutterTts flutterTts = FlutterTts();

  Future<void> speakchase(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("chase");
  }

  Future<void> speakchases1(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("My dog likes chasing rabbits.");
  }

  Future<void> speakchases2(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("The kids chased each other around the kitchen table.");
  }

  Future<void> speakchases3(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("Chase the cat outâ€”we don't want her in the kitchen.");
  }

  Future<void> speakchases4(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "This particular fish chases off any other fish that enters its territory.");
  }

  Future<void> speakchases5(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("Too many people are chasing too few jobs nowadays.");
  }

  Future<void> speakchases6(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("The team is chasing its first win in five games.");
  }

  Future<void> speakchases7(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("Kevin's been chasing after Jane for months.");
  }

  Future<void> speakchases8(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("Girls are always chasing him.");
  }

  Future<void> speakchases9(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("I need to chase him about organizing the meeting.");
  }

  Future<void> speakchases10(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases10");
  }

  Future<void> speakchases11(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("The thieves were caught by police after a short chase.");
  }

  Future<void> speakchases12(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak(
        "We lost him in the narrow streets and had to give up the chase.");
  }

  Future<void> speakchases13(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("Three teams are involved in the chase for the championship.");
  }

  Future<void> speakchases14(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts
        .speak("Exhausted and hungry, the hunters finally gave up the chase.");
  }

  Future<void> speakchases15(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases1500");
  }

  Future<void> speakchases16(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases1600");
  }

  Future<void> speakchases17(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases1700");
  }

  Future<void> speakchases18(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases1800");
  }

  Future<void> speakchases19(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases1900");
  }

  Future<void> speakchases20(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2000");
  }

  Future<void> speakchases21(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2100");
  }

  Future<void> speakchases22(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2200");
  }

  Future<void> speakchases23(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2300");
  }

  Future<void> speakchases24(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2400");
  }

  Future<void> speakchases25(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2500");
  }

  Future<void> speakchases26(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2600");
  }

  Future<void> speakchases27(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2700");
  }

  Future<void> speakchases28(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2800");
  }

  Future<void> speakchases29(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases2900");
  }

  Future<void> speakchases30(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases3000");
  }

  Future<void> speakchases31(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases3100");
  }

  Future<void> speakchases32(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases3200");
  }

  Future<void> speakchases33(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases3300");
  }

  Future<void> speakchases34(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases3400");
  }

  Future<void> speakchases35(String languageCode) async {
    // DOPSUM: CHANGE speakchase
    await flutterTts.setLanguage(languageCode);
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.speak("speakchases3500");
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 3, // 2 + VIDEOS FIND: FROM_YOUTUBE_BELOW
      child: Scaffold(
        appBar: const ZeetionaryAppbar(),
        body: Padding(
          padding:
              const EdgeInsets.only(left: 14, top: 4, right: 14, bottom: 4),
          // EdgeInsets.zero,
          child: Column(
            children: [
              SingleChildScrollView(
                child: Column(
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Row(
                          children: [
                            EntryTitle(word: "chase"),
                          ],
                        ),
                        Row(
                          children: [
                            const IPAofEnglish(text: "IpaUK: /tÊƒeÉªs/"),
                            CustomIconButtonBritish(
                              onPressed: () => speakchase("en-GB"),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            const IPAofEnglish(text: "IpaUS: /tÊƒeÉªs/"),
                            CustomIconButtonAmerican(
                              onPressed: () => speakchase("en-US"),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              const CustomTabBar(
                tabs: [
                  UkIconForTab(),
                  KurdIconForTab(),
                  VideoIconForTab(),
                ],
              ),
              Expanded(
                child: TabBarView(
                  children: [
                    const EnglishMeaning(), // DOPSUM: ENGLISH MEANING IS BELOW
                    SingleChildScrollView(
                      // DOPSUM: KURDISH MEANING
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          const DividerDefinition(),
                          const KurdishVocabulary(text: """
Ú©ÙˆØ±Ø¯ÛŒ: Ø´ÙˆÛŽÙ†â€ŒÚ¾Û•ÚµÚ¯Ø±ØªÙ†ØŒ Ú•Ø§ÙˆÙ†Ø§Ù†ØŒ Ø¨Û•Ø¯ÙˆØ§Ú©Û•ÙˆØªÙ†ØŒ Ø¨Û•Ø¯ÙˆØ§Ø¯Ø§Ú¯Û•Ú•Ø§Ù†ØŒ Ø¨Û•Ø¯ÙˆØ§Ø¯Ø§Ú†ÙˆÙˆÙ†ØŒ Ø´Û†Ù¾Ø§Ù†Ø¯Ù†ØŒ Ø¯Ø§Ù†Û•Ù¾Û•ÛŒØŒ	Ú•Ø§ÙˆØŒ Ú•Ø§ÙˆÚ¯Û•ØŒ Ø¬ÛŽâ€ŒÚ•Ø§ÙˆØŒ	Ø®Û•Ù†Û•Ú©
"""),
                          const DefinitionKurdish(
                              text:
                                  "Ù¡. (Ù†Ø§Ùˆ) Ú†ÙˆÙˆÙ† Ø¨Û• Ø¯ÙˆØ§ÛŒ Ú©Û•Ø³ÛŽÚ© ÛŒØ§Ù† Ø´ØªÛŽÚ© Ø¨Û† Ú¯Ø±ØªÙ†ÛŒ"),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text: "My dog likes chasing rabbits."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ø³Û•Ú¯Û•Ú©Û•Ù… Ø­Û•Ø²ÛŒ Ø¨Û• Ø´ÙˆÛŽÙ†Ú©Û•ÙˆØªÙ†ÛŒ Ú©Û•Ø±ÙˆÛŽØ´Ú©Û•."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(), // With short examples define "chase", please follow LX instructions
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases1("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases1("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "The kids chased each other around the kitchen table."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ù…Ù†Ø¯Ø§ÚµÛ•Ú©Ø§Ù† Ø´ÙˆÛŽÙ† ÛŒÛ•Ú©Ø¯ÛŒ Ú©Û•ÙˆØªØ¨ÙˆÙˆÙ† Ø¨Û• Ø¯Û•ÙˆØ±ÛŒ Ù…ÛŽØ²ÛŒ Ú†ÛŽØ´ØªØ®Ø§Ù†Û•Ú©Û•Ø¯Ø§."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases2("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases2("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ù¢. (Ú©Ø±Ø¯Ø§Ø±) Ù†Ø§Ú†Ø§Ø±Ú©Ø±Ø¯Ù†ÛŒ Ú©Û•Ø³ÛŽÚ© ÛŒØ§Ù† Ø´ØªÛŽÚ© Ú©Û• Ú•Ø§Ø¨Ú©Ø§Øª"),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "Chase the cat outâ€”we don't want her in the kitchen."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ù¾Ø´ÛŒÙ„Û•Ú©Û• Ú•Ø§ÙˆØ¨Ù†ÛŽ Ø¯Û•Ø±Û•ÙˆÛ•ØŒ Ù†Ø§Ù…Ø§Ù†Û•ÙˆÛŽØª Ù„Û• Ú†ÛŽØ´ØªØ®Ø§Ù†Û•Ú©Û• Ø¨ÛŽØª."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases3("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases3("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "This particular fish chases off any other fish that enters its territory."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ø¦Û•Ù… Ø¬Û†Ø±Û• Ù…Ø§Ø³ÛŒÛŒÛ• Ú¾Û•Ø± Ø¬Û†Ø±Û• Ù…Ø§Ø³ÛŒÛŒÛ•Ú©ÛŒ Ø¯ÛŒÚ©Û• Ú•Ø§ÙˆØ¯Û•Ù†ÛŽØª Ú©Û• Ø¨ÛŽØªÛ• Ù†Ø§ÙˆÚ†Û•Ú©Û•ÛŒÛ•ÙˆÛ• ."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases4("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases4("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ù£. (Ú©Ø±Ø¯Ø§Ø±) Ú¾Û•ÙˆÚµØ¯Ø§Ù† Ø¨Û† Ø¨Û•Ø¯Û•Ø³ØªÚ¾ÛŽÙ†Ø§Ù†ÛŒ Ø´ØªÛŽÚ©ØŒ Ø¨Û† Ù†Ù…ÙˆÙˆÙ†Û• Ù¾Ø§Ø±Û•ØŒ Ú©Ø§Ø±ØŒ ÛŒØ§Ù† Ø³Û•Ø±Ú©Û•ÙˆØªÙ†"),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "Too many people are chasing too few jobs nowadays."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ú˜Ù…Ø§Ø±Û•ÛŒÛ•Ú©ÛŒ Ø²Û†Ø± Ø®Û•ÚµÚ© Ø¨Û•Ø´ÙˆÛŽÙ† Ú˜Ù…Ø§Ø±Û•ÛŒÛ•Ú©ÛŒ Ú©Û•Ù…ÛŒ Ú©Ø§Ø±Û•ÙˆÛ•Ù† Ø¦Û•Ù… Ú•Û†Ú˜Ø§Ù†Û•."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases5("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases5("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "The team is chasing its first win in five games."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "ØªÛŒÙ…Û•Ú©Û• Ú¾Û•ÙˆÚµÛŒ ÛŒÛ•Ú©Û•Ù… Ø¨Ø±Ø¯Ù†Û•ÙˆÛ•ÛŒ Ù„Û• Ù¾ÛŽÙ†Ø¬ ÛŒØ§Ø±ÛŒØ¯Ø§ Ø¯Û•Ø¯Ø§Øª."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases6("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases6("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ù¤. (Ú©Ø±Ø¯Ø§Ø±) Ú¾Û•ÙˆÚµØ¯Ø§Ù† Ø¨Û† Ú•Ø§Ø²ÛŒÚ©Ø±Ø¯Ù†ÛŒ Ú©Û•Ø³ÛŽÚ© Ø¨Û† Ø¨ÙˆÙˆÙ†ÛŒ Ù¾Û•ÛŒÙˆÛ•Ù†Ø¯ÛŒ Ø³ÛŽÚ©Ø³ÛŒ"),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "Kevin's been chasing after Jane for months."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ú©ÛŒÚ¤Ù† Ø¨Û† Ú†Û•Ù†Ø¯ÛŒÙ† Ù…Ø§Ù†Ú¯Û• Ø¨Û• Ø´ÙˆÛŽÙ† Ø¬Û•ÛŒÙ†Û•ÙˆÛ•ÛŒÛ•."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases7("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases7("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text: "Girls are always chasing him."),
                                    ExampleSentenceKurdish(
                                        text: "Ú©Ú†Ø§Ù† Ú¾Û•Ù…ÛŒØ´Û• Ø¨Û•Ø¯ÙˆØ§ÛŒÛ•ÙˆÛ•Ù†."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases8("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases8("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ù¥. (Ú©Ø±Ø¯Ø§Ø±) Ú•Ø§Ø²ÛŒÚ©Ø±Ø¯Ù†ÛŒ Ú©Û•Ø³ÛŽÚ© Ø¨Û† Ú©Ø±Ø¯Ù†ÛŒ Ú©Ø§Ø±ÛŽÚ© Ú©Û• Ø¯Û•Ø¨ÙˆÙˆ Ø²ÙˆÙˆØªØ± Ø¨ÛŒÚ©Ø±Ø¯Ø§ÛŒÛ•"),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "I need to chase him about organizing the meeting."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ù¾ÛŽÙˆÛŒØ³Øª Ø¨ÙˆÙˆ Ú•ÛŽÚ©Ø®Ø³ØªÙ†ÛŒ Ú©Û†Ø¨ÙˆÙˆÙ†Û•ÙˆÛ•Ú©Û• Ø¨Û•Ú¯ÙˆÛŽÛŒØ¯Ø§ Ø¨Ø¯Û•Ù…Û•ÙˆÛ•."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases9("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases9("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ù¦. (Ú©Ø±Ø¯Ø§Ø±) Ú†ÙˆÙˆÙ† Ø¨Û† Ø´ÙˆÛŽÙ†ÛŽÚ© Ø¨Û•Ù¾Û•Ù„Û•"),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "I've been chasing around town all morning looking for a present for Sharon."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "ØªÛ•ÙˆØ§ÙˆÛŒ Ø¨Û•ÛŒØ§Ù†ÛŒÛŒÛ•Ú©Û• Ø¨Û• Ø´Ø§Ø±Û†Ú†Ú©Û•Ú©Û•Ø¯Ø§ Ú¯Û•Ú•Ø§Ù… Ø¨Û† Ø¯ÛŒØ§Ø±ÛŒÛŒÛ•Ú© Ø¨Û† Ø´Ø§Ø±Û†Ù†."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases10("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases10("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text:
                                  "Ù§. (Ú©Ø±Ø¯Ø§Ø±) Ø´ÙˆÛŽÙ†Ú©Û•ÙˆØªÙ†ÛŒ Ú©Û•Ø³ÛŽÚ© ÛŒØ§Ù† Ø´ØªÛŽÚ© Ø¨Û† Ú¯Ø±ØªÙ†ÛŒ"),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "The thieves were caught by police after a short chase."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ø¯Ø²Û•Ú©Ø§Ù† Ù„Û•Ù„Ø§ÛŒÛ•Ù† Ù¾Û†Ù„ÛŒØ³Û•ÙˆÛ• Ú¯ÛŒØ±Ø§Ù† Ù„Û• Ø¯ÙˆØ§ÛŒ Ø¨Û•Ø¯ÙˆØ§Ú©Û•ÙˆØªÙ†ÛŽÚ©ÛŒ Ú©ÙˆØ±Øª."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases11("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases11("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerSentences(),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "We lost him in the narrow streets and had to give up the chase (= stop chasing him)."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ù„Û• Ø´Û•Ù‚Ø§Ù…Û• ØªÛ•Ø³Ú©Û•Ú©Ø§Ù†Ø¯Ø§ ÙˆÙ†Ù…Ø§Ù†Ú©Ø±Ø¯ Ùˆ Ù†Ø§Ú†Ø§Ø±Ø¨ÙˆÙˆÛŒÙ† Ú©Û†ØªØ§ÛŒÛŒ Ø¨Û• Ú•Ø§ÙˆÛ•Ø¯ÙˆÙˆÙ†Ø§Ù†Û•Ú©Û• Ø¨Ú¾ÛŽÙ†ÛŒÙ†."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases12("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases12("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ù§. (Ù†Ø§Ùˆ) Ú¾Û•ÙˆÚµØ¯Ø§Ù†ÛŒ Ø²Û†Ø± Ø¨Û• Ø¯Û•Ø³ØªØ®Ø³ØªÙ†ÛŒ Ø´ØªÛŽÚ©"),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "Three teams are involved in the chase for the championship."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ø³ÛŽ ØªÛŒÙ… Ù„Û• Ú©ÛŽØ¨Ú•Ú©ÛŒ Ø¯Ø§Ù† Ø¨Û† Ø¨Û•Ø¯Û•Ø³ØªÚ¾ÛŽÙ†Ø§Ù†ÛŒ Ù¾Ø§ÚµÛ•ÙˆØ§Ù†ÛŽØªÛŒÛŒÛ•Ú©Û•."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases13("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases13("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const DividerDefinition(),
                          const DefinitionKurdish(
                              text: "Ù©. (Ù†Ø§Ùˆ) Ú•Ø§ÙˆÚ©Ø±Ø¯Ù†ÛŒ Ø¦Ø§Ú˜Û•ÚµØ§Ù† Ø¨Û† ÙˆÛ•Ø±Ø²Ø´."),
                          Row(
                            children: [
                              const Expanded(
                                child: Column(
                                  children: [
                                    ExampleSentenceEnglish(
                                        text:
                                            "Exhausted and hungry, the hunters finally gave up the chase."),
                                    ExampleSentenceKurdish(
                                        text:
                                            "Ù…Ø§Ù†Ø¯ÙˆÙˆ Ùˆ Ø¨Ø±Ø³ÛŒØŒ Ú•Ø§ÙˆÚ©Û•Ø±Û•Ú©Ø§Ù† Ù„Û•Ú©Û†ØªØ§ÛŒÛŒØ¯Ø§ ÙˆØ§Ø²ÛŒØ§Ù† Ú¾Ø§ÙˆØ±Ø¯ Ù„Û• Ú•Ø§ÙˆÚ©Ø±Ø¯Ù†Û•Ú©Û•."),
                                  ],
                                ),
                              ),
                              const CustomSizedBoxForTTS(),
                              Column(
                                children: [
                                  CustomIconButtonBritish(
                                    onPressed: () => speakchases14("en-GB"),
                                  ),
                                  CustomIconButtonAmerican(
                                    onPressed: () => speakchases14("en-US"),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    const YouTubeScroller(
                      children: [
                        YoutubeEmbeddedone(),
                        YoutubeEmbeddedtwo(),
                        YoutubeEmbeddedthree(),
                        YoutubeEmbeddedfour(),
                        YoutubeEmbeddedfive(),
                        YoutubeEmbeddedsix(),
                        YoutubeEmbeddedseven(),
                        // YoutubeEmbeddedeight(), //
                        // YoutubeEmbeddednine(),
                        // YoutubeEmbeddedten(),
                        // YoutubeEmbeddedeleven(),
                        // YoutubeEmbeddedtwelve(),
                        // YoutubeEmbeddedthirteen(),
                        // YoutubeEmbeddeddfourteen(),
                        // YoutubeEmbeddedfifteen(),
                        // YoutubeEmbeddeddsixteen(),
                        // YoutubeEmbeddeddseventeen(),
                        // YoutubeEmbeddeddeighteen(),
                        // YoutubeEmbeddeddnineteen(),
                        // YoutubeEmbeddedtwenty(),
                        // YoutubeEmbeddedmulti(),
                        YoutubeEmbeddedend(),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// DOPSUM: ENGLISH MEANING

class EnglishMeaning extends StatefulWidget {
  const EnglishMeaning({super.key});

  @override
  State<EnglishMeaning> createState() => _EnglishMeaningState();
}

class _EnglishMeaningState extends State<EnglishMeaning> {
  FlutterTts flutterTts = FlutterTts();
  bool isSpeaking = false;

  Future<void> startSpeaking(
      String languageCode, EnglishMeaningConst englishMeaningConst) async {
    // Extract text from EnglishMeaningConst and store it in textToSpeak
    String textToSpeak = """
${englishMeaningConst.text}
""";

    await flutterTts.setLanguage(languageCode);
    await flutterTts.speak(textToSpeak);

    // Update the state to reflect that TTS is in progress
    setState(() {
      isSpeaking = true;
    });
  }

  // Function to stop TTS
  Future<void> stopSpeaking() async {
    await flutterTts.stop();

    // Update the state to reflect that TTS is stopped
    setState(() {
      isSpeaking = false;
    });
  }

  // Create an instance of EnglishMeaningConst with the desired text
  final EnglishMeaningConst englishMeaningConst = const EnglishMeaningConst(
    text: """
- Verb: chase (derived forms: chasing, chased, chases)
1. Go after with the intent to catch (= chase after, trail, tail, tag, give chase, dog, go after, track)
"The policeman chased the mugger down the alley"; "the fox chased the rabbit"; "The policeman chased after the mugger down the alley";
 
2. Pursue someone sexually or romantically (= chase after)
 
3. Cut a groove into
"chase silver"
 
4. Cut a furrow into columns (= furrow, chamfer)

- Noun: chase (derived forms: chases)
1. The act of pursuing in an effort to overtake or capture (= pursuit, pursual, following)
"the culprit started to run and the cop took off in chase";
 
2. A rectangular metal frame used in letterpress printing to hold together the pages or columns of composed type that are printed at one time
 
3. A cavity or groove, e.g. in a wall to hold cables or pipes

- Noun: Chase 
1. United States politician and jurist who served as chief justice of the United States Supreme Court (1808-1873) (= Salmon P. Chase, Salmon Portland Chase)
""",
  );

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const DividerDefinition(),
          // Using the EnglishButtonTTS class
          EnglishButtonTTS(
            onBritishPressed: (languageCode) =>
                startSpeaking(languageCode, englishMeaningConst),
            onAmericanPressed: (languageCode) =>
                startSpeaking(languageCode, englishMeaningConst),
            onStopPressed: stopSpeaking,
          ),
          // Speaker icon for American English
          englishMeaningConst,
        ],
      ),
    );
  }
}

// DOPSUM: FIRST YOUTUBE VIDEO

class YoutubeEmbeddedend extends StatefulWidget {
  const YoutubeEmbeddedend({super.key});

  @override
  State<YoutubeEmbeddedend> createState() => _YoutubeEmbeddedendState();
}

class _YoutubeEmbeddedendState extends State<YoutubeEmbeddedend> {
  late YoutubePlayerController _controller;
  final String _videoId = 'GoQkxFNk-hw';
  final double _startSeconds = 0;

  @override
  void initState() {
    super.initState();
    _initializePlayer();
  }

  void _initializePlayer() {
    _controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );
  }

  void _reloadVideo() {
    _controller.loadVideoById(
      videoId: _videoId,
      startSeconds: _startSeconds,
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeVideosContainerEnd(
        controller: _controller,
        onReloadVideo: _reloadVideo,
      ),
    );
  }
}

class YoutubeEmbeddedone extends StatefulWidget {
  const YoutubeEmbeddedone({super.key});

  @override
  State<YoutubeEmbeddedone> createState() => _YoutubeEmbeddedoneState();
}

class _YoutubeEmbeddedoneState extends State<YoutubeEmbeddedone> {
  late YoutubePlayerController _controller;
  final String _videoId = '9b76gFIbNJs';
  final double _startSeconds = 18;

  @override
  void initState() {
    super.initState();
    _initializePlayer();
  }

  void _initializePlayer() {
    _controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );
  }

  void _reloadVideo() {
    _controller.loadVideoById(
      videoId: _videoId,
      startSeconds: _startSeconds,
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeVideosContainer(
        controller: _controller,
        onReloadVideo: _reloadVideo,
      ),
    );
  }
}

class YoutubeEmbeddedtwo extends StatefulWidget {
  const YoutubeEmbeddedtwo({super.key});

  @override
  State<YoutubeEmbeddedtwo> createState() => _YoutubeEmbeddedtwoState();
}

class _YoutubeEmbeddedtwoState extends State<YoutubeEmbeddedtwo> {
  late YoutubePlayerController _controller;
  final String _videoId = 'IjOdZ0Pm85s';
  final double _startSeconds = 111;

  @override
  void initState() {
    super.initState();
    _initializePlayer();
  }

  void _initializePlayer() {
    _controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );
  }

  void _reloadVideo() {
    _controller.loadVideoById(
      videoId: _videoId,
      startSeconds: _startSeconds,
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeVideosContainer(
        controller: _controller,
        onReloadVideo: _reloadVideo,
      ),
    );
  }
}

class YoutubeEmbeddedthree extends StatefulWidget {
  const YoutubeEmbeddedthree({super.key});

  @override
  State<YoutubeEmbeddedthree> createState() => _YoutubeEmbeddedthreeState();
}

class _YoutubeEmbeddedthreeState extends State<YoutubeEmbeddedthree> {
  late YoutubePlayerController _controller;
  final String _videoId = 'zqllxbPWKNI';
  final double _startSeconds = 1410;

  @override
  void initState() {
    super.initState();
    _initializePlayer();
  }

  void _initializePlayer() {
    _controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );
  }

  void _reloadVideo() {
    _controller.loadVideoById(
      videoId: _videoId,
      startSeconds: _startSeconds,
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeVideosContainer(
        controller: _controller,
        onReloadVideo: _reloadVideo,
      ),
    );
  }
}

class YoutubeEmbeddedfour extends StatefulWidget {
  const YoutubeEmbeddedfour({super.key});

  @override
  State<YoutubeEmbeddedfour> createState() => _YoutubeEmbeddedfourState();
}

class _YoutubeEmbeddedfourState extends State<YoutubeEmbeddedfour> {
  late YoutubePlayerController _controller;
  final String _videoId = 'tsxmyL7TUJg';
  final double _startSeconds = 536;

  @override
  void initState() {
    super.initState();
    _initializePlayer();
  }

  void _initializePlayer() {
    _controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );
  }

  void _reloadVideo() {
    _controller.loadVideoById(
      videoId: _videoId,
      startSeconds: _startSeconds,
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeVideosContainer(
        controller: _controller,
        onReloadVideo: _reloadVideo,
      ),
    );
  }
}

class YoutubeEmbeddedfive extends StatefulWidget {
  const YoutubeEmbeddedfive({super.key});

  @override
  State<YoutubeEmbeddedfive> createState() => _YoutubeEmbeddedfiveState();
}

class _YoutubeEmbeddedfiveState extends State<YoutubeEmbeddedfive> {
  late YoutubePlayerController _controller;
  final String _videoId = '58XEfDtU0Z4';
  final double _startSeconds = 1149;

  @override
  void initState() {
    super.initState();
    _initializePlayer();
  }

  void _initializePlayer() {
    _controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );
  }

  void _reloadVideo() {
    _controller.loadVideoById(
      videoId: _videoId,
      startSeconds: _startSeconds,
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeVideosContainer(
        controller: _controller,
        onReloadVideo: _reloadVideo,
      ),
    );
  }
}

class YoutubeEmbeddedsix extends StatefulWidget {
  const YoutubeEmbeddedsix({super.key});

  @override
  State<YoutubeEmbeddedsix> createState() => _YoutubeEmbeddedsixState();
}

class _YoutubeEmbeddedsixState extends State<YoutubeEmbeddedsix> {
  late YoutubePlayerController _controller;
  final String _videoId = '3RkhZgRNC1k';
  final double _startSeconds = 1562;

  @override
  void initState() {
    super.initState();
    _initializePlayer();
  }

  void _initializePlayer() {
    _controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );
  }

  void _reloadVideo() {
    _controller.loadVideoById(
      videoId: _videoId,
      startSeconds: _startSeconds,
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeVideosContainer(
        controller: _controller,
        onReloadVideo: _reloadVideo,
      ),
    );
  }
}

class YoutubeEmbeddedseven extends StatefulWidget {
  const YoutubeEmbeddedseven({super.key});

  @override
  State<YoutubeEmbeddedseven> createState() => _YoutubeEmbeddedsevenState();
}

class _YoutubeEmbeddedsevenState extends State<YoutubeEmbeddedseven> {
  late YoutubePlayerController _controller;
  final String _videoId = 'jFk-L7Wcg0g';
  final double _startSeconds = 368;

  @override
  void initState() {
    super.initState();
    _initializePlayer();
  }

  void _initializePlayer() {
    _controller = YoutubePlayerController.fromVideoId(
      videoId: _videoId,
      startSeconds: _startSeconds,
      autoPlay: true,
      params: const YoutubePlayerParams(
        enableCaption: true,
        captionLanguage: 'en',
        showControls: false,
        strictRelatedVideos: true,
      ),
    );
  }

  void _reloadVideo() {
    _controller.loadVideoById(
      videoId: _videoId,
      startSeconds: _startSeconds,
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: YouTubeVideosContainer(
        controller: _controller,
        onReloadVideo: _reloadVideo,
      ),
    );
  }
}

// end WORD_WEB
